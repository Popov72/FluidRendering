{"version":3,"file":"420.aeea050dfcadd86927e9.js","mappings":"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","sources":["webpack://babylonjs-fluid-rendering/./src/scenes/FluidRenderer/fluidRendererSceneComponent.ts","webpack://babylonjs-fluid-rendering/./src/scenes/fluidSimulation2.ts","webpack://babylonjs-fluid-rendering/./src/scenes/fluidSimulationDemoBoxSphere.ts","webpack://babylonjs-fluid-rendering/./src/assets/scenes/simple_round_table.glb","webpack://babylonjs-fluid-rendering/./src/scenes/fluidSimulationDemoGlass.ts","webpack://babylonjs-fluid-rendering/./src/scenes/fluidSimulationDemoHeightMap.ts","webpack://babylonjs-fluid-rendering/./src/scenes/fluidSimulationDemoMeshSDF.ts","webpack://babylonjs-fluid-rendering/./src/scenes/fluidSimulationDemoParticleCustomShape.ts","webpack://babylonjs-fluid-rendering/./src/assets/pictures/flare32bits.png","webpack://babylonjs-fluid-rendering/./src/scenes/fluidSimulationDemoParticleSystem.ts","webpack://babylonjs-fluid-rendering/./src/scenes/fluidSimulationDemoPrecomputeRendering.ts"],"sourcesContent":["import * as BABYLON from \"@babylonjs/core\";\r\n\r\nimport { FluidRenderer } from \"./fluidRenderer\";\r\n\r\nconst NAME_FLUIDRENDERER = \"FluidRenderer\";\r\nconst STEP_GATHERACTIVECAMERARENDERTARGET_FLUIDRENDERER = 1;\r\nconst STEP_AFTERCAMERADRAW_FLUIDRENDERER = 5;\r\n\r\ndeclare module \"@babylonjs/core/abstractScene\" {\r\n    export interface AbstractScene {\r\n        /** @hidden (Backing field) */\r\n        _fluidRenderer: BABYLON.Nullable<FluidRenderer>;\r\n\r\n        /**\r\n         * Gets or Sets the fluid renderer associated to the scene.\r\n         */\r\n        fluidRenderer: BABYLON.Nullable<FluidRenderer>;\r\n\r\n        /**\r\n         * Enables the fluid renderer and associates it with the scene\r\n         * @returns the FluidRenderer\r\n         */\r\n        enableFluidRenderer(): BABYLON.Nullable<FluidRenderer>;\r\n\r\n        /**\r\n         * Disables the fluid renderer associated with the scene\r\n         */\r\n        disableFluidRenderer(): void;\r\n    }\r\n}\r\n\r\nObject.defineProperty(BABYLON.Scene.prototype, \"fluidRenderer\", {\r\n    get: function (this: BABYLON.Scene) {\r\n        return this._fluidRenderer;\r\n    },\r\n    set: function (\r\n        this: BABYLON.Scene,\r\n        value: BABYLON.Nullable<FluidRenderer>\r\n    ) {\r\n        this._fluidRenderer = value;\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n\r\nBABYLON.Scene.prototype.enableFluidRenderer =\r\n    function (): BABYLON.Nullable<FluidRenderer> {\r\n        if (this._fluidRenderer) {\r\n            return this._fluidRenderer;\r\n        }\r\n\r\n        this._fluidRenderer = new FluidRenderer(this);\r\n\r\n        return this._fluidRenderer;\r\n    };\r\n\r\nBABYLON.Scene.prototype.disableFluidRenderer = function (): void {\r\n    this._fluidRenderer?.dispose();\r\n    this._fluidRenderer = null;\r\n};\r\n\r\n/**\r\n * Defines the Geometry Buffer scene component responsible to manage a G-Buffer useful\r\n * in several rendering techniques.\r\n */\r\nexport class FluidRendererSceneComponent implements BABYLON.ISceneComponent {\r\n    /**\r\n     * The component name helpful to identify the component in the list of scene components.\r\n     */\r\n    public readonly name = NAME_FLUIDRENDERER;\r\n\r\n    /**\r\n     * The scene the component belongs to.\r\n     */\r\n    public scene: BABYLON.Scene;\r\n\r\n    /**\r\n     * Creates a new instance of the component for the given scene\r\n     * @param scene Defines the scene to register the component in\r\n     */\r\n    constructor(scene: BABYLON.Scene) {\r\n        this.scene = scene;\r\n    }\r\n\r\n    /**\r\n     * Registers the component in a given scene\r\n     */\r\n    public register(): void {\r\n        this.scene._gatherActiveCameraRenderTargetsStage.registerStep(\r\n            STEP_GATHERACTIVECAMERARENDERTARGET_FLUIDRENDERER,\r\n            this,\r\n            this._gatherActiveCameraRenderTargets\r\n        );\r\n        this.scene._afterCameraDrawStage.registerStep(\r\n            STEP_AFTERCAMERADRAW_FLUIDRENDERER,\r\n            this,\r\n            this._afterCameraDraw\r\n        );\r\n    }\r\n\r\n    private _gatherActiveCameraRenderTargets(/*renderTargets: BABYLON.SmartArrayNoDuplicate<BABYLON.RenderTargetTexture>*/): void {\r\n        this.scene.fluidRenderer?._prepareRendering();\r\n    }\r\n\r\n    private _afterCameraDraw(camera: BABYLON.Camera) {\r\n        this.scene.fluidRenderer?._render(camera);\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the elements related to this component in case of\r\n     * context lost for instance.\r\n     */\r\n    public rebuild(): void {\r\n        if (this.scene._fluidRenderer) {\r\n            // Release resources first\r\n            this.scene.disableFluidRenderer();\r\n\r\n            // Re-enable\r\n            this.scene.enableFluidRenderer();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes the component and the associated resources\r\n     */\r\n    public dispose(): void {\r\n        this.scene.disableFluidRenderer();\r\n    }\r\n}\r\n\r\nFluidRenderer._SceneComponentInitialization = (scene: BABYLON.Scene) => {\r\n    let component = scene._getComponent(\r\n        NAME_FLUIDRENDERER\r\n    ) as FluidRendererSceneComponent;\r\n    if (!component) {\r\n        component = new FluidRendererSceneComponent(scene);\r\n        scene._addComponent(component);\r\n    }\r\n};\r\n","import { CreateSceneClass } from \"../createScene\";\r\n\r\nimport * as BABYLON from \"@babylonjs/core\";\r\n\r\nimport \"./FluidRenderer/fluidRendererSceneComponent\";\r\n\r\nimport { FluidSimulationDemoBoxSphere } from \"./fluidSimulationDemoBoxSphere\";\r\nimport { FluidSimulationDemoHeightMap } from \"./fluidSimulationDemoHeightMap\";\r\nimport { FluidSimulationDemoBase } from \"./fluidSimulationDemoBase\";\r\nimport { FluidSimulationDemoPrecomputeRendering } from \"./fluidSimulationDemoPrecomputeRendering\";\r\nimport { FluidSimulationDemoParticleSystem } from \"./fluidSimulationDemoParticleSystem\";\r\nimport { FluidSimulationDemoParticleCustomShape } from \"./fluidSimulationDemoParticleCustomShape\";\r\nimport { FluidSimulationDemoGlass } from \"./fluidSimulationDemoGlass\";\r\nimport { FluidSimulationDemoMeshSDF } from \"./fluidSimulationDemoMeshSDF\";\r\n\r\nconst cameraMin = 0.1;\r\nconst cameraMax = 1000;\r\n\r\nexport class FluidRendering implements CreateSceneClass {\r\n    private _scene: BABYLON.Scene;\r\n\r\n    constructor() {\r\n        this._scene = null as any;\r\n    }\r\n\r\n    public async createScene(\r\n        engine: BABYLON.Engine,\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        canvas: HTMLCanvasElement\r\n    ): Promise<BABYLON.Scene> {\r\n        const scene = new BABYLON.Scene(engine);\r\n\r\n        this._scene = scene;\r\n\r\n        (window as any).BABYLON = BABYLON;\r\n\r\n        const createCamera = () => {\r\n            const camera = new BABYLON.ArcRotateCamera(\r\n                \"ArcRotateCamera\",\r\n                3.06,\r\n                1.14,\r\n                2.96,\r\n                new BABYLON.Vector3(0, 0, 0),\r\n                scene\r\n            );\r\n            camera.fov = (60 * Math.PI) / 180;\r\n            camera.attachControl();\r\n            camera.minZ = cameraMin;\r\n            camera.maxZ = cameraMax;\r\n            camera.wheelPrecision = 50;\r\n            camera.inputs.removeByType(\"ArcRotateCameraKeyboardMoveInput\");\r\n\r\n            return camera;\r\n        };\r\n\r\n        const camera = createCamera();\r\n\r\n        scene.activeCamera = camera;\r\n\r\n        FluidSimulationDemoBase.AddDemo(\r\n            \"Particle system\",\r\n            () => new FluidSimulationDemoParticleSystem(scene)\r\n        );\r\n        FluidSimulationDemoBase.AddDemo(\r\n            \"Particle custom shape\",\r\n            () => new FluidSimulationDemoParticleCustomShape(scene)\r\n        );\r\n        FluidSimulationDemoBase.AddDemo(\r\n            \"Precomputed particles - rendering only\",\r\n            () => new FluidSimulationDemoPrecomputeRendering(scene)\r\n        );\r\n        FluidSimulationDemoBase.AddDemo(\r\n            \"Box, sphere and wall\",\r\n            () => new FluidSimulationDemoBoxSphere(scene)\r\n        );\r\n        FluidSimulationDemoBase.AddDemo(\r\n            \"Height map\",\r\n            () => new FluidSimulationDemoHeightMap(scene)\r\n        );\r\n        FluidSimulationDemoBase.AddDemo(\r\n            \"Glass\",\r\n            () => new FluidSimulationDemoGlass(scene)\r\n        );\r\n        FluidSimulationDemoBase.AddDemo(\r\n            \"Mesh SDF\",\r\n            () => new FluidSimulationDemoMeshSDF(scene)\r\n        );\r\n\r\n        FluidSimulationDemoBase.StartDemo(3);\r\n\r\n        return scene;\r\n    }\r\n}\r\n\r\nexport default new FluidRendering();\r\n","import * as BABYLON from \"@babylonjs/core\";\r\n\r\nimport * as LiLGUI from \"lil-gui\";\r\n\r\nimport { FluidSimulationDemoBase } from \"./fluidSimulationDemoBase\";\r\nimport { ICollisionShape } from \"./Utils/sdfHelper\";\r\n\r\nexport class FluidSimulationDemoBoxSphere extends FluidSimulationDemoBase {\r\n    private _checkXZBounds: boolean;\r\n    private _sphereMesh: BABYLON.Nullable<BABYLON.Mesh>;\r\n    private _boxMin: BABYLON.Vector3;\r\n    private _boxMax: BABYLON.Vector3;\r\n    private _boxMesh: BABYLON.Nullable<BABYLON.Mesh>;\r\n    private _boxMaterial: BABYLON.Nullable<BABYLON.PBRMaterial>;\r\n    private _boxMeshFront: BABYLON.Nullable<BABYLON.Mesh>;\r\n    private _boxMaterialFront: BABYLON.Nullable<BABYLON.PBRMaterial>;\r\n    private _origCollisionPlanes: Array<BABYLON.Plane>;\r\n    private _collisionPlanes: Array<\r\n        [BABYLON.Nullable<BABYLON.Mesh>, ICollisionShape]\r\n    >;\r\n    private _angleX: number;\r\n    private _angleY: number;\r\n    private _prevTransfo: BABYLON.Matrix;\r\n    private _autoRotateBox: boolean;\r\n    private _wallMesh: BABYLON.Nullable<BABYLON.Mesh>;\r\n    private _passPP: BABYLON.PostProcess;\r\n    private _sceneRenderObserver: BABYLON.Nullable<\r\n        BABYLON.Observer<BABYLON.Scene>\r\n    >;\r\n    private _sceneAfterCameraRenderObserver: BABYLON.Nullable<\r\n        BABYLON.Observer<BABYLON.Camera>\r\n    >;\r\n    private _sceneKeyboardObserver: BABYLON.Nullable<\r\n        BABYLON.Observer<BABYLON.KeyboardInfo>\r\n    >;\r\n    private _onEngineResizeObserver: BABYLON.Nullable<\r\n        BABYLON.Observer<BABYLON.Engine>\r\n    >;\r\n\r\n    constructor(scene: BABYLON.Scene) {\r\n        super(scene);\r\n\r\n        this._boxMin = new BABYLON.Vector3(-0.3, -0.3, -0.7);\r\n        this._boxMax = new BABYLON.Vector3(0.3, 1.2, 0.7);\r\n        this._boxMesh = null;\r\n        this._boxMaterial = null;\r\n        this._boxMeshFront = null;\r\n        this._boxMaterialFront = null;\r\n\r\n        this._checkXZBounds = true;\r\n        this._origCollisionPlanes = [\r\n            new BABYLON.Plane(0, 0, -1, Math.abs(this._boxMax.z)),\r\n            new BABYLON.Plane(0, 0, 1, Math.abs(this._boxMin.z)),\r\n            new BABYLON.Plane(1, 0, 0, Math.abs(this._boxMin.x)),\r\n            new BABYLON.Plane(-1, 0, 0, Math.abs(this._boxMax.x)),\r\n            new BABYLON.Plane(0, -1, 0, Math.abs(this._boxMax.y)),\r\n            new BABYLON.Plane(0, 1, 0, Math.abs(this._boxMin.y)),\r\n            new BABYLON.Plane(0, 1, 0, Math.abs(this._boxMin.y)),\r\n        ];\r\n        this._collisionPlanes = [];\r\n        for (let i = 0; i < this._origCollisionPlanes.length; ++i) {\r\n            const plane = this._origCollisionPlanes[i];\r\n            this.addCollisionPlane(\r\n                plane.normal,\r\n                plane.d,\r\n                i === this._origCollisionPlanes.length - 1 ? 0.98 : undefined\r\n            );\r\n        }\r\n\r\n        this._angleX = 0;\r\n        this._angleY = 0;\r\n        this._prevTransfo = BABYLON.Matrix.Identity();\r\n        this._autoRotateBox = false;\r\n\r\n        this._sceneRenderObserver = null;\r\n        this._sceneAfterCameraRenderObserver = null;\r\n        this._sceneKeyboardObserver = null;\r\n        this._onEngineResizeObserver = null;\r\n\r\n        this._passPP = new BABYLON.PassPostProcess(\r\n            \"pass\",\r\n            1,\r\n            null,\r\n            undefined,\r\n            this._engine\r\n        );\r\n        this._passPP.externalTextureSamplerBinding = true;\r\n\r\n        const sphereRadius = 0.16;\r\n\r\n        this._sphereMesh = null;\r\n        this.addCollisionSphere(\r\n            new BABYLON.Vector3(\r\n                (this._boxMin.x + this._boxMax.x) / 2,\r\n                this._boxMin.y + sphereRadius,\r\n                (this._boxMin.z + this._boxMax.z) / 2 - 0.1\r\n            ),\r\n            sphereRadius\r\n        );\r\n\r\n        this._wallMesh = null;\r\n        this.addCollisionBox(\r\n            new BABYLON.Vector3(0.0, 0.0, 0.3),\r\n            new BABYLON.Vector3((90 * Math.PI) / 180, 0, 0),\r\n            new BABYLON.Vector3(0.32, 0.05, 0.3),\r\n            new BABYLON.Vector3(1, 0, 0)\r\n        );\r\n    }\r\n\r\n    protected async _run() {\r\n        // Get collision meshes\r\n        for (let i = 0; i < this._origCollisionPlanes.length; ++i) {\r\n            this._collisionPlanes.push(this._collisionObjects[i]);\r\n        }\r\n\r\n        this._collisionPlanes[this._collisionPlanes.length - 1][1].disabled =\r\n            true;\r\n\r\n        this._sphereMesh =\r\n            this._collisionObjects[this._origCollisionPlanes.length][0];\r\n        this._wallMesh =\r\n            this._collisionObjects[this._origCollisionPlanes.length + 1][0];\r\n\r\n        // Reset camera\r\n        const camera =\r\n            this._scene.activeCameras?.[0] ?? this._scene.activeCamera;\r\n\r\n        if (camera) {\r\n            (camera as BABYLON.ArcRotateCamera).alpha = 3.06;\r\n            (camera as BABYLON.ArcRotateCamera).beta = 1.14;\r\n            (camera as BABYLON.ArcRotateCamera).radius = 2.96;\r\n\r\n            camera.outputRenderTarget = new BABYLON.RenderTargetTexture(\r\n                \"rttFinal\",\r\n                {\r\n                    width: this._engine.getRenderWidth(),\r\n                    height: this._engine.getRenderHeight(),\r\n                },\r\n                this._scene\r\n            );\r\n        }\r\n\r\n        // Simulation parameters\r\n        this._fluidRenderObject.object.particleSize = 0.08;\r\n\r\n        this._fluidSim!.smoothingRadius = 0.04;\r\n        this._fluidSim!.densityReference = 20000;\r\n        this._fluidSim!.pressureConstant = 4;\r\n        this._fluidSim!.viscosity = 0.01;\r\n        this._fluidSim!.maxVelocity = 3;\r\n        this._fluidSim!.maxAcceleration = 2000;\r\n\r\n        // Create materials\r\n        this._boxMaterial = new BABYLON.PBRMaterial(\"BoxMeshMat\", this._scene);\r\n        this._boxMaterial.metallic = 0.3;\r\n        this._boxMaterial.roughness = 0;\r\n        this._boxMaterial.alpha = 0.2;\r\n        this._boxMaterial.backFaceCulling = true;\r\n        this._boxMaterial.cullBackFaces = false;\r\n\r\n        this._boxMaterialFront = this._boxMaterial.clone(\"BoxMeshFrontMat\");\r\n        this._boxMaterialFront.cullBackFaces = true;\r\n\r\n        // Create meshes\r\n        this._boxMesh = BABYLON.MeshBuilder.CreateBox(\r\n            \"boxMesh\",\r\n            {\r\n                width: this._boxMax.x - this._boxMin.x,\r\n                height: this._boxMax.y - this._boxMin.y,\r\n                depth: this._boxMax.z - this._boxMin.z,\r\n            },\r\n            this._scene\r\n        );\r\n        this._boxMesh.material = this._boxMaterial;\r\n        this._boxMesh.position.x = (this._boxMin.x + this._boxMax.x) / 2;\r\n        this._boxMesh.position.y = (this._boxMin.y + this._boxMax.y) / 2;\r\n        this._boxMesh.position.z = (this._boxMin.z + this._boxMax.z) / 2;\r\n        this._boxMesh.isPickable = false;\r\n\r\n        this._boxMeshFront = this._boxMesh.clone(\"boxMeshFront\");\r\n        this._boxMeshFront.material = this._boxMaterialFront;\r\n        this._boxMeshFront.layerMask = 0x10000000; // make sure the mesh is not displayed by the camera - we will display it ourselves by a direct call to render()\r\n\r\n        // Keyboard handling\r\n        let arrowLeftDown = false;\r\n        let arrowRightDown = false;\r\n        let arrowUpDown = false;\r\n        let arrowDownDown = false;\r\n\r\n        this._scene.onKeyboardObservable.add((kbInfo) => {\r\n            switch (kbInfo.type) {\r\n                case BABYLON.KeyboardEventTypes.KEYDOWN:\r\n                    if (kbInfo.event.code === \"ArrowLeft\") {\r\n                        arrowLeftDown = true;\r\n                    } else if (kbInfo.event.code === \"ArrowRight\") {\r\n                        arrowRightDown = true;\r\n                    } else if (kbInfo.event.code === \"ArrowUp\") {\r\n                        arrowUpDown = true;\r\n                    } else if (kbInfo.event.code === \"ArrowDown\") {\r\n                        arrowDownDown = true;\r\n                    }\r\n                    break;\r\n                case BABYLON.KeyboardEventTypes.KEYUP:\r\n                    if (kbInfo.event.code === \"ArrowLeft\") {\r\n                        arrowLeftDown = false;\r\n                    } else if (kbInfo.event.code === \"ArrowRight\") {\r\n                        arrowRightDown = false;\r\n                    } else if (kbInfo.event.code === \"ArrowUp\") {\r\n                        arrowUpDown = false;\r\n                    } else if (kbInfo.event.code === \"ArrowDown\") {\r\n                        arrowDownDown = false;\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n\r\n        // Render the front side of the box\r\n        this._passPP.onApplyObservable.add((effect) => {\r\n            effect.setTexture(\"textureSampler\", camera!.outputRenderTarget);\r\n        });\r\n\r\n        let depthIsShared = false;\r\n        this._sceneAfterCameraRenderObserver =\r\n            this._scene.onAfterCameraRenderObservable.add(() => {\r\n                const firstPP = camera?._getFirstPostProcess();\r\n                if (\r\n                    firstPP &&\r\n                    firstPP.inputTexture.depthStencilTexture &&\r\n                    !depthIsShared\r\n                ) {\r\n                    firstPP.inputTexture._shareDepth(\r\n                        camera!.outputRenderTarget!.renderTarget!\r\n                    );\r\n                    depthIsShared = true;\r\n                }\r\n                if (depthIsShared) {\r\n                    this._boxMeshFront?.render(\r\n                        this._boxMeshFront.subMeshes[0],\r\n                        true\r\n                    );\r\n                    this._scene.postProcessManager.directRender(\r\n                        [this._passPP!],\r\n                        null\r\n                    );\r\n                }\r\n            });\r\n\r\n        this._onEngineResizeObserver = this._engine.onResizeObservable.add(\r\n            () => {\r\n                camera?.outputRenderTarget?.resize({\r\n                    width: this._engine.getRenderWidth(true),\r\n                    height: this._engine.getRenderHeight(true),\r\n                });\r\n                depthIsShared = false;\r\n            }\r\n        );\r\n\r\n        // Move meshes\r\n        this._sceneRenderObserver = this._scene.onBeforeRenderObservable.add(\r\n            () => {\r\n                if (arrowLeftDown) {\r\n                    this._angleX += (2 * 30) / 60;\r\n                    this._rotateMeshes(this._angleX, this._angleY);\r\n                }\r\n                if (arrowRightDown) {\r\n                    this._angleX -= (2 * 30) / 60;\r\n                    this._rotateMeshes(this._angleX, this._angleY);\r\n                }\r\n                if (arrowUpDown) {\r\n                    this._angleY -= (2 * 30) / 60;\r\n                    this._rotateMeshes(this._angleX, this._angleY);\r\n                }\r\n                if (arrowDownDown) {\r\n                    this._angleY += (2 * 30) / 60;\r\n                    this._rotateMeshes(this._angleX, this._angleY);\r\n                }\r\n\r\n                if (this._autoRotateBox) {\r\n                    const fps = this._engine.getFps();\r\n                    this._angleX += 20 / fps;\r\n                    this._angleY += 30 / fps;\r\n                    this._rotateMeshes(this._angleX, this._angleY);\r\n                }\r\n            }\r\n        );\r\n\r\n        super._run();\r\n    }\r\n\r\n    public dispose(): void {\r\n        super.dispose();\r\n\r\n        const camera =\r\n            this._scene.activeCameras?.[0] ?? this._scene.activeCamera;\r\n\r\n        if (camera) {\r\n            camera.outputRenderTarget?.dispose();\r\n            camera.outputRenderTarget = null;\r\n        }\r\n\r\n        this._scene.onBeforeRenderObservable.remove(this._sceneRenderObserver);\r\n        this._scene.onAfterCameraRenderObservable.remove(\r\n            this._sceneAfterCameraRenderObserver\r\n        );\r\n        this._scene.onKeyboardObservable.remove(this._sceneKeyboardObserver);\r\n\r\n        this._passPP.dispose();\r\n        this._boxMesh?.dispose();\r\n        this._boxMeshFront?.dispose();\r\n        this._boxMaterial?.dispose();\r\n        this._engine.onResizeObservable.remove(this._onEngineResizeObserver);\r\n    }\r\n\r\n    protected _makeGUIMainMenu(): void {\r\n        const params = {\r\n            checkXZBounds: true,\r\n            autoRotateBox: false,\r\n            restart: () => {\r\n                this._angleX = this._angleY = 0;\r\n                this._autoRotateBox = false;\r\n                autoRotateBoxCtrl?.setValue(false);\r\n                this._rotateMeshes(0, 0);\r\n                this._generateParticles();\r\n            },\r\n            boxOpacity: this._boxMaterial!.alpha,\r\n        };\r\n\r\n        const mainMenu = this._gui!;\r\n\r\n        let autoRotateBoxCtrl: BABYLON.Nullable<LiLGUI.Controller> = null;\r\n\r\n        mainMenu.add(params, \"restart\").name(\"Restart\");\r\n\r\n        mainMenu\r\n            .add(params, \"checkXZBounds\")\r\n            .name(\"Check box bounds\")\r\n            .onChange((value: boolean) => {\r\n                this._checkXZBounds = value;\r\n                this._boxMesh?.setEnabled(value);\r\n                this._boxMeshFront?.setEnabled(value);\r\n                for (let i = 0; i < this._collisionPlanes.length; ++i) {\r\n                    this._collisionPlanes[i][1].disabled =\r\n                        (!value && i < this._collisionPlanes.length - 1) ||\r\n                        (value && i === this._collisionPlanes.length - 1);\r\n                }\r\n                if (!value) {\r\n                    this._autoRotateBox = false;\r\n                    autoRotateBoxCtrl?.setValue(false);\r\n                }\r\n            });\r\n\r\n        autoRotateBoxCtrl = mainMenu\r\n            .add(params, \"autoRotateBox\")\r\n            .name(\"Auto rotate box\")\r\n            .onChange((value: boolean) => {\r\n                this._autoRotateBox = value;\r\n            });\r\n\r\n        mainMenu\r\n            .add(params, \"boxOpacity\", 0, 1, 0.01)\r\n            .name(\"Box opacity\")\r\n            .onChange((value: any) => {\r\n                this._boxMaterial!.alpha = value;\r\n                this._boxMaterialFront!.alpha = value;\r\n            });\r\n    }\r\n\r\n    protected _onPaused(value: boolean) {\r\n        super._onPaused(value);\r\n\r\n        if (value) {\r\n            this._autoRotateBox = false;\r\n        }\r\n    }\r\n\r\n    protected _rotateMeshes(angleX: number, angleY: number): void {\r\n        const transfo = BABYLON.Matrix.RotationYawPitchRoll(\r\n            0,\r\n            (angleX * Math.PI) / 180,\r\n            (angleY * Math.PI) / 180\r\n        );\r\n\r\n        const boxVertices = [\r\n            new BABYLON.Vector3(this._boxMin.x, this._boxMin.y, this._boxMin.z),\r\n            new BABYLON.Vector3(this._boxMin.x, this._boxMax.y, this._boxMin.z),\r\n            new BABYLON.Vector3(this._boxMin.x, this._boxMax.y, this._boxMax.z),\r\n            new BABYLON.Vector3(this._boxMin.x, this._boxMin.y, this._boxMax.z),\r\n            new BABYLON.Vector3(this._boxMax.x, this._boxMin.y, this._boxMin.z),\r\n            new BABYLON.Vector3(this._boxMax.x, this._boxMax.y, this._boxMin.z),\r\n            new BABYLON.Vector3(this._boxMax.x, this._boxMax.y, this._boxMax.z),\r\n            new BABYLON.Vector3(this._boxMax.x, this._boxMin.y, this._boxMax.z),\r\n        ];\r\n\r\n        let ymin = 1e10;\r\n        for (let i = 0; i < boxVertices.length; ++i) {\r\n            const v = BABYLON.Vector3.TransformCoordinates(\r\n                boxVertices[i],\r\n                transfo\r\n            );\r\n            ymin = Math.min(ymin, v.y);\r\n        }\r\n\r\n        this._collisionPlanes[\r\n            this._origCollisionPlanes.length - 1\r\n        ][1].params[1] = Math.abs(ymin) + 0.02;\r\n\r\n        for (let i = 0; i < this._origCollisionPlanes.length - 1; ++i) {\r\n            const plane = this._origCollisionPlanes[i].transform(transfo);\r\n            this._collisionPlanes[i][1].params = [plane.normal, plane.d];\r\n        }\r\n\r\n        const quat = BABYLON.Quaternion.FromRotationMatrix(transfo);\r\n\r\n        this._prevTransfo.invert();\r\n\r\n        if (this._sphereMesh) {\r\n            const tmp = BABYLON.Vector3.TransformCoordinates(\r\n                this._sphereMesh.position,\r\n                this._prevTransfo\r\n            );\r\n\r\n            this._sphereMesh.rotationQuaternion = quat;\r\n            this._sphereMesh.position = BABYLON.Vector3.TransformCoordinates(\r\n                tmp,\r\n                transfo\r\n            );\r\n        }\r\n\r\n        if (this._wallMesh) {\r\n            const tmp = BABYLON.Vector3.TransformCoordinates(\r\n                this._wallMesh.position,\r\n                this._prevTransfo\r\n            );\r\n\r\n            const m = BABYLON.Matrix.RotationYawPitchRoll(\r\n                0,\r\n                (90 * Math.PI) / 180,\r\n                0\r\n            );\r\n            const t = BABYLON.Matrix.Translation(tmp.x, tmp.y, tmp.z);\r\n\r\n            m.multiplyToRef(t, m).multiplyToRef(transfo, m);\r\n            const qf =\r\n                this._wallMesh.rotationQuaternion ?? new BABYLON.Quaternion();\r\n\r\n            m.decompose(undefined, qf, this._wallMesh.position);\r\n\r\n            this._wallMesh.rotationQuaternion = qf;\r\n        }\r\n\r\n        if (this._boxMesh && this._boxMeshFront) {\r\n            this._boxMesh.rotationQuaternion =\r\n                this._boxMeshFront.rotationQuaternion = quat;\r\n            this._boxMesh.position.x = (this._boxMin.x + this._boxMax.x) / 2;\r\n            this._boxMesh.position.y = (this._boxMin.y + this._boxMax.y) / 2;\r\n            this._boxMesh.position.z = (this._boxMin.z + this._boxMax.z) / 2;\r\n            this._boxMesh.position = BABYLON.Vector3.TransformCoordinates(\r\n                this._boxMesh.position,\r\n                transfo\r\n            );\r\n            this._boxMeshFront.position = this._boxMesh.position;\r\n        }\r\n\r\n        this._prevTransfo.copyFrom(transfo);\r\n    }\r\n}\r\n","export default __webpack_public_path__ + \"370c162a33a228937af8f45b74b949f4.glb\";","import * as BABYLON from \"@babylonjs/core\";\r\n\r\nimport { FluidSimulationDemoBase } from \"./fluidSimulationDemoBase\";\r\n\r\n// Table from YouniqueĪdeaStudio (https://sketchfab.com/3d-models/simple-round-table-obj-6083c7dd80034ed5a6425a5fe7bcdf9a)\r\nimport tableScene from \"../assets/scenes/simple_round_table.glb\";\r\n\r\nexport class FluidSimulationDemoGlass extends FluidSimulationDemoBase {\r\n    private _boxMesh: BABYLON.Nullable<BABYLON.Mesh>;\r\n    private _boxMaterial: BABYLON.Nullable<BABYLON.PBRMaterial>;\r\n    private _cylMesh: BABYLON.Nullable<BABYLON.Mesh>;\r\n    private _cylMeshOfst: BABYLON.Vector3;\r\n    private _footMesh: BABYLON.Nullable<BABYLON.Mesh>;\r\n    private _footMeshOfst: BABYLON.Vector3;\r\n    private _sceneRenderObserver: BABYLON.Nullable<\r\n        BABYLON.Observer<BABYLON.Scene>\r\n    >;\r\n\r\n    constructor(scene: BABYLON.Scene) {\r\n        super(scene);\r\n\r\n        this._environmentFile = \"Country\";\r\n        this._sceneRenderObserver = null;\r\n        this._boxMesh = null;\r\n        this._boxMaterial = null;\r\n        this._cylMesh = null;\r\n        this._footMesh = null;\r\n\r\n        this.addCollisionVerticalCylinder(\r\n            new BABYLON.Vector3(0.0, -(1.9 + 0.04 - 0.2 + 0.15), 0.0),\r\n            new BABYLON.Vector3(0, 0, 0),\r\n            2.2,\r\n            0.12,\r\n            16,\r\n            null,\r\n            0.3,\r\n            true\r\n        );\r\n\r\n        this.addCollisionPlane(new BABYLON.Vector3(0, 1, 0), 6, 0.3);\r\n\r\n        this.addCollisionCutHollowSphere(\r\n            new BABYLON.Vector3(0.0, 0.2, 0.0),\r\n            new BABYLON.Vector3(0, 0, 0),\r\n            0.5,\r\n            0.2,\r\n            0.02,\r\n            16,\r\n            new BABYLON.Vector3(0, 1, 0)\r\n        );\r\n\r\n        this._footMeshOfst = new BABYLON.Vector3(0, -1.9, 0);\r\n        this.addCollisionVerticalCylinder(\r\n            new BABYLON.Vector3(0.0, -1.7 - 0.04 / 2, 0.0),\r\n            new BABYLON.Vector3(0, 0, 0),\r\n            0.4,\r\n            0.04,\r\n            16,\r\n            null,\r\n            0.6\r\n        );\r\n\r\n        this._cylMeshOfst = new BABYLON.Vector3(0, -1.2, 0);\r\n        this.addCollisionVerticalCylinder(\r\n            new BABYLON.Vector3(0.0, -1.0, 0.0),\r\n            new BABYLON.Vector3(0, 0, 0),\r\n            0.05,\r\n            1.4,\r\n            16,\r\n            null,\r\n            0.6\r\n        );\r\n    }\r\n\r\n    public async _run() {\r\n        // Get collision meshes\r\n        this._boxMesh = this._collisionObjects[2][0];\r\n        this._footMesh = this._collisionObjects[3][0];\r\n        this._cylMesh = this._collisionObjects[4][0];\r\n\r\n        // Reset camera\r\n        const camera =\r\n            this._scene.activeCameras?.[0] ?? this._scene.activeCamera;\r\n\r\n        if (camera) {\r\n            (camera as BABYLON.ArcRotateCamera).alpha = 3.09;\r\n            (camera as BABYLON.ArcRotateCamera).beta = 1.41;\r\n            (camera as BABYLON.ArcRotateCamera).radius = 6.42;\r\n        }\r\n\r\n        // Simulation parameters\r\n        this._fluidRenderObject.object.particleSize = 0.08;\r\n        this._fluidRenderObject.targetRenderer.fluidColor = new BABYLON.Color3(\r\n            251 / 255,\r\n            218 / 255,\r\n            218 / 255\r\n        );\r\n\r\n        this._fluidSim!.smoothingRadius = 0.04;\r\n        this._fluidSim!.densityReference = 20000;\r\n        this._fluidSim!.pressureConstant = 4;\r\n        this._fluidSim!.viscosity = 0.01;\r\n        this._fluidSim!.maxVelocity = 10;\r\n        this._fluidSim!.maxAcceleration = 2000;\r\n\r\n        this._shapeCollisionRestitution = 0.95;\r\n\r\n        this._particleGenerator!.position.x = 0.15;\r\n        this._particleGenerator!.position.y = 0.8;\r\n        this._particleGenerator!.position.z = -0.1;\r\n\r\n        // Create materials\r\n        this._boxMaterial = new BABYLON.PBRMaterial(\"BoxMeshMat\", this._scene);\r\n        this._boxMaterial.metallic = 0.3;\r\n        this._boxMaterial.roughness = 0;\r\n        this._boxMaterial.alpha = 0.2;\r\n        this._boxMaterial.backFaceCulling = false;\r\n\r\n        this._boxMesh!.material = this._boxMaterial;\r\n        this._cylMesh!.material = this._boxMaterial.clone(\"cloned\");\r\n        this._cylMesh!.material.alpha = 1;\r\n        this._footMesh!.material = this._cylMesh!.material;\r\n\r\n        this._sceneRenderObserver = this._scene.onBeforeRenderObservable.add(\r\n            () => {\r\n                this._cylMesh!.position.copyFrom(this._boxMesh!.position);\r\n                this._cylMesh!.position.addInPlace(this._cylMeshOfst);\r\n                this._footMesh!.position.copyFrom(this._boxMesh!.position);\r\n                this._footMesh!.position.addInPlace(this._footMeshOfst);\r\n            }\r\n        );\r\n\r\n        super._run();\r\n\r\n        await BABYLON.SceneLoader.AppendAsync(\"\", tableScene, this._scene);\r\n\r\n        const table = this._scene.getMeshByName(\"Object_3\")!;\r\n\r\n        table.scaling.setAll(6);\r\n        table.position.set(-2.3, -2, -5.54);\r\n    }\r\n\r\n    public dispose(): void {\r\n        super.dispose();\r\n\r\n        this._scene.onBeforeRenderObservable.remove(this._sceneRenderObserver);\r\n\r\n        this._scene.getMeshByName(\"__root__\")?.dispose(false, true);\r\n\r\n        this._boxMesh?.dispose();\r\n        this._boxMaterial?.dispose();\r\n        this._cylMesh?.material?.dispose();\r\n        this._cylMesh?.dispose();\r\n        this._footMesh?.dispose();\r\n    }\r\n\r\n    protected _makeGUIMainMenu(): void {\r\n        const params = {\r\n            restart: () => {\r\n                this._generateParticles();\r\n            },\r\n            boxOpacity: this._boxMaterial!.alpha,\r\n        };\r\n\r\n        const mainMenu = this._gui!;\r\n\r\n        mainMenu.add(params, \"restart\").name(\"Restart\");\r\n\r\n        mainMenu\r\n            .add(params, \"boxOpacity\", 0, 1, 0.01)\r\n            .name(\"Glass opacity\")\r\n            .onChange((value: any) => {\r\n                this._boxMaterial!.alpha = value;\r\n            });\r\n    }\r\n}\r\n","import * as BABYLON from \"@babylonjs/core\";\r\n\r\nimport { FluidSimulationDemoBase } from \"./fluidSimulationDemoBase\";\r\nimport { ParticleGenerator } from \"./Utils/particleGenerator\";\r\nimport { ICollisionShape } from \"./Utils/sdfHelper\";\r\n\r\nexport class FluidSimulationDemoHeightMap extends FluidSimulationDemoBase {\r\n    private _particleGeneratorName: string;\r\n    private _sphere: BABYLON.Nullable<BABYLON.Mesh>;\r\n    private _box: BABYLON.Nullable<BABYLON.Mesh>;\r\n    private _heightMap: [\r\n        BABYLON.Nullable<BABYLON.Mesh>,\r\n        BABYLON.Nullable<ICollisionShape>\r\n    ];\r\n    private _ground: BABYLON.Mesh;\r\n    private _groundCollision: ICollisionShape;\r\n    private _time: number;\r\n    private _showHeightmap: boolean;\r\n\r\n    constructor(scene: BABYLON.Scene) {\r\n        super(scene, false);\r\n\r\n        this._numParticles = 10000;\r\n        this._particleGeneratorName = \"Water jet\";\r\n        this._time = 0;\r\n        this._showHeightmap = true;\r\n        this._sphere = null;\r\n        this._box = null;\r\n        this._heightMap = [null, null];\r\n        this._groundCollision = null as any;\r\n\r\n        const terrainSize = 2.85;\r\n\r\n        this.addCollisionSphere(new BABYLON.Vector3(0, 0.2, 0), 0.2, null);\r\n        this.addCollisionBox(\r\n            new BABYLON.Vector3(-0.7, 0.249, -0.7),\r\n            new BABYLON.Vector3(0, 0, (90 * Math.PI) / 180),\r\n            new BABYLON.Vector3(0.2, 0.05, 0.5)\r\n        );\r\n\r\n        this.addCollisionTerrain(terrainSize);\r\n\r\n        this.addCollisionPlane(new BABYLON.Vector3(0, 0, -1), terrainSize / 2);\r\n        this.addCollisionPlane(new BABYLON.Vector3(0, 0, 1), terrainSize / 2);\r\n        this.addCollisionPlane(new BABYLON.Vector3(1, 0, 0), terrainSize / 2);\r\n        this.addCollisionPlane(new BABYLON.Vector3(-1, 0, 0), terrainSize / 2);\r\n        this.addCollisionPlane(new BABYLON.Vector3(0, 1, 0), 0);\r\n\r\n        this._ground = BABYLON.MeshBuilder.CreateGround(\r\n            \"ground\",\r\n            { width: terrainSize, height: terrainSize },\r\n            this._scene\r\n        );\r\n        this._ground.setEnabled(false);\r\n    }\r\n\r\n    public async _run() {\r\n        // Get collision meshes\r\n        this._sphere = this._collisionObjects[0][0];\r\n        this._box = this._collisionObjects[1][0];\r\n        this._heightMap = this._collisionObjects[2];\r\n        this._groundCollision = this._collisionObjects[7][1];\r\n\r\n        this._groundCollision.disabled = true;\r\n        this._ground.material = this._heightMap[0]!.material;\r\n\r\n        const camera =\r\n            this._scene.activeCameras?.[0] ?? this._scene.activeCamera;\r\n\r\n        if (camera) {\r\n            (camera as BABYLON.ArcRotateCamera).alpha = 4.65;\r\n            (camera as BABYLON.ArcRotateCamera).beta = 1.12;\r\n            (camera as BABYLON.ArcRotateCamera).radius = 3.9;\r\n        }\r\n\r\n        this._fluidRenderObject.targetRenderer.blurThicknessFilterSize = 12;\r\n        this._fluidRenderObject.targetRenderer.blurThicknessNumIterations = 3;\r\n        this._fluidRenderObject.targetRenderer.specularPower = 50;\r\n        this._fluidRenderObject.targetRenderer.refractionStrength = 0.02;\r\n        this._fluidRenderObject.targetRenderer.density = 5;\r\n\r\n        this._createParticleGenerator();\r\n\r\n        super._run();\r\n    }\r\n\r\n    private _createParticleGenerator(): void {\r\n        this._particleGenerator?.dispose();\r\n\r\n        let particleSize = \"\";\r\n\r\n        switch (this._particleGeneratorName) {\r\n            case \"Water jet\":\r\n                this._fluidRenderObject.object.particleSize = 0.08;\r\n\r\n                this._fluidSim!.smoothingRadius = 0.04;\r\n                this._fluidSim!.densityReference = 20000;\r\n                this._fluidSim!.pressureConstant = 3;\r\n                this._fluidSim!.viscosity = 0.01;\r\n                this._fluidSim!.maxVelocity = 3;\r\n                this._fluidSim!.maxAcceleration = 2000;\r\n                break;\r\n            case \"Dragon 0.04\":\r\n            case \"Dude 0.04\":\r\n            case \"Sphere 0.04\":\r\n                this._fluidRenderObject.object.particleSize = 0.08;\r\n\r\n                this._fluidSim!.smoothingRadius = 0.08;\r\n                this._fluidSim!.densityReference = 6000;\r\n                this._fluidSim!.pressureConstant = 10;\r\n                this._fluidSim!.viscosity = 0.01;\r\n                this._fluidSim!.maxVelocity = 4;\r\n                this._fluidSim!.maxAcceleration = 2000;\r\n\r\n                particleSize = \"04\";\r\n                break;\r\n            case \"Dragon 0.03\":\r\n            case \"Dude 0.03\":\r\n            case \"Sphere 0.03\":\r\n                this._fluidRenderObject.object.particleSize = 0.06;\r\n\r\n                this._fluidSim!.smoothingRadius = 0.06;\r\n                this._fluidSim!.densityReference = 17000;\r\n                this._fluidSim!.pressureConstant = 15;\r\n                this._fluidSim!.viscosity = 0.01;\r\n                this._fluidSim!.maxVelocity = 4;\r\n                this._fluidSim!.maxAcceleration = 2000;\r\n\r\n                particleSize = \"03\";\r\n                break;\r\n        }\r\n\r\n        this._fluidRendererGUI?.syncGUI();\r\n        this._syncFluidSimGUI();\r\n\r\n        this._particleGenerator = new ParticleGenerator(\r\n            this._scene,\r\n            particleSize === \"\"\r\n                ? undefined\r\n                : this._particleGeneratorName\r\n                      .substring(0, this._particleGeneratorName.indexOf(\" \"))\r\n                      .toLocaleLowerCase() +\r\n                  \"_\" +\r\n                  particleSize\r\n        );\r\n\r\n        this._particleGenerator!.position.y = 2;\r\n        this._particleGenerator!.position.z = 0.3;\r\n        this._particleGenerator.particleRadius =\r\n            this._fluidSim!.smoothingRadius / 2;\r\n    }\r\n\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this._ground.dispose();\r\n    }\r\n\r\n    protected _makeGUIMainMenu(): void {\r\n        const params = {\r\n            restart: () => {\r\n                this._generateParticles();\r\n            },\r\n            particleGeneratorName: this._particleGeneratorName,\r\n            showHeightmap: this._showHeightmap,\r\n        };\r\n\r\n        const mainMenu = this._gui!;\r\n\r\n        mainMenu.add(params, \"restart\").name(\"Restart\");\r\n\r\n        mainMenu\r\n            .add(params, \"particleGeneratorName\", [\r\n                \"Water jet\",\r\n                \"Dragon 0.04\",\r\n                \"Dude 0.04\",\r\n                \"Sphere 0.04\",\r\n                \"Dragon 0.03\",\r\n                \"Dude 0.03\",\r\n                \"Sphere 0.03\",\r\n            ])\r\n            .name(\"Particle generator\")\r\n            .onChange(async (value: any) => {\r\n                this._particleGeneratorName = value;\r\n                this._createParticleGenerator();\r\n                await this._generateParticles();\r\n                if (value !== \"Water jet\") {\r\n                    this._numParticles =\r\n                        this._particleGenerator!.currNumParticles;\r\n                }\r\n                this._syncFluidSimGUI();\r\n            });\r\n\r\n        mainMenu\r\n            .add(params, \"showHeightmap\")\r\n            .name(\"Show height map\")\r\n            .onChange((value: boolean) => {\r\n                this._showHeightmap = value;\r\n                this._ground.setEnabled(!value);\r\n                this._groundCollision.disabled = value;\r\n                this._heightMap[0]!.setEnabled(value);\r\n                this._heightMap[1]!.disabled = !value;\r\n            });\r\n    }\r\n\r\n    protected _checkCollisions(particleRadius: number): void {\r\n        this._sphere!.position.x = Math.cos((2 * this._time) / 3.3) * 1.1;\r\n        this._sphere!.position.z = Math.sin((5 * this._time) / 3.3) * 1.1;\r\n\r\n        this._box!.rotation.y = this._time * 2;\r\n\r\n        this._time += 0.02;\r\n\r\n        super._checkCollisions(particleRadius);\r\n    }\r\n}\r\n","import * as BABYLON from \"@babylonjs/core\";\r\n//import * as BABYLONSER from \"@babylonjs/serializers\";\r\n\r\nimport { FluidSimulationDemoBase } from \"./fluidSimulationDemoBase\";\r\n\r\n// High heels model by cebraVFX found on Sketchfab (https://sketchfab.com/3d-models/high-heels-1561c09fc45349d680e48e3e007b64e0)\r\nexport class FluidSimulationDemoMeshSDF extends FluidSimulationDemoBase {\r\n    private _sceneRenderObserver: BABYLON.Nullable<\r\n        BABYLON.Observer<BABYLON.Scene>\r\n    >;\r\n    private _meshName: string;\r\n\r\n    constructor(scene: BABYLON.Scene) {\r\n        super(scene);\r\n\r\n        this._environmentFile = \"Parking\";\r\n        this._meshName = null as any;\r\n\r\n        this._sceneRenderObserver = null;\r\n        this._numParticles = 7500;\r\n\r\n        this.addCollisionPlane(new BABYLON.Vector3(0, 1, 0), 0.5, 0.3);\r\n\r\n        this._addMesh(\"High heels\");\r\n    }\r\n\r\n    protected async _addMesh(name: string, waitForReadiness = false) {\r\n        this._meshName = name;\r\n\r\n        switch (name) {\r\n            case \"High heels\":\r\n                this.addCollisionMesh(\r\n                    new BABYLON.Vector3(0.85, -0.5, 0),\r\n                    new BABYLON.Vector3(0, 0, 0),\r\n                    \"high_heels.obj\",\r\n                    \"high_heels.sdf\",\r\n                    false,\r\n                    0.03\r\n                );\r\n                break;\r\n            case \"Dragon\":\r\n                this.addCollisionMesh(\r\n                    new BABYLON.Vector3(-0.1, -0.5, -2.4),\r\n                    new BABYLON.Vector3(0, -1.0, 0),\r\n                    \"Dragon_50k.obj\",\r\n                    \"Dragon_50k.sdf\",\r\n                    true,\r\n                    3\r\n                );\r\n                break;\r\n        }\r\n\r\n        if (waitForReadiness) {\r\n            this._collisionObjects = await Promise.all(\r\n                this._collisionObjectPromises\r\n            );\r\n        }\r\n    }\r\n\r\n    public async _run() {\r\n        /*for (let i = 2; i <= 17; ++i) {\r\n            const m = this._scene.meshes[i] as BABYLON.Mesh;\r\n            m.bakeCurrentTransformIntoVertices();\r\n            m.parent = null;\r\n            m.scaling.setAll(10);\r\n            m.bakeCurrentTransformIntoVertices();\r\n        }\r\n\r\n        const mm = BABYLON.Mesh.MergeMeshes([\r\n            this._scene.meshes[2] as BABYLON.Mesh,\r\n            this._scene.meshes[3] as BABYLON.Mesh,\r\n            this._scene.meshes[4] as BABYLON.Mesh,\r\n            this._scene.meshes[5] as BABYLON.Mesh,\r\n            this._scene.meshes[6] as BABYLON.Mesh,\r\n            this._scene.meshes[7] as BABYLON.Mesh,\r\n            this._scene.meshes[8] as BABYLON.Mesh,\r\n            this._scene.meshes[9] as BABYLON.Mesh,\r\n            this._scene.meshes[10] as BABYLON.Mesh,\r\n            this._scene.meshes[11] as BABYLON.Mesh,\r\n            this._scene.meshes[12] as BABYLON.Mesh,\r\n            this._scene.meshes[13] as BABYLON.Mesh,\r\n            this._scene.meshes[14] as BABYLON.Mesh,\r\n            this._scene.meshes[15] as BABYLON.Mesh,\r\n            this._scene.meshes[16] as BABYLON.Mesh,\r\n            this._scene.meshes[17] as BABYLON.Mesh,\r\n        ], false, true, undefined, false, false);\r\n\r\n        console.log(BABYLONSER.OBJExport.OBJ([mm!]));\r\n\r\n        mm?.dispose();*/\r\n\r\n        // Reset camera\r\n        const camera =\r\n            this._scene.activeCameras?.[0] ?? this._scene.activeCamera;\r\n\r\n        if (camera) {\r\n            (camera as BABYLON.ArcRotateCamera).alpha = 2.62;\r\n            (camera as BABYLON.ArcRotateCamera).beta = 1.11;\r\n            (camera as BABYLON.ArcRotateCamera).radius = 8.4;\r\n        }\r\n\r\n        // Simulation parameters\r\n        this._fluidRenderObject.object.particleSize = 0.08;\r\n\r\n        this._fluidSim!.smoothingRadius = 0.04;\r\n        this._fluidSim!.densityReference = 20000;\r\n        this._fluidSim!.pressureConstant = 4;\r\n        this._fluidSim!.viscosity = 0.005;\r\n        this._fluidSim!.maxVelocity = 10;\r\n        this._fluidSim!.maxAcceleration = 2000;\r\n\r\n        this._shapeCollisionRestitution = 0.99;\r\n\r\n        this._particleGenerator!.position.x = 0.2;\r\n        this._particleGenerator!.position.y = 2.8;\r\n        this._particleGenerator!.position.z = -1.5;\r\n\r\n        super._run();\r\n    }\r\n\r\n    public dispose(): void {\r\n        super.dispose();\r\n\r\n        this._scene.onBeforeRenderObservable.remove(this._sceneRenderObserver);\r\n    }\r\n\r\n    protected _makeGUIMainMenu(): void {\r\n        const params = {\r\n            restart: () => {\r\n                this._generateParticles();\r\n            },\r\n            meshname: this._meshName,\r\n        };\r\n\r\n        const mainMenu = this._gui!;\r\n\r\n        mainMenu.add(params, \"restart\").name(\"Restart\");\r\n\r\n        mainMenu\r\n            .add(params, \"meshname\", [\"Dragon\", \"High heels\"])\r\n            .name(\"Name\")\r\n            .onChange((value: any) => {\r\n                this.disposeCollisionObject(this._collisionObjects.length - 1);\r\n                this._addMesh(value, true);\r\n            });\r\n    }\r\n}\r\n","import * as BABYLON from \"@babylonjs/core\";\r\n//import * as BABYLONSER from \"@babylonjs/serializers\";\r\n\r\nimport { FluidSimulationDemoBase } from \"./fluidSimulationDemoBase\";\r\nimport { FluidRenderingObjectVertexBuffer } from \"./FluidRenderer/fluidRenderingObjectVertexBuffer\";\r\n\r\nexport class FluidSimulationDemoParticleCustomShape extends FluidSimulationDemoBase {\r\n    private _initParticles: boolean;\r\n    private _started: boolean;\r\n    private _meshPCS: BABYLON.Nullable<BABYLON.Mesh>;\r\n    private _pcs: BABYLON.Nullable<BABYLON.PointsCloudSystem>;\r\n\r\n    constructor(scene: BABYLON.Scene) {\r\n        super(scene, true);\r\n\r\n        this._initParticles = true;\r\n        this._started = false;\r\n        this._meshPCS = null;\r\n        this._pcs = null;\r\n    }\r\n\r\n    protected async _run() {\r\n        const camera =\r\n            this._scene.activeCameras?.[0] ?? this._scene.activeCamera;\r\n\r\n        if (camera) {\r\n            (camera as BABYLON.ArcRotateCamera).alpha = 1.593 - Math.PI / 8;\r\n            (camera as BABYLON.ArcRotateCamera).beta = 1.3;\r\n            (camera as BABYLON.ArcRotateCamera).radius = 9.633;\r\n            (camera as BABYLON.ArcRotateCamera).computeWorldMatrix();\r\n            (camera as BABYLON.ArcRotateCamera).setTarget(\r\n                new BABYLON.Vector3(0, 3, 0)\r\n            );\r\n            (camera as BABYLON.ArcRotateCamera).beta = 1.3;\r\n            (camera as BABYLON.ArcRotateCamera).computeWorldMatrix();\r\n        }\r\n\r\n        await BABYLON.SceneLoader.AppendAsync(\r\n            \"https://assets.babylonjs.com/meshes/Dude/\",\r\n            \"dude.babylon\",\r\n            this._scene\r\n        );\r\n\r\n        this._scene.getCameraByName(\"Default camera\")?.dispose();\r\n\r\n        if (this._scene.activeCameras && this._scene.activeCameras.length > 0) {\r\n            this._scene.activeCameras[0] = camera!;\r\n        } else {\r\n            this._scene.activeCamera = camera;\r\n        }\r\n\r\n        this._pcs = new BABYLON.PointsCloudSystem(\"pcs\", 3, this._scene);\r\n\r\n        this._scene\r\n            .getMeshByName(\"him\")!\r\n            .getChildMeshes()\r\n            .forEach((m) => {\r\n                m.setEnabled(false);\r\n                m.scaling.setAll(0.1);\r\n                m.rotation.y = Math.PI / 8;\r\n                //m.rotation.y = Math.PI;\r\n                //(m as BABYLON.Mesh).bakeCurrentTransformIntoVertices();\r\n                (m.material as any).disableLighting = true;\r\n                (m.material as any).emissiveTexture = (\r\n                    m.material as any\r\n                ).diffuseTexture;\r\n                this._pcs!.addSurfacePoints(\r\n                    m as BABYLON.Mesh,\r\n                    5000,\r\n                    BABYLON.PointColor.Color,\r\n                    0\r\n                );\r\n            });\r\n\r\n        /*this._scene.useRightHandedSystem = true;\r\n        console.log(BABYLONSER.OBJExport.OBJ(this._scene.getMeshByName(\"him\")!.getChildMeshes()));\r\n        this._scene.useRightHandedSystem = false;*/\r\n\r\n        this._meshPCS = await this._pcs.buildMeshAsync();\r\n\r\n        this._meshPCS.setEnabled(false);\r\n\r\n        const positions: Float32Array = this._pcs.positions;\r\n        const origPositions = positions.slice(0);\r\n        const numParticles = positions.length / 3;\r\n\r\n        this._fluidRenderObject.object.vertexBuffers[\"position\"] =\r\n            new BABYLON.VertexBuffer(\r\n                this._engine,\r\n                positions,\r\n                BABYLON.VertexBuffer.PositionKind,\r\n                true,\r\n                false,\r\n                3,\r\n                true\r\n            );\r\n        this._fluidRenderObject.object.vertexBuffers[\"color\"] =\r\n            new BABYLON.VertexBuffer(\r\n                this._engine,\r\n                this._pcs.colors,\r\n                \"color\",\r\n                false,\r\n                false,\r\n                4,\r\n                true\r\n            );\r\n\r\n        (\r\n            this._fluidRenderObject.object as FluidRenderingObjectVertexBuffer\r\n        ).setNumParticles(numParticles);\r\n\r\n        this._fluidRenderObject.object.particleSize = 0.15;\r\n        this._fluidRenderObject.object.particleThicknessAlpha = 0.1;\r\n        this._fluidRenderObject.targetRenderer.minimumThickness = 0;\r\n        this._fluidRenderObject.targetRenderer.blurDepthFilterSize = 15;\r\n        this._fluidRenderObject.targetRenderer.blurDepthNumIterations = 8;\r\n        this._fluidRenderObject.targetRenderer.blurDepthDepthScale = 50;\r\n        this._fluidRenderObject.targetRenderer.thicknessMapSize = 1024;\r\n        this._fluidRenderObject.targetRenderer.density = 0.63;\r\n        this._fluidRenderObject.targetRenderer.generateDiffuseTexture = true;\r\n        this._fluidRenderObject.targetRenderer.fresnelClamp = 0.1;\r\n\r\n        const velocity: number[] = [];\r\n        const accel: number[] = [];\r\n        const stopped: number[] = [];\r\n\r\n        const initParticles = () => {\r\n            const min = new BABYLON.Vector3(1e10, 1e10, 1e10),\r\n                max = new BABYLON.Vector3(-1e10, -1e10, -1e10);\r\n            for (let i = 0; i < numParticles; ++i) {\r\n                min.x = Math.min(positions[i * 3 + 0], min.x);\r\n                min.y = Math.min(positions[i * 3 + 1], min.y);\r\n                min.z = Math.min(positions[i * 3 + 2], min.z);\r\n                max.x = Math.max(positions[i * 3 + 0], max.x);\r\n                max.y = Math.max(positions[i * 3 + 1], max.y);\r\n                max.z = Math.max(positions[i * 3 + 2], max.z);\r\n            }\r\n\r\n            velocity.length = 0;\r\n            accel.length = 0;\r\n            stopped.length = 0;\r\n\r\n            for (let i = 0; i < numParticles; ++i) {\r\n                const f = Math.random() * 0.005;\r\n                const g = Math.random() * 0.001;\r\n                const h = Math.random() * 0.005;\r\n\r\n                accel.push((-0.5 + Math.random()) * Math.random() * f);\r\n                accel.push(Math.random() * (Math.random() + 1.0) * g);\r\n                accel.push((-0.5 + Math.random()) * Math.random() * h);\r\n\r\n                velocity.push(0, 0, 0);\r\n\r\n                stopped.push(0);\r\n            }\r\n\r\n            this._initParticles = false;\r\n        };\r\n\r\n        const dt = 1 / 60 / 1000;\r\n        this._sceneObserver = this._scene.onBeforeRenderObservable.add(() => {\r\n            if (!this._started) {\r\n                return;\r\n            }\r\n\r\n            if (this._initParticles) {\r\n                positions.set(origPositions);\r\n                initParticles();\r\n                this._fluidRenderObject.object.vertexBuffers[\r\n                    \"position\"\r\n                ].updateDirectly(positions, 0);\r\n            }\r\n\r\n            if (this._paused) {\r\n                return;\r\n            }\r\n\r\n            let numStopped = 0;\r\n            for (let i = 0; i < numParticles; ++i) {\r\n                if (stopped[i]) {\r\n                    numStopped++;\r\n                    continue;\r\n                }\r\n                accel[i * 3 + 1] += -9.81 * dt;\r\n                velocity[i * 3 + 0] += accel[i * 3 + 0];\r\n                velocity[i * 3 + 1] += accel[i * 3 + 1];\r\n                velocity[i * 3 + 2] += accel[i * 3 + 2];\r\n                positions[i * 3 + 0] += velocity[i * 3 + 0];\r\n                positions[i * 3 + 1] += velocity[i * 3 + 1];\r\n                positions[i * 3 + 2] += velocity[i * 3 + 2];\r\n                if (positions[i * 3 + 1] <= -2) {\r\n                    //velocity[i * 3 + 0] *= Math.random() / 10 + 0.8;\r\n                    velocity[i * 3 + 1] *= -(Math.random() / 10 + 0.4);\r\n                    //velocity[i * 3 + 2] *= Math.random() / 10 + 0.8;\r\n                    if (positions[i * 3 + 1] + velocity[i * 3 + 1] < -2) {\r\n                        stopped[i] = 1;\r\n                    }\r\n                    positions[i * 3 + 1] = -2;\r\n                }\r\n            }\r\n\r\n            this._started == numStopped < numParticles;\r\n\r\n            this._fluidRenderObject.object.vertexBuffers[\r\n                \"position\"\r\n            ].updateDirectly(positions, 0);\r\n        });\r\n\r\n        super._run();\r\n    }\r\n\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this._scene.getMeshByName(\"him\")!.dispose(false, true);\r\n        /*this._scene.getMeshByName(\"him\")!.getChildMeshes().forEach((m) => {\r\n            m.dispose();\r\n        });*/\r\n\r\n        this._pcs?.dispose();\r\n    }\r\n\r\n    protected _makeGUIMainMenu(): void {\r\n        const params = {\r\n            paused: this._paused,\r\n            start: () => {\r\n                this._initParticles = true;\r\n                this._started = true;\r\n            },\r\n        };\r\n\r\n        const mainMenu = this._gui!;\r\n\r\n        mainMenu.add(params, \"start\").name(\"Start\");\r\n\r\n        mainMenu\r\n            .add(params, \"paused\")\r\n            .name(\"Pause\")\r\n            .onChange((value: boolean) => {\r\n                this._paused = value;\r\n            });\r\n    }\r\n}\r\n","export default __webpack_public_path__ + \"7c78419fe3f98a530df81b3e7a40909f.png\";","import * as BABYLON from \"@babylonjs/core\";\r\n\r\nimport { FluidSimulationDemoBase } from \"./fluidSimulationDemoBase\";\r\nimport { FluidRenderingObjectParticleSystem } from \"./FluidRenderer/fluidRenderingObjectParticleSystem\";\r\n\r\nimport flareImg from \"../assets/pictures/flare32bits.png\";\r\n\r\nexport class FluidSimulationDemoParticleSystem extends FluidSimulationDemoBase {\r\n    private _particleSystem: BABYLON.Nullable<BABYLON.ParticleSystem>;\r\n\r\n    constructor(scene: BABYLON.Scene) {\r\n        super(scene, true);\r\n\r\n        this._particleSystem = null;\r\n    }\r\n\r\n    protected async _run() {\r\n        const camera =\r\n            this._scene.activeCameras?.[0] ?? this._scene.activeCamera;\r\n\r\n        if (camera) {\r\n            (camera as BABYLON.ArcRotateCamera).alpha = 0;\r\n            (camera as BABYLON.ArcRotateCamera).beta = Math.PI / 2.4;\r\n            (camera as BABYLON.ArcRotateCamera).radius = 30;\r\n        }\r\n\r\n        const numParticles = 20000 * 2;\r\n        const numParticlesEmitRate = 1500 * 2;\r\n\r\n        // Create a particle system\r\n        this._particleSystem = new BABYLON.ParticleSystem(\r\n            \"particles\",\r\n            numParticles,\r\n            this._scene\r\n        );\r\n\r\n        //Texture of each particle\r\n        this._particleSystem.particleTexture = new BABYLON.Texture(\r\n            flareImg,\r\n            this._scene\r\n        );\r\n        this._particleSystem.blendMode = BABYLON.ParticleSystem.BLENDMODE_ADD;\r\n\r\n        // Where the particles come from\r\n        this._particleSystem.createConeEmitter(4, Math.PI / 2);\r\n\r\n        // Colors of all particles\r\n        this._particleSystem.color1 = new BABYLON.Color4(0.4, 1.5, 0.3, 1.0);\r\n        this._particleSystem.color2 = new BABYLON.Color4(0.4, 1.5, 0.3, 1.0);\r\n        this._particleSystem.colorDead = new BABYLON.Color4(0, 0, 0.2, 0.0);\r\n        this._particleSystem.colorDead = new BABYLON.Color4(0.4, 1.0, 0.3, 1.0);\r\n\r\n        // Size of each particle (random between...\r\n        this._particleSystem.minSize = 0.5 * 1.5;\r\n        this._particleSystem.maxSize = 0.5 * 1.5;\r\n\r\n        // Life time of each particle (random between...\r\n        this._particleSystem.minLifeTime = 2.0;\r\n        this._particleSystem.maxLifeTime = 2.5;\r\n\r\n        // Emission rate\r\n        this._particleSystem.emitRate = numParticlesEmitRate;\r\n\r\n        // Set the gravity of all particles\r\n        this._particleSystem.gravity = new BABYLON.Vector3(0, -10.81, 0);\r\n\r\n        // Speed\r\n        this._particleSystem.minEmitPower = 2.5;\r\n        this._particleSystem.maxEmitPower = 6.5;\r\n        this._particleSystem.updateSpeed = 0.02;\r\n\r\n        // Start the particle system\r\n        this._particleSystem.preWarmCycles = 60 * 8;\r\n\r\n        this._particleSystem.start();\r\n\r\n        this._particleSystem.renderAsFluid = true;\r\n\r\n        this._fluidRenderer.removeRenderObject(this._fluidRenderObject, true);\r\n\r\n        this._fluidRenderObject =\r\n            this._fluidRenderer!.getRenderObjectFromParticleSystem(\r\n                this._particleSystem\r\n            )!;\r\n\r\n        this._fluidRenderObject.object.particleSize = 0.75;\r\n        this._fluidRenderObject.object.particleThicknessAlpha = 0.02;\r\n        (\r\n            this._fluidRenderObject.object as FluidRenderingObjectParticleSystem\r\n        ).useTrueRenderingForDiffuseTexture = true;\r\n        this._fluidRenderObject.targetRenderer.minimumThickness =\r\n            this._fluidRenderObject.object.particleThicknessAlpha;\r\n        this._fluidRenderObject.targetRenderer.blurDepthFilterSize = 10;\r\n        this._fluidRenderObject.targetRenderer.blurDepthDepthScale = 10;\r\n        this._fluidRenderObject.targetRenderer.thicknessMapSize = 1024;\r\n        this._fluidRenderObject.targetRenderer.density = 8;\r\n        this._fluidRenderObject.targetRenderer.fresnelClamp = 0.04;\r\n        this._fluidRenderObject.targetRenderer.fluidColor = new BABYLON.Color3(\r\n            219 / 255,\r\n            228 / 255,\r\n            1\r\n        );\r\n        this._fluidRenderObject.targetRenderer.generateDiffuseTexture = false;\r\n\r\n        super._run();\r\n    }\r\n\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this._particleSystem?.dispose();\r\n    }\r\n\r\n    protected _makeGUIMainMenu(): void {\r\n        const params = {\r\n            paused: false,\r\n        };\r\n\r\n        const mainMenu = this._gui!;\r\n\r\n        mainMenu\r\n            .add(params, \"paused\")\r\n            .name(\"Pause\")\r\n            .onChange((value: boolean) => {\r\n                this._particleSystem!.updateSpeed = value ? 0 : 0.02;\r\n            });\r\n    }\r\n}\r\n","import * as BABYLON from \"@babylonjs/core\";\r\nimport { FluidRenderingObjectVertexBuffer } from \"./FluidRenderer/fluidRenderingObjectVertexBuffer\";\r\n\r\nimport { FluidSimulationDemoBase } from \"./fluidSimulationDemoBase\";\r\n\r\n// Pre-computed frames come from https://github.com/ttnghia/RealTimeFluidRendering/releases/tag/Datasets\r\nexport class FluidSimulationDemoPrecomputeRendering extends FluidSimulationDemoBase {\r\n    private _animSpeed: number;\r\n\r\n    constructor(scene: BABYLON.Scene) {\r\n        super(scene, true);\r\n\r\n        this._animSpeed = 0.5;\r\n    }\r\n\r\n    protected async _run() {\r\n        const camera =\r\n            this._scene.activeCameras?.[0] ?? this._scene.activeCamera;\r\n\r\n        if (camera) {\r\n            (camera as BABYLON.ArcRotateCamera).alpha = -0.631;\r\n            (camera as BABYLON.ArcRotateCamera).beta = 1.318;\r\n            (camera as BABYLON.ArcRotateCamera).radius = 1.866;\r\n        }\r\n\r\n        const numFrames = 160;\r\n        const positionBuffers: Array<Float32Array> = [];\r\n\r\n        let numParticles = 0;\r\n        //let particleRadius = 0;\r\n\r\n        for (let i = 0; i < numFrames; ++i) {\r\n            const num = \"000\" + (i + 1);\r\n            const buffer = await (\r\n                await fetch(\r\n                    \"/assets/particles/SphereDropGround/frame.\" +\r\n                        num.substring(num.length - 4) +\r\n                        \".pos\"\r\n                )\r\n            ).arrayBuffer();\r\n            const buffer32 = new Uint32Array(buffer);\r\n            const bufferFloat = new Float32Array(buffer);\r\n\r\n            numParticles = buffer32[0];\r\n            //particleRadius = bufferFloat[1];\r\n\r\n            const positions = new Float32Array(numParticles * 3);\r\n\r\n            for (let i = 0; i < numParticles; ++i) {\r\n                const x = bufferFloat[2 + i * 3 + 0];\r\n                const y = bufferFloat[2 + i * 3 + 1];\r\n                const z = bufferFloat[2 + i * 3 + 2];\r\n\r\n                positions[i * 3 + 0] = x;\r\n                positions[i * 3 + 1] = y;\r\n                positions[i * 3 + 2] = -z;\r\n            }\r\n\r\n            positionBuffers.push(positions);\r\n        }\r\n\r\n        this._fluidRenderObject.object.vertexBuffers[\"position\"] =\r\n            new BABYLON.VertexBuffer(\r\n                this._engine,\r\n                positionBuffers[0],\r\n                BABYLON.VertexBuffer.PositionKind,\r\n                true,\r\n                false,\r\n                3,\r\n                true\r\n            );\r\n\r\n        (\r\n            this._fluidRenderObject.object as FluidRenderingObjectVertexBuffer\r\n        ).setNumParticles(numParticles);\r\n\r\n        this._fluidRenderObject.object.particleSize = 0.03;\r\n        this._fluidRenderObject.object.particleThicknessAlpha = 0.007;\r\n        this._fluidRenderObject.targetRenderer.minimumThickness = 0;\r\n        this._fluidRenderObject.targetRenderer.blurDepthFilterSize = 10;\r\n        this._fluidRenderObject.targetRenderer.blurDepthDepthScale = 10;\r\n        this._fluidRenderObject.targetRenderer.thicknessMapSize = 256;\r\n        this._fluidRenderObject.targetRenderer.refractionStrength = 0.1;\r\n        this._fluidRenderObject.targetRenderer.blurThicknessFilterSize = 5;\r\n        this._fluidRenderObject.targetRenderer.blurThicknessNumIterations = 1;\r\n        this._fluidRenderObject.targetRenderer.density = 3;\r\n        this._fluidRenderObject.targetRenderer.specularPower = 250;\r\n\r\n        let t = 0;\r\n\r\n        this._sceneObserver = this._scene.onBeforeRenderObservable.add(() => {\r\n            this._fluidRenderObject.object.vertexBuffers[\r\n                \"position\"\r\n            ].updateDirectly(positionBuffers[Math.floor(t)], 0);\r\n            t += this._animSpeed;\r\n            if (t >= numFrames) {\r\n                t = 0;\r\n            }\r\n        });\r\n\r\n        super._run();\r\n    }\r\n\r\n    protected _makeGUIMainMenu(): void {\r\n        const params = {\r\n            animSpeed: this._animSpeed,\r\n        };\r\n\r\n        const mainMenu = this._gui!;\r\n\r\n        mainMenu\r\n            .add(params, \"animSpeed\", 0, 1, 0.1)\r\n            .name(\"Animation speed\")\r\n            .onChange((value: any) => {\r\n                this._animSpeed = value;\r\n            });\r\n    }\r\n}\r\n"],"names":["NAME_FLUIDRENDERER","Object","defineProperty","get","this","_fluidRenderer","set","value","enumerable","configurable","FluidRenderer","dispose","FluidRendererSceneComponent","constructor","scene","name","register","_gatherActiveCameraRenderTargetsStage","registerStep","_gatherActiveCameraRenderTargets","_afterCameraDrawStage","_afterCameraDraw","fluidRenderer","_prepareRendering","camera","_render","rebuild","disableFluidRenderer","enableFluidRenderer","component","_getComponent","_addComponent","FluidRendering","_scene","async","engine","canvas","window","BABYLON","fov","Math","PI","attachControl","minZ","maxZ","wheelPrecision","inputs","removeByType","createCamera","activeCamera","FluidSimulationDemoBase","FluidSimulationDemoParticleSystem","FluidSimulationDemoParticleCustomShape","FluidSimulationDemoPrecomputeRendering","FluidSimulationDemoBoxSphere","FluidSimulationDemoHeightMap","FluidSimulationDemoGlass","FluidSimulationDemoMeshSDF","super","_boxMin","_boxMax","_boxMesh","_boxMaterial","_boxMeshFront","_boxMaterialFront","_checkXZBounds","_origCollisionPlanes","abs","z","x","y","_collisionPlanes","i","length","plane","addCollisionPlane","normal","d","undefined","_angleX","_angleY","_prevTransfo","_autoRotateBox","_sceneRenderObserver","_sceneAfterCameraRenderObserver","_sceneKeyboardObserver","_onEngineResizeObserver","_passPP","_engine","externalTextureSamplerBinding","_sphereMesh","addCollisionSphere","_wallMesh","addCollisionBox","push","_collisionObjects","disabled","activeCameras","alpha","beta","radius","outputRenderTarget","width","getRenderWidth","height","getRenderHeight","_fluidRenderObject","object","particleSize","_fluidSim","smoothingRadius","densityReference","pressureConstant","viscosity","maxVelocity","maxAcceleration","metallic","roughness","backFaceCulling","cullBackFaces","clone","depth","material","position","isPickable","layerMask","arrowLeftDown","arrowRightDown","arrowUpDown","arrowDownDown","onKeyboardObservable","add","kbInfo","type","event","code","onApplyObservable","effect","setTexture","depthIsShared","onAfterCameraRenderObservable","firstPP","_getFirstPostProcess","inputTexture","depthStencilTexture","_shareDepth","renderTarget","render","subMeshes","postProcessManager","directRender","onResizeObservable","resize","onBeforeRenderObservable","_rotateMeshes","fps","getFps","_run","remove","_makeGUIMainMenu","params","checkXZBounds","autoRotateBox","restart","autoRotateBoxCtrl","setValue","_generateParticles","boxOpacity","mainMenu","_gui","onChange","setEnabled","_onPaused","angleX","angleY","transfo","boxVertices","ymin","v","min","transform","quat","invert","tmp","rotationQuaternion","m","t","multiplyToRef","qf","decompose","copyFrom","_environmentFile","_cylMesh","_footMesh","addCollisionVerticalCylinder","addCollisionCutHollowSphere","_footMeshOfst","_cylMeshOfst","targetRenderer","fluidColor","_shapeCollisionRestitution","_particleGenerator","addInPlace","table","getMeshByName","scaling","setAll","_numParticles","_particleGeneratorName","_time","_showHeightmap","_sphere","_box","_heightMap","_groundCollision","terrainSize","addCollisionTerrain","_ground","blurThicknessFilterSize","blurThicknessNumIterations","specularPower","refractionStrength","density","_createParticleGenerator","_fluidRendererGUI","syncGUI","_syncFluidSimGUI","ParticleGenerator","substring","indexOf","toLocaleLowerCase","particleRadius","particleGeneratorName","showHeightmap","currNumParticles","_checkCollisions","cos","sin","rotation","_meshName","_addMesh","waitForReadiness","addCollisionMesh","Promise","all","_collisionObjectPromises","meshname","disposeCollisionObject","_initParticles","_started","_meshPCS","_pcs","computeWorldMatrix","setTarget","getCameraByName","getChildMeshes","forEach","disableLighting","emissiveTexture","diffuseTexture","addSurfacePoints","buildMeshAsync","positions","origPositions","slice","numParticles","vertexBuffers","colors","setNumParticles","particleThicknessAlpha","minimumThickness","blurDepthFilterSize","blurDepthNumIterations","blurDepthDepthScale","thicknessMapSize","generateDiffuseTexture","fresnelClamp","velocity","accel","stopped","initParticles","max","f","random","g","h","_sceneObserver","updateDirectly","_paused","paused","start","_particleSystem","particleTexture","blendMode","createConeEmitter","color1","color2","colorDead","minSize","maxSize","minLifeTime","maxLifeTime","emitRate","gravity","minEmitPower","maxEmitPower","updateSpeed","preWarmCycles","renderAsFluid","removeRenderObject","getRenderObjectFromParticleSystem","useTrueRenderingForDiffuseTexture","_animSpeed","positionBuffers","num","buffer","fetch","arrayBuffer","buffer32","Uint32Array","bufferFloat","Float32Array","floor","animSpeed"],"sourceRoot":""}