{"version":3,"file":"692.52b13fa21fa6d1262db8.js","mappings":"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","sources":["webpack://babylonjs-fluid-rendering/./src/scenes/FluidRenderer/fluidRendererGUI.ts"],"sourcesContent":["import * as BABYLON from \"@babylonjs/core\";\r\n\r\nimport * as LiLGUI from \"lil-gui\";\r\nimport { FluidRenderingDebug } from \"./fluidRenderingTargetRenderer\";\r\n/*\r\nasync function LoadDAT(): Promise<void> {\r\n    const _ = await import(\"@babylonjs/core/Misc/tools\")\r\n    return _.Tools.LoadScriptAsync(\"https://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.6.2/dat.gui.min.js\");\r\n}\r\n*/\r\nexport class FluidRendererGUI {\r\n    private _gui: BABYLON.Nullable<LiLGUI.GUI>;\r\n    private _visible: boolean;\r\n    private _scene: BABYLON.Scene;\r\n    private _showGeneralMenu: boolean;\r\n    private _onKeyObserver: BABYLON.Nullable<\r\n        BABYLON.Observer<BABYLON.KeyboardInfo>\r\n    >;\r\n    private _targetRendererIndex: number;\r\n    private _targetRenderersGUIElements: LiLGUI.Controller[];\r\n    private _renderObjectIndex: number;\r\n    private _renderObjectsGUIElements: LiLGUI.Controller[];\r\n\r\n    public set visible(v: boolean) {\r\n        if (v === this._visible) {\r\n            return;\r\n        }\r\n        this._visible = v;\r\n        if (this._gui) {\r\n            this._gui.domElement.style.display = v ? \"\" : \"none\";\r\n        }\r\n    }\r\n\r\n    constructor(scene: BABYLON.Scene, showGeneralMenu = true) {\r\n        this._scene = scene;\r\n        this._showGeneralMenu = showGeneralMenu;\r\n        this._visible = true;\r\n        this._onKeyObserver = null;\r\n        this._targetRendererIndex = 0;\r\n        this._targetRenderersGUIElements = [];\r\n        this._renderObjectIndex = 0;\r\n        this._renderObjectsGUIElements = [];\r\n        this._gui = null;\r\n\r\n        this.initialize();\r\n    }\r\n\r\n    public dispose() {\r\n        const oldgui = document.getElementById(\"datGUI\");\r\n        if (oldgui !== null) {\r\n            oldgui.remove();\r\n            this._gui = null;\r\n        }\r\n        this._scene.onKeyboardObservable.remove(this._onKeyObserver);\r\n        this._onKeyObserver = null;\r\n    }\r\n\r\n    private _setupKeyboard(): void {\r\n        this._onKeyObserver = this._scene.onKeyboardObservable.add((kbInfo) => {\r\n            switch (kbInfo.type) {\r\n                case BABYLON.KeyboardEventTypes.KEYDOWN:\r\n                    //console.log(\"KEY DOWN: \", kbInfo.event.key);\r\n                    break;\r\n                case BABYLON.KeyboardEventTypes.KEYUP:\r\n                    switch (kbInfo.event.key) {\r\n                        case \"F8\": {\r\n                            this.visible = !this._visible;\r\n                            break;\r\n                        }\r\n                    }\r\n                    //console.log(\"KEY UP: \", kbInfo.event.key, kbInfo.event.keyCode);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    public initialize(): void {\r\n        this.dispose();\r\n\r\n        this._gui = new LiLGUI.GUI({ title: \"Fluid Rendering\" });\r\n        this._gui.domElement.style.marginTop = \"60px\";\r\n        this._gui.domElement.id = \"datGUI\";\r\n\r\n        this._setupKeyboard();\r\n\r\n        if (this._showGeneralMenu) {\r\n            this._makeMenuGeneral();\r\n        }\r\n        this._makeMenuTargetRenderers();\r\n        this._makeMenuRenderObjects();\r\n    }\r\n\r\n    private _addList(\r\n        menu: LiLGUI.GUI,\r\n        params: object,\r\n        name: string,\r\n        friendlyName: string,\r\n        list: any[]\r\n    ): LiLGUI.Controller {\r\n        return menu\r\n            .add(params, name, list)\r\n            .name(friendlyName)\r\n            .onChange((value: any) => {\r\n                this._parameterChanged(name, value);\r\n            });\r\n    }\r\n\r\n    private _addCheckbox(\r\n        menu: LiLGUI.GUI,\r\n        params: object,\r\n        name: string,\r\n        friendlyName: string\r\n    ): LiLGUI.Controller {\r\n        return menu\r\n            .add(params, name)\r\n            .name(friendlyName)\r\n            .onChange((value: any) => {\r\n                this._parameterChanged(name, value);\r\n            });\r\n    }\r\n\r\n    private _addSlider(\r\n        menu: LiLGUI.GUI,\r\n        params: object,\r\n        name: string,\r\n        friendlyName: string,\r\n        min: number,\r\n        max: number,\r\n        step: number\r\n    ): LiLGUI.Controller {\r\n        return menu\r\n            .add(params, name, min, max, step)\r\n            .name(friendlyName)\r\n            .onChange((value: any) => {\r\n                this._parameterChanged(name, value);\r\n            });\r\n    }\r\n\r\n    private _addColor(\r\n        menu: LiLGUI.GUI,\r\n        params: object,\r\n        name: string,\r\n        friendlyName: string\r\n    ): LiLGUI.Controller {\r\n        return menu\r\n            .addColor(params, name)\r\n            .name(friendlyName)\r\n            .onChange((value: any) => {\r\n                this._parameterChanged(name, value);\r\n            });\r\n    }\r\n\r\n    private _makeMenuGeneral(): void {\r\n        if (!this._gui) {\r\n            return;\r\n        }\r\n\r\n        const params = {\r\n            enable: this._parameterRead(\"enable\"),\r\n        };\r\n\r\n        const general = this._gui.addFolder(\"General\");\r\n\r\n        general.$title.style.fontWeight = \"bold\";\r\n\r\n        this._addCheckbox(general, params, \"enable\", \"Enable fluid renderer\");\r\n\r\n        general.open();\r\n    }\r\n\r\n    private _makeMenuTargetRenderers(): void {\r\n        if (\r\n            !this._gui ||\r\n            !(this._scene.fluidRenderer?.targetRenderers.length ?? 0)\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        const params = {\r\n            targets_index: this._parameterRead(\"targets_index\"),\r\n            targets_generateDiffuseTexture: this._parameterRead(\r\n                \"targets_generateDiffuseTexture\"\r\n            ),\r\n            targets_fluidColor: this._parameterRead(\"targets_fluidColor\"),\r\n            targets_density: this._parameterRead(\"targets_density\"),\r\n            targets_refractionStrength: this._parameterRead(\r\n                \"targets_refractionStrength\"\r\n            ),\r\n            targets_fresnelClamp: this._parameterRead(\"targets_fresnelClamp\"),\r\n            targets_specularPower: this._parameterRead(\"targets_specularPower\"),\r\n            targets_minimumThickness: this._parameterRead(\r\n                \"targets_minimumThickness\"\r\n            ),\r\n            targets_debug: this._parameterRead(\"targets_debug\"),\r\n            targets_debugFeature: this._parameterRead(\"targets_debugFeature\"),\r\n            targets_enableBlurDepth: this._parameterRead(\r\n                \"targets_enableBlurDepth\"\r\n            ),\r\n            targets_blurDepthSizeDivisor: this._parameterRead(\r\n                \"targets_blurDepthSizeDivisor\"\r\n            ),\r\n            targets_blurDepthFilterSize: this._parameterRead(\r\n                \"targets_blurDepthFilterSize\"\r\n            ),\r\n            targets_blurDepthNumIterations: this._parameterRead(\r\n                \"targets_blurDepthNumIterations\"\r\n            ),\r\n            targets_blurDepthMaxFilterSize: this._parameterRead(\r\n                \"targets_blurDepthMaxFilterSize\"\r\n            ),\r\n            targets_blurDepthDepthScale: this._parameterRead(\r\n                \"targets_blurDepthDepthScale\"\r\n            ),\r\n            targets_enableBlurThickness: this._parameterRead(\r\n                \"targets_enableBlurThickness\"\r\n            ),\r\n            targets_blurThicknessSizeDivisor: this._parameterRead(\r\n                \"targets_blurThicknessSizeDivisor\"\r\n            ),\r\n            targets_blurThicknessFilterSize: this._parameterRead(\r\n                \"targets_blurThicknessFilterSize\"\r\n            ),\r\n            targets_blurThicknessNumIterations: this._parameterRead(\r\n                \"targets_blurThicknessNumIterations\"\r\n            ),\r\n            targets_depthMapSize: this._parameterRead(\"targets_depthMapSize\"),\r\n            targets_thicknessMapSize: this._parameterRead(\r\n                \"targets_thicknessMapSize\"\r\n            ),\r\n            targets_diffuseMapSize: this._parameterRead(\r\n                \"targets_diffuseMapSize\"\r\n            ),\r\n            targets_useVelocity: this._parameterRead(\"targets_useVelocity\"),\r\n            targets_useFixedThickness: this._parameterRead(\r\n                \"targets_useFixedThickness\"\r\n            ),\r\n        };\r\n\r\n        const targetRenderers = this._gui.addFolder(\"Target renderers\");\r\n        targetRenderers.$title.style.fontWeight = \"bold\";\r\n\r\n        const targetList: number[] = [];\r\n        if (this._scene.fluidRenderer) {\r\n            for (\r\n                let i = 0;\r\n                i < this._scene.fluidRenderer.targetRenderers.length;\r\n                ++i\r\n            ) {\r\n                targetList.push(i);\r\n            }\r\n        }\r\n\r\n        this._addList(\r\n            targetRenderers,\r\n            params,\r\n            \"targets_index\",\r\n            \"Index\",\r\n            targetList\r\n        );\r\n        this._targetRenderersGUIElements.push(\r\n            this._addList(\r\n                targetRenderers,\r\n                params,\r\n                \"targets_depthMapSize\",\r\n                \"Depth map size\",\r\n                [\"Screen size\", 256, 512, 1024, 2048, 4096]\r\n            )\r\n        );\r\n        this._targetRenderersGUIElements.push(\r\n            this._addList(\r\n                targetRenderers,\r\n                params,\r\n                \"targets_thicknessMapSize\",\r\n                \"Thickness map size\",\r\n                [\"Screen size\", 64, 128, 256, 512, 1024, 2048]\r\n            )\r\n        );\r\n        this._targetRenderersGUIElements.push(\r\n            this._addList(\r\n                targetRenderers,\r\n                params,\r\n                \"targets_diffuseMapSize\",\r\n                \"Diffuse map size\",\r\n                [\"Screen size\", 256, 512, 1024, 2048, 4096]\r\n            )\r\n        );\r\n        this._targetRenderersGUIElements.push(\r\n            this._addSlider(\r\n                targetRenderers,\r\n                params,\r\n                \"targets_minimumThickness\",\r\n                \"Minimum thickness\",\r\n                0,\r\n                3,\r\n                0.001\r\n            )\r\n        );\r\n        this._targetRenderersGUIElements.push(\r\n            this._addCheckbox(\r\n                targetRenderers,\r\n                params,\r\n                \"targets_useFixedThickness\",\r\n                \"Use fixed thickness\"\r\n            )\r\n        );\r\n        this._targetRenderersGUIElements.push(\r\n            this._addCheckbox(\r\n                targetRenderers,\r\n                params,\r\n                \"targets_useVelocity\",\r\n                \"Use velocity\"\r\n            )\r\n        );\r\n\r\n        const menuColor = targetRenderers.addFolder(\"Color\");\r\n        menuColor.$title.style.fontStyle = \"italic\";\r\n\r\n        this._targetRenderersGUIElements.push(\r\n            this._addCheckbox(\r\n                menuColor,\r\n                params,\r\n                \"targets_generateDiffuseTexture\",\r\n                \"Generate diffuse texture\"\r\n            )\r\n        );\r\n        this._targetRenderersGUIElements.push(\r\n            this._addColor(\r\n                menuColor,\r\n                params,\r\n                \"targets_fluidColor\",\r\n                \"Fluid color\"\r\n            )\r\n        );\r\n        this._targetRenderersGUIElements.push(\r\n            this._addSlider(\r\n                menuColor,\r\n                params,\r\n                \"targets_density\",\r\n                \"Density\",\r\n                0,\r\n                20,\r\n                0.01\r\n            )\r\n        );\r\n        this._targetRenderersGUIElements.push(\r\n            this._addSlider(\r\n                menuColor,\r\n                params,\r\n                \"targets_refractionStrength\",\r\n                \"Refraction strength\",\r\n                0,\r\n                0.3,\r\n                0.005\r\n            )\r\n        );\r\n        this._targetRenderersGUIElements.push(\r\n            this._addSlider(\r\n                menuColor,\r\n                params,\r\n                \"targets_fresnelClamp\",\r\n                \"Fresnel clamp\",\r\n                0,\r\n                1.0,\r\n                0.005\r\n            )\r\n        );\r\n        this._targetRenderersGUIElements.push(\r\n            this._addSlider(\r\n                menuColor,\r\n                params,\r\n                \"targets_specularPower\",\r\n                \"Specular power\",\r\n                1,\r\n                5000,\r\n                5\r\n            )\r\n        );\r\n\r\n        const menuBlurDepth = targetRenderers.addFolder(\"Blur Depth\");\r\n        menuBlurDepth.$title.style.fontStyle = \"italic\";\r\n\r\n        this._targetRenderersGUIElements.push(\r\n            this._addCheckbox(\r\n                menuBlurDepth,\r\n                params,\r\n                \"targets_enableBlurDepth\",\r\n                \"Enable\"\r\n            )\r\n        );\r\n        this._targetRenderersGUIElements.push(\r\n            this._addSlider(\r\n                menuBlurDepth,\r\n                params,\r\n                \"targets_blurDepthSizeDivisor\",\r\n                \"Size divisor\",\r\n                1,\r\n                10,\r\n                1\r\n            )\r\n        );\r\n        this._targetRenderersGUIElements.push(\r\n            this._addSlider(\r\n                menuBlurDepth,\r\n                params,\r\n                \"targets_blurDepthFilterSize\",\r\n                \"Filter size\",\r\n                1,\r\n                20,\r\n                1\r\n            )\r\n        );\r\n        this._targetRenderersGUIElements.push(\r\n            this._addSlider(\r\n                menuBlurDepth,\r\n                params,\r\n                \"targets_blurDepthNumIterations\",\r\n                \"Num iterations\",\r\n                1,\r\n                10,\r\n                1\r\n            )\r\n        );\r\n        this._targetRenderersGUIElements.push(\r\n            this._addSlider(\r\n                menuBlurDepth,\r\n                params,\r\n                \"targets_blurDepthMaxFilterSize\",\r\n                \"Max filter size\",\r\n                1,\r\n                100,\r\n                1\r\n            )\r\n        );\r\n        this._targetRenderersGUIElements.push(\r\n            this._addSlider(\r\n                menuBlurDepth,\r\n                params,\r\n                \"targets_blurDepthDepthScale\",\r\n                \"Depth scale\",\r\n                0,\r\n                100,\r\n                0.01\r\n            )\r\n        );\r\n\r\n        const menuBlurThickness = targetRenderers.addFolder(\"Blur Thickness\");\r\n        menuBlurThickness.$title.style.fontStyle = \"italic\";\r\n\r\n        this._targetRenderersGUIElements.push(\r\n            this._addCheckbox(\r\n                menuBlurThickness,\r\n                params,\r\n                \"targets_enableBlurThickness\",\r\n                \"Enable\"\r\n            )\r\n        );\r\n        this._targetRenderersGUIElements.push(\r\n            this._addSlider(\r\n                menuBlurThickness,\r\n                params,\r\n                \"targets_blurThicknessSizeDivisor\",\r\n                \"Size divisor\",\r\n                1,\r\n                10,\r\n                1\r\n            )\r\n        );\r\n        this._targetRenderersGUIElements.push(\r\n            this._addSlider(\r\n                menuBlurThickness,\r\n                params,\r\n                \"targets_blurThicknessFilterSize\",\r\n                \"Filter size\",\r\n                1,\r\n                20,\r\n                1\r\n            )\r\n        );\r\n        this._targetRenderersGUIElements.push(\r\n            this._addSlider(\r\n                menuBlurThickness,\r\n                params,\r\n                \"targets_blurThicknessNumIterations\",\r\n                \"Num iterations\",\r\n                1,\r\n                10,\r\n                1\r\n            )\r\n        );\r\n\r\n        const menuDebug = targetRenderers.addFolder(\"Debug\");\r\n        menuDebug.$title.style.fontStyle = \"italic\";\r\n\r\n        this._targetRenderersGUIElements.push(\r\n            this._addCheckbox(menuDebug, params, \"targets_debug\", \"Enable\")\r\n        );\r\n        this._targetRenderersGUIElements.push(\r\n            this._addList(\r\n                menuDebug,\r\n                params,\r\n                \"targets_debugFeature\",\r\n                \"Feature\",\r\n                Object.keys(FluidRenderingDebug).filter((k) => isNaN(Number(k)))\r\n            )\r\n        );\r\n\r\n        targetRenderers.open();\r\n    }\r\n\r\n    private _makeMenuRenderObjects(): void {\r\n        if (\r\n            !this._gui ||\r\n            !(this._scene.fluidRenderer?.renderObjects.length ?? 0)\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        const params = {\r\n            objects_index: this._parameterRead(\"objects_index\"),\r\n            objects_particleSize: this._parameterRead(\"objects_particleSize\"),\r\n            objects_particleThicknessAlpha: this._parameterRead(\r\n                \"objects_particleThicknessAlpha\"\r\n            ),\r\n        };\r\n\r\n        const renderObjects = this._gui.addFolder(\"Render objects\");\r\n        renderObjects.$title.style.fontWeight = \"bold\";\r\n\r\n        const objectList: number[] = [];\r\n        if (this._scene.fluidRenderer) {\r\n            for (\r\n                let i = 0;\r\n                i < this._scene.fluidRenderer.renderObjects.length;\r\n                ++i\r\n            ) {\r\n                objectList.push(i);\r\n            }\r\n        }\r\n\r\n        this._addList(\r\n            renderObjects,\r\n            params,\r\n            \"objects_index\",\r\n            \"Index\",\r\n            objectList\r\n        );\r\n        this._renderObjectsGUIElements.push(\r\n            this._addSlider(\r\n                renderObjects,\r\n                params,\r\n                \"objects_particleSize\",\r\n                \"Particle size\",\r\n                0,\r\n                2,\r\n                0.001\r\n            )\r\n        );\r\n        this._renderObjectsGUIElements.push(\r\n            this._addSlider(\r\n                renderObjects,\r\n                params,\r\n                \"objects_particleThicknessAlpha\",\r\n                \"Particle alpha\",\r\n                0,\r\n                1,\r\n                0.001\r\n            )\r\n        );\r\n    }\r\n\r\n    private _readValue(obj: any, name: string): any {\r\n        const parts: string[] = name.split(\"_\");\r\n\r\n        for (let i = 0; i < parts.length; ++i) {\r\n            const part = parts[i];\r\n            obj = obj[parts[i]];\r\n\r\n            if (obj instanceof BABYLON.Color3) {\r\n                obj = obj.toHexString();\r\n            }\r\n\r\n            if (part === \"debugFeature\") {\r\n                obj = FluidRenderingDebug[obj];\r\n            }\r\n\r\n            if (part.endsWith(\"MapSize\") && obj === null) {\r\n                obj = \"Screen size\";\r\n            }\r\n        }\r\n\r\n        return obj;\r\n    }\r\n\r\n    private _setValue(obj: any, name: string, value: any): void {\r\n        const parts: string[] = name.split(\"_\");\r\n\r\n        for (let i = 0; i < parts.length - 1; ++i) {\r\n            obj = obj[parts[i]];\r\n            if (parts[i].endsWith(\"MapSize\") && value === \"Screen size\") {\r\n                value = null;\r\n            }\r\n        }\r\n\r\n        if (\r\n            parts[parts.length - 1].endsWith(\"MapSize\") &&\r\n            value === \"Screen size\"\r\n        ) {\r\n            value = null;\r\n        }\r\n\r\n        obj[parts[parts.length - 1]] = value;\r\n    }\r\n\r\n    private _parameterRead(name: string): any {\r\n        const fluidRenderer = this._scene.fluidRenderer;\r\n        switch (name) {\r\n            case \"enable\":\r\n                return !!this._scene.fluidRenderer;\r\n        }\r\n\r\n        if (name.startsWith(\"targets_\")) {\r\n            name = name.substring(8);\r\n            if (name === \"index\") {\r\n                return this._targetRendererIndex;\r\n            } else {\r\n                return fluidRenderer\r\n                    ? this._readValue(\r\n                          fluidRenderer.targetRenderers[\r\n                              this._targetRendererIndex\r\n                          ],\r\n                          name\r\n                      )\r\n                    : \"\";\r\n            }\r\n        }\r\n\r\n        if (name.startsWith(\"objects_\")) {\r\n            name = name.substring(8);\r\n            if (name === \"index\") {\r\n                return this._renderObjectIndex;\r\n            } else {\r\n                return fluidRenderer\r\n                    ? this._readValue(\r\n                          fluidRenderer.renderObjects[this._renderObjectIndex]\r\n                              .object,\r\n                          name\r\n                      )\r\n                    : \"\";\r\n            }\r\n        }\r\n    }\r\n\r\n    private _fillValues(listGUIElements: LiLGUI.Controller[], obj: any): void {\r\n        for (let i = 0; i < listGUIElements.length; ++i) {\r\n            const elem = listGUIElements[i];\r\n            const property = elem.property.split(\"_\")[1];\r\n            (elem.object as any)[elem.property] = this._readValue(\r\n                obj,\r\n                property\r\n            );\r\n            elem.updateDisplay();\r\n        }\r\n    }\r\n\r\n    public syncGUI(): void {\r\n        const fluidRenderer = this._scene.fluidRenderer;\r\n\r\n        if (fluidRenderer) {\r\n            this._fillValues(\r\n                this._targetRenderersGUIElements,\r\n                fluidRenderer.targetRenderers[this._targetRendererIndex]\r\n            );\r\n            this._fillValues(\r\n                this._renderObjectsGUIElements,\r\n                fluidRenderer.renderObjects[this._renderObjectIndex].object\r\n            );\r\n        }\r\n    }\r\n\r\n    private _parameterChanged(name: string, value: any): void {\r\n        const fluidRenderer = this._scene.fluidRenderer;\r\n        switch (name) {\r\n            case \"enable\":\r\n                if (value) {\r\n                    this._scene.enableFluidRenderer();\r\n                    this._targetRendererIndex = 0;\r\n                    this.initialize();\r\n                } else {\r\n                    this._scene.disableFluidRenderer();\r\n                    this._targetRendererIndex = 0;\r\n                    this.initialize();\r\n                }\r\n                return;\r\n            case \"targets_fluidColor\":\r\n                if (\r\n                    fluidRenderer &&\r\n                    fluidRenderer.targetRenderers.length >\r\n                        this._targetRendererIndex\r\n                ) {\r\n                    fluidRenderer.targetRenderers[\r\n                        this._targetRendererIndex\r\n                    ].fluidColor.copyFrom(BABYLON.Color3.FromHexString(value));\r\n                }\r\n                return;\r\n            case \"targets_debugFeature\": {\r\n                const typedDebugFeature: keyof typeof FluidRenderingDebug =\r\n                    value;\r\n                const val = FluidRenderingDebug[typedDebugFeature];\r\n                if (\r\n                    fluidRenderer &&\r\n                    fluidRenderer.targetRenderers.length >\r\n                        this._targetRendererIndex\r\n                ) {\r\n                    fluidRenderer.targetRenderers[\r\n                        this._targetRendererIndex\r\n                    ].debugFeature = val;\r\n                }\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (name.startsWith(\"targets_\")) {\r\n            name = name.substring(8);\r\n            if (name === \"index\") {\r\n                this._targetRendererIndex = value || 0;\r\n                if (fluidRenderer) {\r\n                    this._fillValues(\r\n                        this._targetRenderersGUIElements,\r\n                        fluidRenderer.targetRenderers[this._targetRendererIndex]\r\n                    );\r\n                }\r\n            } else {\r\n                if (fluidRenderer) {\r\n                    this._setValue(\r\n                        fluidRenderer.targetRenderers[\r\n                            this._targetRendererIndex\r\n                        ],\r\n                        name,\r\n                        value === false\r\n                            ? false\r\n                            : value === true\r\n                            ? true\r\n                            : isNaN(value)\r\n                            ? value\r\n                            : parseFloat(value)\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        if (name.startsWith(\"objects_\")) {\r\n            name = name.substring(8);\r\n            if (name === \"index\") {\r\n                this._renderObjectIndex = value || 0;\r\n                if (fluidRenderer) {\r\n                    this._fillValues(\r\n                        this._renderObjectsGUIElements,\r\n                        fluidRenderer.renderObjects[this._renderObjectIndex]\r\n                            .object\r\n                    );\r\n                }\r\n            } else {\r\n                if (fluidRenderer) {\r\n                    this._setValue(\r\n                        fluidRenderer.renderObjects[this._renderObjectIndex]\r\n                            .object,\r\n                        name,\r\n                        value === false\r\n                            ? false\r\n                            : value === true\r\n                            ? true\r\n                            : isNaN(value)\r\n                            ? value\r\n                            : parseFloat(value)\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"names":["FluidRendererGUI","constructor","scene","showGeneralMenu","this","_scene","_showGeneralMenu","_visible","_onKeyObserver","_targetRendererIndex","_targetRenderersGUIElements","_renderObjectIndex","_renderObjectsGUIElements","_gui","initialize","visible","v","domElement","style","display","dispose","oldgui","document","getElementById","remove","onKeyboardObservable","_setupKeyboard","add","kbInfo","type","event","key","title","marginTop","id","_makeMenuGeneral","_makeMenuTargetRenderers","_makeMenuRenderObjects","_addList","menu","params","name","friendlyName","list","onChange","value","_parameterChanged","_addCheckbox","_addSlider","min","max","step","_addColor","addColor","enable","_parameterRead","general","addFolder","$title","fontWeight","open","fluidRenderer","targetRenderers","length","targets_index","targets_generateDiffuseTexture","targets_fluidColor","targets_density","targets_refractionStrength","targets_fresnelClamp","targets_specularPower","targets_minimumThickness","targets_debug","targets_debugFeature","targets_enableBlurDepth","targets_blurDepthSizeDivisor","targets_blurDepthFilterSize","targets_blurDepthNumIterations","targets_blurDepthMaxFilterSize","targets_blurDepthDepthScale","targets_enableBlurThickness","targets_blurThicknessSizeDivisor","targets_blurThicknessFilterSize","targets_blurThicknessNumIterations","targets_depthMapSize","targets_thicknessMapSize","targets_diffuseMapSize","targets_useVelocity","targets_useFixedThickness","targetList","i","push","menuColor","fontStyle","menuBlurDepth","menuBlurThickness","menuDebug","Object","keys","FluidRenderingDebug","filter","k","isNaN","Number","renderObjects","objects_index","objects_particleSize","objects_particleThicknessAlpha","objectList","_readValue","obj","parts","split","part","toHexString","endsWith","_setValue","startsWith","substring","object","_fillValues","listGUIElements","elem","property","updateDisplay","syncGUI","enableFluidRenderer","disableFluidRenderer","fluidColor","copyFrom","typedDebugFeature","val","debugFeature","parseFloat"],"sourceRoot":""}