{"version":3,"file":"419.a091a9b4656274de2f91.js","mappings":"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","sources":["webpack://babylonjs-fluid-rendering/./src/scenes/FluidRenderer/fluidRenderingRenderTarget.ts","webpack://babylonjs-fluid-rendering/./src/scenes/FluidRenderer/fluidRenderingTargetRenderer.ts"],"sourcesContent":["import * as BABYLON from \"@babylonjs/core\";\r\n\r\nexport class FluidRenderingRenderTarget {\r\n    protected _name: string;\r\n    protected _scene: BABYLON.Scene;\r\n    protected _camera: BABYLON.Nullable<BABYLON.Camera>;\r\n    protected _engine: BABYLON.Engine;\r\n    protected _width: number;\r\n    protected _height: number;\r\n    protected _blurTextureSizeX: number;\r\n    protected _blurTextureSizeY: number;\r\n    protected _textureType: number;\r\n    protected _textureFormat: number;\r\n    protected _blurTextureType: number;\r\n    protected _blurTextureFormat: number;\r\n    protected _useStandardBlur: boolean;\r\n    protected _generateDepthBuffer: boolean;\r\n    protected _samples: number;\r\n    protected _postProcessRunningIndex: number;\r\n\r\n    protected _rt: BABYLON.Nullable<BABYLON.RenderTargetWrapper>;\r\n    protected _texture: BABYLON.Nullable<BABYLON.Texture>;\r\n    protected _rtBlur: BABYLON.Nullable<BABYLON.RenderTargetWrapper>;\r\n    protected _textureBlurred: BABYLON.Nullable<BABYLON.Texture>;\r\n    protected _blurPostProcesses: BABYLON.Nullable<BABYLON.PostProcess[]>;\r\n\r\n    public enableBlur = true;\r\n\r\n    public blurSizeDivisor = 1;\r\n\r\n    public blurFilterSize = 7;\r\n\r\n    private _blurNumIterations = 3;\r\n\r\n    public get blurNumIterations() {\r\n        return this._blurNumIterations;\r\n    }\r\n\r\n    public set blurNumIterations(numIterations: number) {\r\n        if (this._blurNumIterations === numIterations) {\r\n            return;\r\n        }\r\n\r\n        this._blurNumIterations = numIterations;\r\n        if (this._blurPostProcesses !== null) {\r\n            const blurX = this._blurPostProcesses[0];\r\n            const blurY = this._blurPostProcesses[1];\r\n\r\n            this._blurPostProcesses = [\r\n                ...Array(this._blurNumIterations * 2).keys(),\r\n            ].map((elm) => (elm & 1 ? blurY : blurX));\r\n        }\r\n    }\r\n\r\n    public blurMaxFilterSize = 100;\r\n\r\n    public blurDepthScale = 10;\r\n\r\n    public particleSize = 0.02;\r\n\r\n    public onDisposeObservable: BABYLON.Observable<FluidRenderingRenderTarget> =\r\n        new BABYLON.Observable<FluidRenderingRenderTarget>();\r\n\r\n    public get renderTarget() {\r\n        return this._rt;\r\n    }\r\n\r\n    public get renderTargetBlur() {\r\n        return this._rtBlur;\r\n    }\r\n\r\n    public get texture() {\r\n        return this._texture;\r\n    }\r\n\r\n    public get textureBlur() {\r\n        return this._textureBlurred;\r\n    }\r\n\r\n    constructor(\r\n        name: string,\r\n        scene: BABYLON.Scene,\r\n        width: number,\r\n        height: number,\r\n        blurTextureSizeX: number,\r\n        blurTextureSizeY: number,\r\n        textureType: number = BABYLON.Constants.TEXTURETYPE_FLOAT,\r\n        textureFormat: number = BABYLON.Constants.TEXTUREFORMAT_R,\r\n        blurTextureType: number = BABYLON.Constants.TEXTURETYPE_FLOAT,\r\n        blurTextureFormat: number = BABYLON.Constants.TEXTUREFORMAT_R,\r\n        useStandardBlur = false,\r\n        camera: BABYLON.Nullable<BABYLON.Camera> = null,\r\n        generateDepthBuffer = true,\r\n        samples = 1\r\n    ) {\r\n        this._name = name;\r\n        this._scene = scene;\r\n        this._camera = camera;\r\n        this._engine = scene.getEngine();\r\n        this._width = width;\r\n        this._height = height;\r\n        this._blurTextureSizeX = blurTextureSizeX;\r\n        this._blurTextureSizeY = blurTextureSizeY;\r\n        this._textureType = textureType;\r\n        this._textureFormat = textureFormat;\r\n        this._blurTextureType = blurTextureType;\r\n        this._blurTextureFormat = blurTextureFormat;\r\n        this._useStandardBlur = useStandardBlur;\r\n        this._generateDepthBuffer = generateDepthBuffer;\r\n        this._samples = samples;\r\n        this._postProcessRunningIndex = 0;\r\n        this.enableBlur = blurTextureSizeX !== 0 && blurTextureSizeY !== 0;\r\n\r\n        this._rt = null;\r\n        this._texture = null;\r\n        this._rtBlur = null;\r\n        this._textureBlurred = null;\r\n        this._blurPostProcesses = null;\r\n    }\r\n\r\n    public initialize(): void {\r\n        this.dispose();\r\n\r\n        this._createRenderTarget();\r\n\r\n        if (this.enableBlur && this._texture) {\r\n            const [rtBlur, textureBlurred, blurPostProcesses] =\r\n                this._createBlurPostProcesses(\r\n                    this._texture,\r\n                    this._blurTextureType,\r\n                    this._blurTextureFormat,\r\n                    this.blurSizeDivisor,\r\n                    this._name,\r\n                    this._useStandardBlur\r\n                );\r\n            this._rtBlur = rtBlur;\r\n            this._textureBlurred = textureBlurred;\r\n            this._blurPostProcesses = blurPostProcesses;\r\n        }\r\n    }\r\n\r\n    public applyBlurPostProcesses(): void {\r\n        if (this.enableBlur && this._blurPostProcesses) {\r\n            this._postProcessRunningIndex = 0;\r\n            this._scene.postProcessManager.directRender(\r\n                this._blurPostProcesses,\r\n                this._rtBlur,\r\n                true\r\n            );\r\n            this._engine.unBindFramebuffer(this._rtBlur!);\r\n        }\r\n    }\r\n\r\n    protected _createRenderTarget(): void {\r\n        this._rt = this._engine.createRenderTargetTexture(\r\n            { width: this._width, height: this._height },\r\n            {\r\n                generateMipMaps: false,\r\n                type: this._textureType,\r\n                format: this._textureFormat,\r\n                samplingMode: BABYLON.Constants.TEXTURE_NEAREST_SAMPLINGMODE,\r\n                generateDepthBuffer: this._generateDepthBuffer,\r\n                generateStencilBuffer: false,\r\n                samples: this._samples,\r\n            }\r\n        );\r\n\r\n        const renderTexture = this._rt.texture!;\r\n\r\n        this._texture = new BABYLON.Texture(null, this._scene);\r\n        this._texture.name = \"rtt\" + this._name;\r\n        this._texture._texture = renderTexture;\r\n        this._texture.wrapU = BABYLON.Texture.CLAMP_ADDRESSMODE;\r\n        this._texture.wrapV = BABYLON.Texture.CLAMP_ADDRESSMODE;\r\n        this._texture.anisotropicFilteringLevel = 1;\r\n    }\r\n\r\n    protected _createBlurPostProcesses(\r\n        textureBlurSource: BABYLON.ThinTexture,\r\n        textureType: number,\r\n        textureFormat: number,\r\n        blurSizeDivisor: number,\r\n        debugName: string,\r\n        useStandardBlur = false\r\n    ): [BABYLON.RenderTargetWrapper, BABYLON.Texture, BABYLON.PostProcess[]] {\r\n        const engine = this._scene.getEngine();\r\n        const targetSize = new BABYLON.Vector2(\r\n            Math.floor(this._blurTextureSizeX / blurSizeDivisor),\r\n            Math.floor(this._blurTextureSizeY / blurSizeDivisor)\r\n        );\r\n        const useBilinearFiltering =\r\n            (textureType === BABYLON.Constants.TEXTURETYPE_FLOAT &&\r\n                engine.getCaps().textureFloatLinearFiltering) ||\r\n            (textureType === BABYLON.Constants.TEXTURETYPE_HALF_FLOAT &&\r\n                engine.getCaps().textureHalfFloatLinearFiltering);\r\n\r\n        const rtBlur = this._engine.createRenderTargetTexture(\r\n            { width: targetSize.x, height: targetSize.y },\r\n            {\r\n                generateMipMaps: false,\r\n                type: textureType,\r\n                format: textureFormat,\r\n                samplingMode: useBilinearFiltering\r\n                    ? BABYLON.Constants.TEXTURE_BILINEAR_SAMPLINGMODE\r\n                    : BABYLON.Constants.TEXTURE_NEAREST_SAMPLINGMODE,\r\n                generateDepthBuffer: false,\r\n                generateStencilBuffer: false,\r\n                samples: this._samples,\r\n            }\r\n        );\r\n\r\n        const renderTexture = rtBlur.texture!;\r\n\r\n        const texture = new BABYLON.Texture(null, this._scene);\r\n        texture.name = \"rttBlurred\" + debugName;\r\n        texture._texture = renderTexture;\r\n        texture.wrapU = BABYLON.Texture.CLAMP_ADDRESSMODE;\r\n        texture.wrapV = BABYLON.Texture.CLAMP_ADDRESSMODE;\r\n        texture.anisotropicFilteringLevel = 1;\r\n\r\n        if (useStandardBlur) {\r\n            const kernelBlurXPostprocess = new BABYLON.PostProcess(\r\n                \"BilateralBlurX\",\r\n                \"standardBlur\",\r\n                [\"filterSize\", \"blurDir\"],\r\n                null,\r\n                1,\r\n                null,\r\n                BABYLON.Constants.TEXTURE_NEAREST_SAMPLINGMODE,\r\n                engine,\r\n                true,\r\n                null,\r\n                textureType,\r\n                undefined,\r\n                undefined,\r\n                undefined,\r\n                textureFormat\r\n            );\r\n            kernelBlurXPostprocess.samples = this._samples;\r\n            kernelBlurXPostprocess.externalTextureSamplerBinding = true;\r\n            kernelBlurXPostprocess.onApplyObservable.add((effect) => {\r\n                if (this._postProcessRunningIndex === 0) {\r\n                    effect.setTexture(\"textureSampler\", textureBlurSource);\r\n                } else {\r\n                    effect._bindTexture(\r\n                        \"textureSampler\",\r\n                        kernelBlurXPostprocess.inputTexture.texture\r\n                    );\r\n                }\r\n                effect.setInt(\"filterSize\", this.blurFilterSize);\r\n                effect.setFloat2(\"blurDir\", 1 / this._blurTextureSizeX, 0);\r\n                this._postProcessRunningIndex++;\r\n            });\r\n            kernelBlurXPostprocess.onSizeChangedObservable.add(() => {\r\n                kernelBlurXPostprocess._textures.forEach((rt) => {\r\n                    rt.texture!.wrapU = BABYLON.Texture.CLAMP_ADDRESSMODE;\r\n                    rt.texture!.wrapV = BABYLON.Texture.CLAMP_ADDRESSMODE;\r\n                });\r\n            });\r\n            this._fixReusablePostProcess(kernelBlurXPostprocess);\r\n\r\n            const kernelBlurYPostprocess = new BABYLON.PostProcess(\r\n                \"BilateralBlurY\",\r\n                \"standardBlur\",\r\n                [\"filterSize\", \"blurDir\"],\r\n                null,\r\n                1,\r\n                null,\r\n                BABYLON.Constants.TEXTURE_NEAREST_SAMPLINGMODE,\r\n                engine,\r\n                true,\r\n                null,\r\n                textureType,\r\n                undefined,\r\n                undefined,\r\n                undefined,\r\n                textureFormat\r\n            );\r\n            kernelBlurYPostprocess.samples = this._samples;\r\n            kernelBlurYPostprocess.onApplyObservable.add((effect) => {\r\n                effect.setInt(\"filterSize\", this.blurFilterSize);\r\n                effect.setFloat2(\"blurDir\", 0, 1 / this._blurTextureSizeY);\r\n                this._postProcessRunningIndex++;\r\n            });\r\n            kernelBlurYPostprocess.onSizeChangedObservable.add(() => {\r\n                kernelBlurYPostprocess._textures.forEach((rt) => {\r\n                    rt.texture!.wrapU = BABYLON.Texture.CLAMP_ADDRESSMODE;\r\n                    rt.texture!.wrapV = BABYLON.Texture.CLAMP_ADDRESSMODE;\r\n                });\r\n            });\r\n            this._fixReusablePostProcess(kernelBlurYPostprocess);\r\n\r\n            kernelBlurXPostprocess.autoClear = false;\r\n            kernelBlurYPostprocess.autoClear = false;\r\n\r\n            return [\r\n                rtBlur,\r\n                texture,\r\n                [...Array(this._blurNumIterations * 2).keys()].map((elm) =>\r\n                    elm & 1 ? kernelBlurYPostprocess : kernelBlurXPostprocess\r\n                ),\r\n            ];\r\n        } else {\r\n            const uniforms: string[] = [\r\n                \"maxFilterSize\",\r\n                \"blurDir\",\r\n                \"projectedParticleConstant\",\r\n                \"depthThreshold\",\r\n            ];\r\n\r\n            const kernelBlurXPostprocess = new BABYLON.PostProcess(\r\n                \"BilateralBlurX\",\r\n                \"bilateralBlur\",\r\n                uniforms,\r\n                null,\r\n                1,\r\n                null,\r\n                BABYLON.Constants.TEXTURE_NEAREST_SAMPLINGMODE,\r\n                engine,\r\n                true,\r\n                null,\r\n                textureType,\r\n                undefined,\r\n                undefined,\r\n                undefined,\r\n                textureFormat\r\n            );\r\n            kernelBlurXPostprocess.samples = this._samples;\r\n            kernelBlurXPostprocess.externalTextureSamplerBinding = true;\r\n            kernelBlurXPostprocess.onApplyObservable.add((effect) => {\r\n                if (this._postProcessRunningIndex === 0) {\r\n                    effect.setTexture(\"textureSampler\", textureBlurSource);\r\n                } else {\r\n                    effect._bindTexture(\r\n                        \"textureSampler\",\r\n                        kernelBlurXPostprocess.inputTexture.texture\r\n                    );\r\n                }\r\n                effect.setInt(\"maxFilterSize\", this.blurMaxFilterSize);\r\n                effect.setFloat2(\"blurDir\", 1 / this._blurTextureSizeX, 0);\r\n                effect.setFloat(\r\n                    \"projectedParticleConstant\",\r\n                    this._getProjectedParticleConstant()\r\n                );\r\n                effect.setFloat(\"depthThreshold\", this._getDepthThreshold());\r\n                this._postProcessRunningIndex++;\r\n            });\r\n            kernelBlurXPostprocess.onSizeChangedObservable.add(() => {\r\n                kernelBlurXPostprocess._textures.forEach((rt) => {\r\n                    rt.texture!.wrapU = BABYLON.Texture.CLAMP_ADDRESSMODE;\r\n                    rt.texture!.wrapV = BABYLON.Texture.CLAMP_ADDRESSMODE;\r\n                });\r\n            });\r\n            this._fixReusablePostProcess(kernelBlurXPostprocess);\r\n\r\n            const kernelBlurYPostprocess = new BABYLON.PostProcess(\r\n                \"BilateralBlurY\",\r\n                \"bilateralBlur\",\r\n                uniforms,\r\n                null,\r\n                1,\r\n                null,\r\n                BABYLON.Constants.TEXTURE_NEAREST_SAMPLINGMODE,\r\n                engine,\r\n                true,\r\n                null,\r\n                textureType,\r\n                undefined,\r\n                undefined,\r\n                undefined,\r\n                textureFormat\r\n            );\r\n            kernelBlurYPostprocess.samples = this._samples;\r\n            kernelBlurYPostprocess.onApplyObservable.add((effect) => {\r\n                effect.setInt(\"maxFilterSize\", this.blurMaxFilterSize);\r\n                effect.setFloat2(\"blurDir\", 0, 1 / this._blurTextureSizeY);\r\n                effect.setFloat(\r\n                    \"projectedParticleConstant\",\r\n                    this._getProjectedParticleConstant()\r\n                );\r\n                effect.setFloat(\"depthThreshold\", this._getDepthThreshold());\r\n                this._postProcessRunningIndex++;\r\n            });\r\n            kernelBlurYPostprocess.onSizeChangedObservable.add(() => {\r\n                kernelBlurYPostprocess._textures.forEach((rt) => {\r\n                    rt.texture!.wrapU = BABYLON.Texture.CLAMP_ADDRESSMODE;\r\n                    rt.texture!.wrapV = BABYLON.Texture.CLAMP_ADDRESSMODE;\r\n                });\r\n            });\r\n            this._fixReusablePostProcess(kernelBlurYPostprocess);\r\n\r\n            kernelBlurXPostprocess.autoClear = false;\r\n            kernelBlurYPostprocess.autoClear = false;\r\n\r\n            return [\r\n                rtBlur,\r\n                texture,\r\n                [...Array(this._blurNumIterations * 2).keys()].map((elm) =>\r\n                    elm & 1 ? kernelBlurYPostprocess : kernelBlurXPostprocess\r\n                ),\r\n            ];\r\n        }\r\n    }\r\n\r\n    private _fixReusablePostProcess(pp: BABYLON.PostProcess) {\r\n        if (!pp.isReusable()) {\r\n            return;\r\n        }\r\n\r\n        pp.onActivateObservable.add(() => {\r\n            // undo what calling activate() does which will make sure we will retrieve the right texture when getting the input for the post process\r\n            pp._currentRenderTextureInd = (pp._currentRenderTextureInd + 1) % 2;\r\n        });\r\n        pp.onApplyObservable.add(() => {\r\n            // now we can advance to the next texture\r\n            pp._currentRenderTextureInd = (pp._currentRenderTextureInd + 1) % 2;\r\n        });\r\n    }\r\n\r\n    private _getProjectedParticleConstant() {\r\n        return (\r\n            (this.blurFilterSize *\r\n                this.particleSize *\r\n                0.05 *\r\n                (this._height / 2)) /\r\n            Math.tan((this._camera?.fov ?? (45 * Math.PI) / 180) / 2)\r\n        );\r\n    }\r\n\r\n    private _getDepthThreshold() {\r\n        return (this.particleSize / 2) * this.blurDepthScale;\r\n    }\r\n\r\n    public dispose(): void {\r\n        if (this.onDisposeObservable.hasObservers()) {\r\n            this.onDisposeObservable.notifyObservers(this);\r\n        }\r\n\r\n        this._rt?.dispose();\r\n        this._rt = null;\r\n        this._rtBlur?.dispose();\r\n        this._rtBlur = null;\r\n        if (this._blurPostProcesses) {\r\n            this._blurPostProcesses[0].dispose();\r\n            this._blurPostProcesses[1].dispose();\r\n        }\r\n        this._blurPostProcesses = null;\r\n    }\r\n}\r\n","import * as BABYLON from \"@babylonjs/core\";\r\n\r\nimport { FluidRenderingObject } from \"./fluidRenderingObject\";\r\nimport { FluidRenderingRenderTarget } from \"./fluidRenderingRenderTarget\";\r\n\r\nexport enum FluidRenderingDebug {\r\n    DepthTexture,\r\n    DepthBlurredTexture,\r\n    ThicknessTexture,\r\n    ThicknessBlurredTexture,\r\n    DiffuseTexture,\r\n    Normals,\r\n    DiffuseRendering,\r\n}\r\n\r\nexport class FluidRenderingTargetRenderer {\r\n    protected _scene: BABYLON.Scene;\r\n    protected _camera: BABYLON.Nullable<BABYLON.Camera>;\r\n    protected _engine: BABYLON.Engine;\r\n\r\n    protected _depthRenderTarget: BABYLON.Nullable<FluidRenderingRenderTarget>;\r\n    protected _diffuseRenderTarget: BABYLON.Nullable<FluidRenderingRenderTarget>;\r\n    protected _thicknessRenderTarget: BABYLON.Nullable<FluidRenderingRenderTarget>;\r\n\r\n    protected _renderPostProcess: BABYLON.Nullable<BABYLON.PostProcess>;\r\n\r\n    protected _invProjectionMatrix: BABYLON.Matrix;\r\n    protected _depthClearColor: BABYLON.Color4;\r\n    protected _thicknessClearColor: BABYLON.Color4;\r\n\r\n    protected _needInitialization: boolean;\r\n\r\n    public get needInitialization() {\r\n        return this._needInitialization;\r\n    }\r\n\r\n    private _generateDiffuseTexture = false;\r\n\r\n    public get generateDiffuseTexture() {\r\n        return this._generateDiffuseTexture;\r\n    }\r\n\r\n    public set generateDiffuseTexture(generate: boolean) {\r\n        if (this._generateDiffuseTexture === generate) {\r\n            return;\r\n        }\r\n\r\n        this._generateDiffuseTexture = generate;\r\n        this._needInitialization = true;\r\n    }\r\n\r\n    public fluidColor = new BABYLON.Color3(0.085, 0.6375, 0.765);\r\n\r\n    public density = 2;\r\n\r\n    public refractionStrength = 0.1;\r\n\r\n    public fresnelClamp = 1.0;\r\n\r\n    public specularPower = 250;\r\n\r\n    public minimumThickness = 0;\r\n\r\n    public dirLight: BABYLON.Vector3 = new BABYLON.Vector3(\r\n        -2,\r\n        -1,\r\n        1\r\n    ).normalize();\r\n\r\n    private _debugFeature: FluidRenderingDebug =\r\n        FluidRenderingDebug.DepthBlurredTexture;\r\n\r\n    public get debugFeature() {\r\n        return this._debugFeature;\r\n    }\r\n\r\n    public set debugFeature(feature: FluidRenderingDebug) {\r\n        if (this._debugFeature === feature) {\r\n            return;\r\n        }\r\n\r\n        this._needInitialization = true;\r\n        this._debugFeature = feature;\r\n    }\r\n\r\n    private _debug = false;\r\n\r\n    public get debug() {\r\n        return this._debug;\r\n    }\r\n\r\n    public set debug(debug: boolean) {\r\n        if (this._debug === debug) {\r\n            return;\r\n        }\r\n\r\n        this._debug = debug;\r\n        this._needInitialization = true;\r\n    }\r\n\r\n    private _enableBlurDepth = true;\r\n\r\n    public get enableBlurDepth() {\r\n        return this._enableBlurDepth;\r\n    }\r\n\r\n    public set enableBlurDepth(enable: boolean) {\r\n        if (this._enableBlurDepth === enable) {\r\n            return;\r\n        }\r\n\r\n        this._enableBlurDepth = enable;\r\n        this._needInitialization = true;\r\n    }\r\n\r\n    private _blurDepthSizeDivisor = 1;\r\n\r\n    public get blurDepthSizeDivisor() {\r\n        return this._blurDepthSizeDivisor;\r\n    }\r\n\r\n    public set blurDepthSizeDivisor(scale: number) {\r\n        if (this._blurDepthSizeDivisor === scale) {\r\n            return;\r\n        }\r\n\r\n        this._blurDepthSizeDivisor = scale;\r\n        this._needInitialization = true;\r\n    }\r\n\r\n    private _blurDepthFilterSize = 7;\r\n\r\n    public get blurDepthFilterSize() {\r\n        return this._blurDepthFilterSize;\r\n    }\r\n\r\n    public set blurDepthFilterSize(filterSize: number) {\r\n        if (this._blurDepthFilterSize === filterSize) {\r\n            return;\r\n        }\r\n\r\n        this._blurDepthFilterSize = filterSize;\r\n        this._setBlurParameters();\r\n    }\r\n\r\n    private _blurDepthNumIterations = 3;\r\n\r\n    public get blurDepthNumIterations() {\r\n        return this._blurDepthNumIterations;\r\n    }\r\n\r\n    public set blurDepthNumIterations(numIterations: number) {\r\n        if (this._blurDepthNumIterations === numIterations) {\r\n            return;\r\n        }\r\n\r\n        this._blurDepthNumIterations = numIterations;\r\n        this._setBlurParameters();\r\n    }\r\n\r\n    private _blurDepthMaxFilterSize = 100;\r\n\r\n    public get blurDepthMaxFilterSize() {\r\n        return this._blurDepthMaxFilterSize;\r\n    }\r\n\r\n    public set blurDepthMaxFilterSize(maxFilterSize: number) {\r\n        if (this._blurDepthMaxFilterSize === maxFilterSize) {\r\n            return;\r\n        }\r\n\r\n        this._blurDepthMaxFilterSize = maxFilterSize;\r\n        this._setBlurParameters();\r\n    }\r\n\r\n    private _blurDepthDepthScale = 10;\r\n\r\n    public get blurDepthDepthScale() {\r\n        return this._blurDepthDepthScale;\r\n    }\r\n\r\n    public set blurDepthDepthScale(scale: number) {\r\n        if (this._blurDepthDepthScale === scale) {\r\n            return;\r\n        }\r\n\r\n        this._blurDepthDepthScale = scale;\r\n        this._setBlurParameters();\r\n    }\r\n\r\n    private _enableBlurThickness = true;\r\n\r\n    public get enableBlurThickness() {\r\n        return this._enableBlurThickness;\r\n    }\r\n\r\n    public set enableBlurThickness(enable: boolean) {\r\n        if (this._enableBlurThickness === enable) {\r\n            return;\r\n        }\r\n\r\n        this._enableBlurThickness = enable;\r\n        this._needInitialization = true;\r\n    }\r\n\r\n    private _blurThicknessSizeDivisor = 1;\r\n\r\n    public get blurThicknessSizeDivisor() {\r\n        return this._blurThicknessSizeDivisor;\r\n    }\r\n\r\n    public set blurThicknessSizeDivisor(scale: number) {\r\n        if (this._blurThicknessSizeDivisor === scale) {\r\n            return;\r\n        }\r\n\r\n        this._blurThicknessSizeDivisor = scale;\r\n        this._needInitialization = true;\r\n    }\r\n\r\n    private _blurThicknessFilterSize = 5;\r\n\r\n    public get blurThicknessFilterSize() {\r\n        return this._blurThicknessFilterSize;\r\n    }\r\n\r\n    public set blurThicknessFilterSize(filterSize: number) {\r\n        if (this._blurThicknessFilterSize === filterSize) {\r\n            return;\r\n        }\r\n\r\n        this._blurThicknessFilterSize = filterSize;\r\n        this._setBlurParameters();\r\n    }\r\n\r\n    private _blurThicknessNumIterations = 1;\r\n\r\n    public get blurThicknessNumIterations() {\r\n        return this._blurThicknessNumIterations;\r\n    }\r\n\r\n    public set blurThicknessNumIterations(numIterations: number) {\r\n        if (this._blurThicknessNumIterations === numIterations) {\r\n            return;\r\n        }\r\n\r\n        this._blurThicknessNumIterations = numIterations;\r\n        this._setBlurParameters();\r\n    }\r\n\r\n    private _useFixedThickness = false;\r\n\r\n    public get useFixedThickness() {\r\n        return this._useFixedThickness;\r\n    }\r\n\r\n    public set useFixedThickness(use: boolean) {\r\n        if (this._useFixedThickness === use) {\r\n            return;\r\n        }\r\n\r\n        this._useFixedThickness = use;\r\n        this._needInitialization = true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _bgDepthTexture: BABYLON.Nullable<BABYLON.InternalTexture>;\r\n\r\n    public onUseVelocityChanged =\r\n        new BABYLON.Observable<FluidRenderingTargetRenderer>();\r\n\r\n    private _useVelocity = false;\r\n\r\n    public get useVelocity() {\r\n        return this._useVelocity;\r\n    }\r\n\r\n    public set useVelocity(use: boolean) {\r\n        if (this._useVelocity === use) {\r\n            return;\r\n        }\r\n\r\n        this._useVelocity = use;\r\n        this._needInitialization = true;\r\n        this.onUseVelocityChanged.notifyObservers(this);\r\n    }\r\n\r\n    private _depthMapSize: BABYLON.Nullable<number> = null;\r\n\r\n    public get depthMapSize() {\r\n        return this._depthMapSize;\r\n    }\r\n\r\n    public set depthMapSize(size: BABYLON.Nullable<number>) {\r\n        if (this._depthMapSize === size) {\r\n            return;\r\n        }\r\n\r\n        this._depthMapSize = size;\r\n        this._needInitialization = true;\r\n    }\r\n\r\n    private _thicknessMapSize: BABYLON.Nullable<number> = null;\r\n\r\n    public get thicknessMapSize() {\r\n        return this._thicknessMapSize;\r\n    }\r\n\r\n    public set thicknessMapSize(size: BABYLON.Nullable<number>) {\r\n        if (this._thicknessMapSize === size) {\r\n            return;\r\n        }\r\n\r\n        this._thicknessMapSize = size;\r\n        this._needInitialization = true;\r\n    }\r\n\r\n    private _diffuseMapSize: BABYLON.Nullable<number> = null;\r\n\r\n    public get diffuseMapSize() {\r\n        return this._diffuseMapSize;\r\n    }\r\n\r\n    public set diffuseMapSize(size: BABYLON.Nullable<number>) {\r\n        if (this._diffuseMapSize === size) {\r\n            return;\r\n        }\r\n\r\n        this._diffuseMapSize = size;\r\n        this._needInitialization = true;\r\n    }\r\n\r\n    // Note: changing this value does not work because depth/stencil textures can't be created with MSAA yet (see https://github.com/BabylonJS/Babylon.js/issues/12444)\r\n    private _samples = 1;\r\n\r\n    public get samples() {\r\n        return this._samples;\r\n    }\r\n\r\n    public set samples(samples: number) {\r\n        if (this._samples === samples) {\r\n            return;\r\n        }\r\n\r\n        this._samples = samples;\r\n        this._needInitialization = true;\r\n    }\r\n\r\n    public get camera() {\r\n        return this._camera;\r\n    }\r\n\r\n    /** @hidden */\r\n    public get renderPostProcess() {\r\n        return this._renderPostProcess;\r\n    }\r\n\r\n    /** @hidden */\r\n    public get depthRenderTarget() {\r\n        return this._depthRenderTarget;\r\n    }\r\n\r\n    /** @hidden */\r\n    public get thicknessRenderTarget() {\r\n        return this._thicknessRenderTarget;\r\n    }\r\n\r\n    /** @hidden */\r\n    public get diffuseRenderTarget() {\r\n        return this._diffuseRenderTarget;\r\n    }\r\n\r\n    constructor(scene: BABYLON.Scene, camera?: BABYLON.Camera) {\r\n        this._scene = scene;\r\n        this._engine = scene.getEngine();\r\n        this._camera = camera ?? scene.activeCamera;\r\n        this._needInitialization = true;\r\n        this._bgDepthTexture = null;\r\n\r\n        this._invProjectionMatrix = new BABYLON.Matrix();\r\n        this._depthClearColor = new BABYLON.Color4(1e6, 1e6, 1e6, 1);\r\n        this._thicknessClearColor = new BABYLON.Color4(0, 0, 0, 1);\r\n\r\n        this._depthRenderTarget = null;\r\n        this._diffuseRenderTarget = null;\r\n        this._thicknessRenderTarget = null;\r\n\r\n        this._renderPostProcess = null;\r\n    }\r\n\r\n    public initialize(): void {\r\n        this.dispose();\r\n\r\n        this._needInitialization = false;\r\n\r\n        const depthWidth = this._depthMapSize ?? this._engine.getRenderWidth();\r\n        const depthHeight =\r\n            this._depthMapSize !== null\r\n                ? Math.round(\r\n                      (this._depthMapSize * this._engine.getRenderHeight()) /\r\n                          this._engine.getRenderWidth()\r\n                  )\r\n                : this._engine.getRenderHeight();\r\n\r\n        this._depthRenderTarget = new FluidRenderingRenderTarget(\r\n            \"Depth\",\r\n            this._scene,\r\n            depthWidth,\r\n            depthHeight,\r\n            depthWidth,\r\n            depthHeight,\r\n            BABYLON.Constants.TEXTURETYPE_FLOAT,\r\n            BABYLON.Constants.TEXTUREFORMAT_RG,\r\n            BABYLON.Constants.TEXTURETYPE_FLOAT,\r\n            BABYLON.Constants.TEXTUREFORMAT_RG,\r\n            false,\r\n            this._camera,\r\n            true,\r\n            this._samples\r\n        );\r\n\r\n        this._initializeRenderTarget(this._depthRenderTarget);\r\n\r\n        if (this.generateDiffuseTexture) {\r\n            const diffuseWidth =\r\n                this._diffuseMapSize ?? this._engine.getRenderWidth();\r\n            const diffuseHeight =\r\n                this._diffuseMapSize !== null\r\n                    ? Math.round(\r\n                          (this._diffuseMapSize *\r\n                              this._engine.getRenderHeight()) /\r\n                              this._engine.getRenderWidth()\r\n                      )\r\n                    : this._engine.getRenderHeight();\r\n\r\n            this._diffuseRenderTarget = new FluidRenderingRenderTarget(\r\n                \"Diffuse\",\r\n                this._scene,\r\n                diffuseWidth,\r\n                diffuseHeight,\r\n                0,\r\n                0,\r\n                BABYLON.Constants.TEXTURETYPE_UNSIGNED_BYTE,\r\n                BABYLON.Constants.TEXTUREFORMAT_RGBA,\r\n                BABYLON.Constants.TEXTURETYPE_UNSIGNED_BYTE,\r\n                BABYLON.Constants.TEXTUREFORMAT_RGBA,\r\n                true,\r\n                this._camera,\r\n                true,\r\n                this._samples\r\n            );\r\n\r\n            this._initializeRenderTarget(this._diffuseRenderTarget);\r\n        }\r\n\r\n        const thicknessWidth =\r\n            this._thicknessMapSize ?? this._engine.getRenderWidth();\r\n        const thicknessHeight =\r\n            this._thicknessMapSize !== null\r\n                ? Math.round(\r\n                      (this._thicknessMapSize *\r\n                          this._engine.getRenderHeight()) /\r\n                          this._engine.getRenderWidth()\r\n                  )\r\n                : this._engine.getRenderHeight();\r\n\r\n        if (!this._useFixedThickness) {\r\n            this._thicknessRenderTarget = new FluidRenderingRenderTarget(\r\n                \"Thickness\",\r\n                this._scene,\r\n                thicknessWidth,\r\n                thicknessHeight,\r\n                thicknessWidth,\r\n                thicknessHeight,\r\n                BABYLON.Constants.TEXTURETYPE_HALF_FLOAT,\r\n                BABYLON.Constants.TEXTUREFORMAT_R,\r\n                BABYLON.Constants.TEXTURETYPE_HALF_FLOAT,\r\n                BABYLON.Constants.TEXTUREFORMAT_R,\r\n                true,\r\n                this._camera,\r\n                false,\r\n                this._samples\r\n            );\r\n\r\n            this._initializeRenderTarget(this._thicknessRenderTarget);\r\n        }\r\n\r\n        this._createLiquidRenderingPostProcess();\r\n    }\r\n\r\n    protected _setBlurParameters(\r\n        renderTarget: BABYLON.Nullable<FluidRenderingRenderTarget> = null\r\n    ): void {\r\n        if (renderTarget === null || renderTarget === this._depthRenderTarget) {\r\n            this._setBlurDepthParameters();\r\n        }\r\n        if (\r\n            renderTarget === null ||\r\n            renderTarget === this._thicknessRenderTarget\r\n        ) {\r\n            this._setBlurThicknessParameters();\r\n        }\r\n    }\r\n\r\n    protected _setBlurDepthParameters(): void {\r\n        if (!this._depthRenderTarget) {\r\n            return;\r\n        }\r\n        this._depthRenderTarget.blurFilterSize = this.blurDepthFilterSize;\r\n        this._depthRenderTarget.blurMaxFilterSize = this.blurDepthMaxFilterSize;\r\n        this._depthRenderTarget.blurNumIterations = this.blurDepthNumIterations;\r\n        this._depthRenderTarget.blurDepthScale = this.blurDepthDepthScale;\r\n    }\r\n\r\n    protected _setBlurThicknessParameters(): void {\r\n        if (!this._thicknessRenderTarget) {\r\n            return;\r\n        }\r\n        this._thicknessRenderTarget.blurFilterSize =\r\n            this.blurThicknessFilterSize;\r\n        this._thicknessRenderTarget.blurNumIterations =\r\n            this.blurThicknessNumIterations;\r\n    }\r\n\r\n    protected _initializeRenderTarget(\r\n        renderTarget: FluidRenderingRenderTarget\r\n    ): void {\r\n        if (renderTarget !== this._diffuseRenderTarget) {\r\n            renderTarget.enableBlur =\r\n                renderTarget === this._depthRenderTarget\r\n                    ? this.enableBlurDepth\r\n                    : this.enableBlurThickness;\r\n            renderTarget.blurSizeDivisor =\r\n                renderTarget === this._depthRenderTarget\r\n                    ? this.blurDepthSizeDivisor\r\n                    : this.blurThicknessSizeDivisor;\r\n        }\r\n\r\n        this._setBlurParameters(renderTarget);\r\n\r\n        renderTarget.initialize();\r\n    }\r\n\r\n    protected _createLiquidRenderingPostProcess(): void {\r\n        const engine = this._scene.getEngine();\r\n\r\n        const uniformNames = [\r\n            \"viewMatrix\",\r\n            \"projectionMatrix\",\r\n            \"invProjectionMatrix\",\r\n            \"texelSize\",\r\n            \"dirLight\",\r\n            \"cameraFar\",\r\n            \"density\",\r\n            \"refractionStrength\",\r\n            \"fresnelClamp\",\r\n            \"specularPower\",\r\n        ];\r\n        const samplerNames = [\"depthSampler\", \"reflectionSampler\"];\r\n        const defines = [];\r\n\r\n        this.dispose(true);\r\n\r\n        if (!this._camera) {\r\n            return;\r\n        }\r\n\r\n        const texture = this._depthRenderTarget!.enableBlur\r\n            ? this._depthRenderTarget!.textureBlur!\r\n            : this._depthRenderTarget!.texture!;\r\n        const texelSize = new BABYLON.Vector2(\r\n            1 / texture.getSize().width,\r\n            1 / texture.getSize().height\r\n        );\r\n\r\n        if (this._diffuseRenderTarget) {\r\n            samplerNames.push(\"diffuseSampler\");\r\n            defines.push(\"#define FLUIDRENDERING_DIFFUSETEXTURE\");\r\n        } else {\r\n            uniformNames.push(\"diffuseColor\");\r\n        }\r\n\r\n        if (this._useVelocity) {\r\n            samplerNames.push(\"velocitySampler\");\r\n            defines.push(\"#define FLUIDRENDERING_VELOCITY\");\r\n        }\r\n\r\n        if (this._useFixedThickness) {\r\n            uniformNames.push(\"thickness\");\r\n            samplerNames.push(\"bgDepthSampler\");\r\n            defines.push(\"#define FLUIDRENDERING_FIXED_THICKNESS\");\r\n        } else {\r\n            uniformNames.push(\"minimumThickness\");\r\n            samplerNames.push(\"thicknessSampler\");\r\n        }\r\n\r\n        if (this._debug) {\r\n            defines.push(\"#define FLUIDRENDERING_DEBUG\");\r\n            if (this._debugFeature === FluidRenderingDebug.Normals) {\r\n                defines.push(\"#define FLUIDRENDERING_DEBUG_SHOWNORMAL\");\r\n            } else if (\r\n                this._debugFeature === FluidRenderingDebug.DiffuseRendering\r\n            ) {\r\n                defines.push(\"#define FLUIDRENDERING_DEBUG_DIFFUSERENDERING\");\r\n            } else {\r\n                defines.push(\"#define FLUIDRENDERING_DEBUG_TEXTURE\");\r\n                samplerNames.push(\"debugSampler\");\r\n                if (\r\n                    this._debugFeature === FluidRenderingDebug.DepthTexture ||\r\n                    this._debugFeature ===\r\n                        FluidRenderingDebug.DepthBlurredTexture\r\n                ) {\r\n                    defines.push(\"#define FLUIDRENDERING_DEBUG_DEPTH\");\r\n                }\r\n            }\r\n        }\r\n\r\n        this._renderPostProcess = new BABYLON.PostProcess(\r\n            \"FluidRendering\",\r\n            \"renderFluid\",\r\n            uniformNames,\r\n            samplerNames,\r\n            1,\r\n            null,\r\n            BABYLON.Constants.TEXTURE_BILINEAR_SAMPLINGMODE,\r\n            engine,\r\n            false,\r\n            null,\r\n            BABYLON.Constants.TEXTURETYPE_UNSIGNED_BYTE,\r\n            undefined,\r\n            undefined,\r\n            true\r\n        );\r\n        this._renderPostProcess.updateEffect = function (\r\n            defines: BABYLON.Nullable<string> = null,\r\n            uniforms: BABYLON.Nullable<string[]> = null,\r\n            samplers: BABYLON.Nullable<string[]> = null,\r\n            indexParameters?: any,\r\n            onCompiled?: (effect: BABYLON.Effect) => void,\r\n            onError?: (effect: BABYLON.Effect, errors: string) => void,\r\n            vertexUrl?: string,\r\n            fragmentUrl?: string\r\n        ) {\r\n            (this as any)._postProcessDefines = defines;\r\n            (this as any)._drawWrapper.effect = (\r\n                this as any\r\n            )._engine.createEffect(\r\n                {\r\n                    vertex: vertexUrl ?? (this as any)._vertexUrl,\r\n                    fragment: fragmentUrl ?? (this as any)._fragmentUrl,\r\n                },\r\n                [\"position\"],\r\n                uniforms || (this as any)._parameters,\r\n                samplers || (this as any)._samplers,\r\n                defines !== null ? defines : \"\",\r\n                undefined,\r\n                onCompiled,\r\n                onError,\r\n                indexParameters || (this as any)._indexParameters,\r\n                engine.isWebGPU\r\n                    ? BABYLON.ShaderLanguage.WGSL\r\n                    : BABYLON.ShaderLanguage.GLSL\r\n            );\r\n        };\r\n        this._renderPostProcess.updateEffect(defines.join(\"\\n\"));\r\n\r\n        this._renderPostProcess.samples = this._samples;\r\n        this._renderPostProcess.onApplyObservable.add((effect) => {\r\n            this._invProjectionMatrix.copyFrom(\r\n                this._scene.getProjectionMatrix()\r\n            );\r\n            this._invProjectionMatrix.invert();\r\n\r\n            if (engine.isWebGPU) {\r\n                effect.setTextureSampler(\r\n                    \"textureSamplerSampler\",\r\n                    this._renderPostProcess!.inputTexture.texture\r\n                );\r\n            }\r\n\r\n            if (!this._depthRenderTarget!.enableBlur) {\r\n                effect.setTexture(\r\n                    \"depthSampler\",\r\n                    this._depthRenderTarget!.texture\r\n                );\r\n                if (engine.isWebGPU) {\r\n                    effect.setTextureSampler(\r\n                        \"depthSamplerSampler\",\r\n                        this._depthRenderTarget!.texture?.getInternalTexture() ??\r\n                            null\r\n                    );\r\n                }\r\n            } else {\r\n                effect.setTexture(\r\n                    \"depthSampler\",\r\n                    this._depthRenderTarget!.textureBlur\r\n                );\r\n                if (engine.isWebGPU) {\r\n                    effect.setTextureSampler(\r\n                        \"depthSamplerSampler\",\r\n                        this._depthRenderTarget!.textureBlur?.getInternalTexture() ??\r\n                            null\r\n                    );\r\n                }\r\n            }\r\n            if (this._diffuseRenderTarget) {\r\n                if (!this._diffuseRenderTarget.enableBlur) {\r\n                    effect.setTexture(\r\n                        \"diffuseSampler\",\r\n                        this._diffuseRenderTarget.texture\r\n                    );\r\n                    if (engine.isWebGPU) {\r\n                        effect.setTextureSampler(\r\n                            \"diffuseSamplerSampler\",\r\n                            this._diffuseRenderTarget.texture?.getInternalTexture() ??\r\n                                null\r\n                        );\r\n                    }\r\n                } else {\r\n                    effect.setTexture(\r\n                        \"diffuseSampler\",\r\n                        this._diffuseRenderTarget.textureBlur\r\n                    );\r\n                    if (engine.isWebGPU) {\r\n                        effect.setTextureSampler(\r\n                            \"diffuseSamplerSampler\",\r\n                            this._diffuseRenderTarget.textureBlur?.getInternalTexture() ??\r\n                                null\r\n                        );\r\n                    }\r\n                }\r\n            } else {\r\n                effect.setColor3(\"diffuseColor\", this.fluidColor);\r\n            }\r\n            if (this._useFixedThickness) {\r\n                effect.setFloat(\"thickness\", this.minimumThickness);\r\n                effect._bindTexture(\"bgDepthSampler\", this._bgDepthTexture);\r\n                if (engine.isWebGPU) {\r\n                    effect.setTextureSampler(\r\n                        \"bgDepthSamplerSampler\",\r\n                        this._bgDepthTexture ?? null\r\n                    );\r\n                }\r\n            } else {\r\n                if (!this._thicknessRenderTarget!.enableBlur) {\r\n                    effect.setTexture(\r\n                        \"thicknessSampler\",\r\n                        this._thicknessRenderTarget!.texture\r\n                    );\r\n                    if (engine.isWebGPU) {\r\n                        effect.setTextureSampler(\r\n                            \"thicknessSamplerSampler\",\r\n                            this._thicknessRenderTarget!.texture?.getInternalTexture() ??\r\n                                null\r\n                        );\r\n                    }\r\n                } else {\r\n                    effect.setTexture(\r\n                        \"thicknessSampler\",\r\n                        this._thicknessRenderTarget!.textureBlur\r\n                    );\r\n                    if (engine.isWebGPU) {\r\n                        effect.setTextureSampler(\r\n                            \"thicknessSamplerSampler\",\r\n                            this._thicknessRenderTarget!.textureBlur?.getInternalTexture() ??\r\n                                null\r\n                        );\r\n                    }\r\n                }\r\n                effect.setFloat(\"minimumThickness\", this.minimumThickness);\r\n            }\r\n\r\n            effect.setTexture(\r\n                \"reflectionSampler\",\r\n                this._scene.environmentTexture\r\n            );\r\n            if (engine.isWebGPU) {\r\n                effect.setTextureSampler(\r\n                    \"reflectionSamplerSampler\",\r\n                    this._scene.environmentTexture?.getInternalTexture() ?? null\r\n                );\r\n            }\r\n\r\n            effect.setMatrix(\"viewMatrix\", this._scene.getViewMatrix());\r\n            effect.setMatrix(\"invProjectionMatrix\", this._invProjectionMatrix);\r\n            effect.setMatrix(\r\n                \"projectionMatrix\",\r\n                this._scene.getProjectionMatrix()\r\n            );\r\n            effect.setVector2(\"texelSize\", texelSize);\r\n            effect.setFloat(\"density\", this.density);\r\n            effect.setFloat(\"refractionStrength\", this.refractionStrength);\r\n            effect.setFloat(\"fresnelClamp\", this.fresnelClamp);\r\n            effect.setFloat(\"specularPower\", this.specularPower);\r\n\r\n            effect.setVector3(\"dirLight\", this.dirLight);\r\n\r\n            effect.setFloat(\"cameraFar\", this._camera!.maxZ);\r\n\r\n            if (this._debug) {\r\n                let texture: BABYLON.Nullable<BABYLON.ThinTexture> = null;\r\n                switch (this._debugFeature) {\r\n                    case FluidRenderingDebug.DepthTexture:\r\n                        texture = this._depthRenderTarget!.texture;\r\n                        break;\r\n                    case FluidRenderingDebug.DepthBlurredTexture:\r\n                        texture = this._depthRenderTarget!.enableBlur\r\n                            ? this._depthRenderTarget!.textureBlur\r\n                            : this._depthRenderTarget!.texture;\r\n                        break;\r\n                    case FluidRenderingDebug.ThicknessTexture:\r\n                        texture = this._thicknessRenderTarget?.texture ?? null;\r\n                        break;\r\n                    case FluidRenderingDebug.ThicknessBlurredTexture:\r\n                        texture = this._thicknessRenderTarget?.enableBlur\r\n                            ? this._thicknessRenderTarget?.textureBlur ?? null\r\n                            : this._thicknessRenderTarget?.texture ?? null;\r\n                        break;\r\n                    case FluidRenderingDebug.DiffuseTexture:\r\n                        if (this._diffuseRenderTarget) {\r\n                            texture = this._diffuseRenderTarget.texture;\r\n                        }\r\n                        break;\r\n                }\r\n                if (this._debugFeature !== FluidRenderingDebug.Normals) {\r\n                    effect.setTexture(\"debugSampler\", texture);\r\n                    if (engine.isWebGPU) {\r\n                        effect.setTextureSampler(\r\n                            \"debugSamplerSampler\",\r\n                            texture?.getInternalTexture() ?? null\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public clearTargets(): void {\r\n        if (this._depthRenderTarget?.renderTarget) {\r\n            this._engine.bindFramebuffer(this._depthRenderTarget.renderTarget);\r\n            this._engine.clear(this._depthClearColor, true, true, false);\r\n            this._engine.unBindFramebuffer(\r\n                this._depthRenderTarget.renderTarget\r\n            );\r\n        }\r\n\r\n        if (this._diffuseRenderTarget?.renderTarget) {\r\n            this._engine.bindFramebuffer(\r\n                this._diffuseRenderTarget.renderTarget\r\n            );\r\n            this._engine.clear(this._thicknessClearColor, true, true, false);\r\n            this._engine.unBindFramebuffer(\r\n                this._diffuseRenderTarget.renderTarget\r\n            );\r\n        }\r\n\r\n        if (this._thicknessRenderTarget?.renderTarget) {\r\n            this._engine.bindFramebuffer(\r\n                this._thicknessRenderTarget.renderTarget\r\n            );\r\n            // we don't clear the depth buffer because it is the depth buffer that is coming from the scene and that we reuse in the thickness rendering pass\r\n            this._engine.clear(this._thicknessClearColor, true, false, false);\r\n            this._engine.unBindFramebuffer(\r\n                this._thicknessRenderTarget.renderTarget\r\n            );\r\n        }\r\n    }\r\n\r\n    public render(fluidObject: FluidRenderingObject): void {\r\n        if (this._needInitialization || !fluidObject.isReady()) {\r\n            return;\r\n        }\r\n\r\n        const currentRenderTarget = this._engine._currentRenderTarget;\r\n\r\n        this._engine.setState(false, undefined, undefined, undefined, true);\r\n        this._engine.setDepthBuffer(true);\r\n        this._engine.setDepthWrite(true);\r\n        this._engine.setAlphaMode(BABYLON.Constants.ALPHA_DISABLE);\r\n\r\n        // Render the particles in the depth texture\r\n        if (this._depthRenderTarget?.renderTarget) {\r\n            this._engine.bindFramebuffer(this._depthRenderTarget.renderTarget);\r\n\r\n            fluidObject.renderDepthTexture();\r\n\r\n            this._engine.unbindInstanceAttributes();\r\n            this._engine.unBindFramebuffer(\r\n                this._depthRenderTarget.renderTarget\r\n            );\r\n        }\r\n\r\n        // Render the particles in the diffuse texture\r\n        if (this._diffuseRenderTarget?.renderTarget) {\r\n            this._engine.bindFramebuffer(\r\n                this._diffuseRenderTarget.renderTarget\r\n            );\r\n\r\n            fluidObject.renderDiffuseTexture();\r\n\r\n            this._engine.unbindInstanceAttributes();\r\n            this._engine.unBindFramebuffer(\r\n                this._diffuseRenderTarget.renderTarget\r\n            );\r\n        }\r\n\r\n        // Render the particles in the thickness texture\r\n        if (this._thicknessRenderTarget?.renderTarget) {\r\n            this._engine.bindFramebuffer(\r\n                this._thicknessRenderTarget.renderTarget\r\n            );\r\n\r\n            fluidObject.renderThicknessTexture();\r\n\r\n            this._engine.unbindInstanceAttributes();\r\n            this._engine.unBindFramebuffer(\r\n                this._thicknessRenderTarget.renderTarget\r\n            );\r\n        }\r\n\r\n        // Run the blur post processes\r\n        this._depthRenderTarget?.applyBlurPostProcesses();\r\n        this._diffuseRenderTarget?.applyBlurPostProcesses();\r\n        this._thicknessRenderTarget?.applyBlurPostProcesses();\r\n\r\n        if (currentRenderTarget) {\r\n            this._engine.bindFramebuffer(currentRenderTarget);\r\n        }\r\n    }\r\n\r\n    public dispose(onlyPostProcesses = false): void {\r\n        if (!onlyPostProcesses) {\r\n            this._depthRenderTarget?.dispose();\r\n            this._depthRenderTarget = null;\r\n\r\n            this._diffuseRenderTarget?.dispose();\r\n            this._diffuseRenderTarget = null;\r\n\r\n            this._thicknessRenderTarget?.dispose();\r\n            this._thicknessRenderTarget = null;\r\n        }\r\n\r\n        if (this._renderPostProcess && this._camera) {\r\n            this._camera.detachPostProcess(this._renderPostProcess);\r\n        }\r\n        this._renderPostProcess?.dispose();\r\n        this._renderPostProcess = null;\r\n\r\n        this._needInitialization = false;\r\n    }\r\n}\r\n"],"names":["FluidRenderingRenderTarget","constructor","name","scene","width","height","blurTextureSizeX","blurTextureSizeY","textureType","textureFormat","blurTextureType","blurTextureFormat","useStandardBlur","camera","generateDepthBuffer","samples","enableBlur","blurSizeDivisor","blurFilterSize","_blurNumIterations","blurMaxFilterSize","blurDepthScale","particleSize","onDisposeObservable","this","_name","_scene","_camera","_engine","getEngine","_width","_height","_blurTextureSizeX","_blurTextureSizeY","_textureType","_textureFormat","_blurTextureType","_blurTextureFormat","_useStandardBlur","_generateDepthBuffer","_samples","_postProcessRunningIndex","_rt","_texture","_rtBlur","_textureBlurred","_blurPostProcesses","blurNumIterations","numIterations","blurX","blurY","Array","keys","map","elm","renderTarget","renderTargetBlur","texture","textureBlur","initialize","dispose","_createRenderTarget","rtBlur","textureBlurred","blurPostProcesses","_createBlurPostProcesses","applyBlurPostProcesses","postProcessManager","directRender","unBindFramebuffer","createRenderTargetTexture","generateMipMaps","type","format","samplingMode","generateStencilBuffer","renderTexture","wrapU","wrapV","anisotropicFilteringLevel","textureBlurSource","debugName","engine","targetSize","Math","floor","useBilinearFiltering","getCaps","textureFloatLinearFiltering","textureHalfFloatLinearFiltering","x","y","kernelBlurXPostprocess","undefined","externalTextureSamplerBinding","onApplyObservable","add","effect","setTexture","_bindTexture","inputTexture","setInt","setFloat2","onSizeChangedObservable","_textures","forEach","rt","_fixReusablePostProcess","kernelBlurYPostprocess","autoClear","uniforms","setFloat","_getProjectedParticleConstant","_getDepthThreshold","pp","isReusable","onActivateObservable","_currentRenderTextureInd","tan","fov","PI","hasObservers","notifyObservers","FluidRenderingDebug","FluidRenderingTargetRenderer","_generateDiffuseTexture","fluidColor","density","refractionStrength","fresnelClamp","specularPower","minimumThickness","dirLight","normalize","_debugFeature","DepthBlurredTexture","_debug","_enableBlurDepth","_blurDepthSizeDivisor","_blurDepthFilterSize","_blurDepthNumIterations","_blurDepthMaxFilterSize","_blurDepthDepthScale","_enableBlurThickness","_blurThicknessSizeDivisor","_blurThicknessFilterSize","_blurThicknessNumIterations","_useFixedThickness","onUseVelocityChanged","_useVelocity","_depthMapSize","_thicknessMapSize","_diffuseMapSize","activeCamera","_needInitialization","_bgDepthTexture","_invProjectionMatrix","_depthClearColor","_thicknessClearColor","_depthRenderTarget","_diffuseRenderTarget","_thicknessRenderTarget","_renderPostProcess","needInitialization","generateDiffuseTexture","generate","debugFeature","feature","debug","enableBlurDepth","enable","blurDepthSizeDivisor","scale","blurDepthFilterSize","filterSize","_setBlurParameters","blurDepthNumIterations","blurDepthMaxFilterSize","maxFilterSize","blurDepthDepthScale","enableBlurThickness","blurThicknessSizeDivisor","blurThicknessFilterSize","blurThicknessNumIterations","useFixedThickness","use","useVelocity","depthMapSize","size","thicknessMapSize","diffuseMapSize","renderPostProcess","depthRenderTarget","thicknessRenderTarget","diffuseRenderTarget","depthWidth","getRenderWidth","depthHeight","round","getRenderHeight","_initializeRenderTarget","diffuseWidth","diffuseHeight","thicknessWidth","thicknessHeight","_createLiquidRenderingPostProcess","_setBlurDepthParameters","_setBlurThicknessParameters","uniformNames","samplerNames","defines","texelSize","getSize","push","Normals","DiffuseRendering","DepthTexture","updateEffect","samplers","indexParameters","onCompiled","onError","vertexUrl","fragmentUrl","_postProcessDefines","_drawWrapper","createEffect","vertex","_vertexUrl","fragment","_fragmentUrl","_parameters","_samplers","_indexParameters","isWebGPU","join","copyFrom","getProjectionMatrix","invert","setTextureSampler","getInternalTexture","setColor3","environmentTexture","setMatrix","getViewMatrix","setVector2","setVector3","maxZ","ThicknessTexture","ThicknessBlurredTexture","DiffuseTexture","clearTargets","bindFramebuffer","clear","render","fluidObject","isReady","currentRenderTarget","_currentRenderTarget","setState","setDepthBuffer","setDepthWrite","setAlphaMode","renderDepthTexture","unbindInstanceAttributes","renderDiffuseTexture","renderThicknessTexture","onlyPostProcesses","detachPostProcess"],"sourceRoot":""}