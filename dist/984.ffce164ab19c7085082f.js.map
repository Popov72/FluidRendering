{"version":3,"file":"984.ffce164ab19c7085082f.js","mappings":"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","sources":["webpack://babylonjs-fluid-rendering/./src/scenes/FluidRenderer/fluidRenderingObject.ts","webpack://babylonjs-fluid-rendering/./src/scenes/FluidRenderer/fluidRenderingObjectVertexBuffer.ts"],"sourcesContent":["import * as BABYLON from \"@babylonjs/core\";\r\n\r\nexport abstract class FluidRenderingObject {\r\n    protected _scene: BABYLON.Scene;\r\n    protected _engine: BABYLON.Engine;\r\n    protected _effectsAreDirty: boolean;\r\n    protected _depthEffectWrapper: BABYLON.Nullable<BABYLON.EffectWrapper>;\r\n    protected _thicknessEffectWrapper: BABYLON.Nullable<BABYLON.EffectWrapper>;\r\n\r\n    public priority = 0;\r\n\r\n    protected _particleSize = 0.1;\r\n\r\n    public onParticleSizeChanged =\r\n        new BABYLON.Observable<FluidRenderingObject>();\r\n\r\n    public get particleSize() {\r\n        return this._particleSize;\r\n    }\r\n\r\n    public set particleSize(size: number) {\r\n        if (size === this._particleSize) {\r\n            return;\r\n        }\r\n\r\n        this._particleSize = size;\r\n        this.onParticleSizeChanged.notifyObservers(this);\r\n    }\r\n\r\n    public particleThicknessAlpha = 0.05;\r\n\r\n    public get useInstancing() {\r\n        return !this.indexBuffer;\r\n    }\r\n\r\n    private _useVelocity = false;\r\n\r\n    public get useVelocity() {\r\n        return this._useVelocity;\r\n    }\r\n\r\n    public set useVelocity(use: boolean) {\r\n        if (this._useVelocity === use || !this._hasVelocity()) {\r\n            return;\r\n        }\r\n\r\n        this._useVelocity = use;\r\n        this._effectsAreDirty = true;\r\n    }\r\n\r\n    private _hasVelocity() {\r\n        return !!this.vertexBuffers.velocity;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FluidRenderingObject\";\r\n    }\r\n\r\n    constructor(\r\n        scene: BABYLON.Scene,\r\n        public readonly vertexBuffers: { [key: string]: BABYLON.VertexBuffer },\r\n        public readonly indexBuffer: BABYLON.Nullable<BABYLON.DataBuffer>\r\n    ) {\r\n        this._scene = scene;\r\n        this._engine = scene.getEngine();\r\n        this._effectsAreDirty = true;\r\n        this._depthEffectWrapper = null;\r\n        this._thicknessEffectWrapper = null;\r\n    }\r\n\r\n    protected _createEffects(): void {\r\n        const uniformNames = [\"view\", \"projection\", \"particleRadius\", \"size\"];\r\n        const attributeNames = [\"position\", \"offset\"];\r\n        const defines: string[] = [];\r\n\r\n        this._effectsAreDirty = false;\r\n\r\n        if (this.useVelocity) {\r\n            attributeNames.push(\"velocity\");\r\n            defines.push(\"#define FLUIDRENDERING_VELOCITY\");\r\n        }\r\n\r\n        this._depthEffectWrapper = new BABYLON.EffectWrapper({\r\n            engine: this._engine,\r\n            useShaderStore: true,\r\n            vertexShader: \"fluidParticleDepth\",\r\n            fragmentShader: \"fluidParticleDepth\",\r\n            attributeNames,\r\n            uniformNames,\r\n            samplerNames: [],\r\n            defines,\r\n        });\r\n\r\n        uniformNames.push(\"particleAlpha\");\r\n\r\n        this._thicknessEffectWrapper = new BABYLON.EffectWrapper({\r\n            engine: this._engine,\r\n            useShaderStore: true,\r\n            vertexShader: \"fluidParticleThickness\",\r\n            fragmentShader: \"fluidParticleThickness\",\r\n            attributeNames: [\"position\", \"offset\"],\r\n            uniformNames,\r\n            samplerNames: [],\r\n        });\r\n    }\r\n\r\n    public isReady(): boolean {\r\n        if (this._effectsAreDirty) {\r\n            this._createEffects();\r\n        }\r\n\r\n        if (!this._depthEffectWrapper || !this._thicknessEffectWrapper) {\r\n            return false;\r\n        }\r\n\r\n        const depthEffect = this._depthEffectWrapper._drawWrapper.effect!;\r\n        const thicknessEffect =\r\n            this._thicknessEffectWrapper._drawWrapper.effect!;\r\n\r\n        return depthEffect.isReady() && thicknessEffect.isReady();\r\n    }\r\n\r\n    public numParticles(): number {\r\n        return 0;\r\n    }\r\n\r\n    public renderDepthTexture(): void {\r\n        const numParticles = this.numParticles();\r\n\r\n        if (!this._depthEffectWrapper || numParticles === 0) {\r\n            return;\r\n        }\r\n\r\n        const depthDrawWrapper = this._depthEffectWrapper._drawWrapper;\r\n        const depthEffect = depthDrawWrapper.effect!;\r\n\r\n        this._engine.enableEffect(depthDrawWrapper);\r\n        this._engine.bindBuffers(\r\n            this.vertexBuffers,\r\n            this.indexBuffer,\r\n            depthEffect\r\n        );\r\n\r\n        depthEffect.setMatrix(\"view\", this._scene.getViewMatrix());\r\n        depthEffect.setMatrix(\"projection\", this._scene.getProjectionMatrix());\r\n        depthEffect.setFloat2(\"size\", this._particleSize, this._particleSize);\r\n        depthEffect.setFloat(\"particleRadius\", this._particleSize / 2);\r\n\r\n        if (this.useInstancing) {\r\n            this._engine.drawArraysType(\r\n                BABYLON.Constants.MATERIAL_TriangleStripDrawMode,\r\n                0,\r\n                4,\r\n                numParticles\r\n            );\r\n        } else {\r\n            this._engine.drawElementsType(\r\n                BABYLON.Constants.MATERIAL_TriangleFillMode,\r\n                0,\r\n                numParticles\r\n            );\r\n        }\r\n    }\r\n\r\n    public renderThicknessTexture(): void {\r\n        const numParticles = this.numParticles();\r\n\r\n        if (!this._thicknessEffectWrapper || numParticles === 0) {\r\n            return;\r\n        }\r\n\r\n        const thicknessDrawWrapper = this._thicknessEffectWrapper._drawWrapper;\r\n        const thicknessEffect = thicknessDrawWrapper.effect!;\r\n\r\n        this._engine.setAlphaMode(BABYLON.Constants.ALPHA_ONEONE);\r\n        this._engine.setDepthWrite(false);\r\n\r\n        this._engine.enableEffect(thicknessDrawWrapper);\r\n        this._engine.bindBuffers(\r\n            this.vertexBuffers,\r\n            this.indexBuffer,\r\n            thicknessEffect\r\n        );\r\n\r\n        thicknessEffect.setMatrix(\"view\", this._scene.getViewMatrix());\r\n        thicknessEffect.setMatrix(\r\n            \"projection\",\r\n            this._scene.getProjectionMatrix()\r\n        );\r\n        thicknessEffect.setFloat(\"particleAlpha\", this.particleThicknessAlpha);\r\n        thicknessEffect.setFloat2(\r\n            \"size\",\r\n            this._particleSize,\r\n            this._particleSize\r\n        );\r\n\r\n        if (this.useInstancing) {\r\n            this._engine.drawArraysType(\r\n                BABYLON.Constants.MATERIAL_TriangleStripDrawMode,\r\n                0,\r\n                4,\r\n                numParticles\r\n            );\r\n        } else {\r\n            this._engine.drawElementsType(\r\n                BABYLON.Constants.MATERIAL_TriangleFillMode,\r\n                0,\r\n                numParticles\r\n            );\r\n        }\r\n\r\n        this._engine.setDepthWrite(true);\r\n        this._engine.setAlphaMode(BABYLON.Constants.ALPHA_DISABLE);\r\n    }\r\n\r\n    public renderDiffuseTexture(): void {\r\n        // do nothing by default\r\n    }\r\n\r\n    public dispose(): void {\r\n        this._depthEffectWrapper?.dispose();\r\n        this._thicknessEffectWrapper?.dispose();\r\n    }\r\n}\r\n","import * as BABYLON from \"@babylonjs/core\";\r\n\r\nimport { FluidRenderingObject } from \"./fluidRenderingObject\";\r\n\r\nexport class FluidRenderingObjectVertexBuffer extends FluidRenderingObject {\r\n    private _numParticles: number;\r\n    private _disposeVBOffset: boolean;\r\n    private _diffuseEffectWrapper: BABYLON.Nullable<BABYLON.EffectWrapper>;\r\n\r\n    public getClassName(): string {\r\n        return \"FluidRenderingObjectVertexBuffer\";\r\n    }\r\n\r\n    constructor(\r\n        scene: BABYLON.Scene,\r\n        vertexBuffers: { [key: string]: BABYLON.VertexBuffer },\r\n        numParticles: number\r\n    ) {\r\n        super(scene, vertexBuffers, null);\r\n\r\n        this._numParticles = numParticles;\r\n        this._disposeVBOffset = false;\r\n        this._diffuseEffectWrapper = null;\r\n\r\n        if (!vertexBuffers[\"offset\"]) {\r\n            vertexBuffers[\"offset\"] = new BABYLON.VertexBuffer(\r\n                this._engine,\r\n                [0, 0, 1, 0, 0, 1, 1, 1],\r\n                \"offset\",\r\n                false,\r\n                false,\r\n                2\r\n            );\r\n            this._disposeVBOffset = true;\r\n        }\r\n    }\r\n\r\n    protected _createEffects(): void {\r\n        super._createEffects();\r\n\r\n        const uniformNames = [\"view\", \"projection\", \"size\"];\r\n        const attributeNames = [\"position\", \"offset\", \"color\"];\r\n\r\n        this._diffuseEffectWrapper = new BABYLON.EffectWrapper({\r\n            engine: this._engine,\r\n            useShaderStore: true,\r\n            vertexShader: \"fluidParticleDiffuse\",\r\n            fragmentShader: \"fluidParticleDiffuse\",\r\n            attributeNames,\r\n            uniformNames,\r\n            samplerNames: [],\r\n        });\r\n    }\r\n\r\n    public isReady(): boolean {\r\n        return (\r\n            super.isReady() &&\r\n            (this._diffuseEffectWrapper?.effect!.isReady() ?? false)\r\n        );\r\n    }\r\n\r\n    public numParticles(): number {\r\n        return this._numParticles;\r\n    }\r\n\r\n    public setNumParticles(num: number) {\r\n        this._numParticles = num;\r\n    }\r\n\r\n    public renderDiffuseTexture(): void {\r\n        const numParticles = this.numParticles();\r\n\r\n        if (!this._diffuseEffectWrapper || numParticles === 0) {\r\n            return;\r\n        }\r\n\r\n        const diffuseDrawWrapper = this._diffuseEffectWrapper._drawWrapper;\r\n        const diffuseEffect = diffuseDrawWrapper.effect!;\r\n\r\n        this._engine.enableEffect(diffuseDrawWrapper);\r\n        this._engine.bindBuffers(\r\n            this.vertexBuffers,\r\n            this.indexBuffer,\r\n            diffuseEffect\r\n        );\r\n\r\n        diffuseEffect.setMatrix(\"view\", this._scene.getViewMatrix());\r\n        diffuseEffect.setMatrix(\r\n            \"projection\",\r\n            this._scene.getProjectionMatrix()\r\n        );\r\n        if (this._particleSize !== null) {\r\n            diffuseEffect.setFloat2(\r\n                \"size\",\r\n                this._particleSize,\r\n                this._particleSize\r\n            );\r\n        }\r\n\r\n        if (this.useInstancing) {\r\n            this._engine.drawArraysType(\r\n                BABYLON.Constants.MATERIAL_TriangleStripDrawMode,\r\n                0,\r\n                4,\r\n                numParticles\r\n            );\r\n        } else {\r\n            this._engine.drawElementsType(\r\n                BABYLON.Constants.MATERIAL_TriangleFillMode,\r\n                0,\r\n                numParticles\r\n            );\r\n        }\r\n    }\r\n\r\n    public dispose(): void {\r\n        super.dispose();\r\n\r\n        this._diffuseEffectWrapper?.dispose();\r\n\r\n        if (this._disposeVBOffset) {\r\n            this.vertexBuffers[\"offset\"].dispose();\r\n        }\r\n    }\r\n}\r\n"],"names":["FluidRenderingObject","constructor","scene","vertexBuffers","indexBuffer","priority","_particleSize","onParticleSizeChanged","particleThicknessAlpha","_useVelocity","this","_scene","_engine","getEngine","_effectsAreDirty","_depthEffectWrapper","_thicknessEffectWrapper","particleSize","size","notifyObservers","useInstancing","useVelocity","use","_hasVelocity","velocity","getClassName","_createEffects","uniformNames","attributeNames","defines","push","engine","useShaderStore","vertexShader","fragmentShader","samplerNames","isReady","depthEffect","_drawWrapper","effect","thicknessEffect","numParticles","renderDepthTexture","depthDrawWrapper","enableEffect","bindBuffers","setMatrix","getViewMatrix","getProjectionMatrix","setFloat2","setFloat","drawArraysType","drawElementsType","renderThicknessTexture","thicknessDrawWrapper","setAlphaMode","setDepthWrite","renderDiffuseTexture","dispose","FluidRenderingObjectVertexBuffer","super","_numParticles","_disposeVBOffset","_diffuseEffectWrapper","setNumParticles","num","diffuseDrawWrapper","diffuseEffect"],"sourceRoot":""}