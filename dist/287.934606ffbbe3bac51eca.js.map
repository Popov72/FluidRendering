{"version":3,"file":"287.934606ffbbe3bac51eca.js","mappings":"gKAIO,MAAMA,EAgBTC,YAAYC,EAAiBC,GACzBC,KAAKC,SAAWH,EAChBE,KAAKE,WAAa,EAAIH,EACtBC,KAAKG,WAAa,IAAIC,WAAWJ,KAAKE,WAAa,GACnDF,KAAKK,aAAe,IAAID,WAAWL,GACnCC,KAAKM,UAAY,IAAIF,WAAWL,GAChCC,KAAKO,WAAa,EAdXC,gBACP,OAAOR,KAAKO,WAGLE,eACP,OAAOT,KAAKM,UAYTI,WAAWC,EAAYC,EAAYC,GACtC,MAAMC,EAAU,SAALH,EAAuB,UAALC,EAAwB,UAALC,EAEhD,OAAOE,KAAKC,IAAIF,GAAKd,KAAKE,WAGvBe,SAASC,GACZ,OAAOH,KAAKI,MAAMD,EAAQlB,KAAKC,UAG5BmB,QAAQC,EAA8BC,GACzC,OAAOtB,KAAKU,WACRV,KAAKiB,SAASI,EAAI,EAAIC,IACtBtB,KAAKiB,SAASI,EAAI,EAAIC,EAAK,IAC3BtB,KAAKiB,SAASI,EAAI,EAAIC,EAAK,KAI5BC,OAAOF,EAA8BG,GACxCA,EAAcA,MAAAA,EAAAA,EAAeH,EAAII,OAAS,EAE1C,MAAMC,EAAaX,KAAKY,IAAIH,EAAaxB,KAAKK,aAAaoB,QAG3DzB,KAAKG,WAAWyB,KAAK,GACrB5B,KAAKK,aAAauB,KAAK,GAEvB,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAYG,IAAK,CACjC,MAAMf,EAAId,KAAKoB,QAAQC,EAAKQ,GAC5B7B,KAAKG,WAAWW,KAIpB,IAAIgB,EAAQ,EACZ,IAAK,IAAID,EAAI,EAAGA,EAAI7B,KAAKE,WAAY2B,IACjCC,GAAS9B,KAAKG,WAAW0B,GACzB7B,KAAKG,WAAW0B,GAAKC,EAEzB9B,KAAKG,WAAWH,KAAKE,YAAc4B,EAGnC,IAAK,IAAID,EAAI,EAAGA,EAAIH,EAAYG,IAAK,CACjC,MAAMf,EAAId,KAAKoB,QAAQC,EAAKQ,GAC5B7B,KAAKG,WAAWW,KAChBd,KAAKK,aAAaL,KAAKG,WAAWW,IAAMe,GAIzCE,MAAMV,EAA8BC,EAAYU,GACnD,MAAMC,EAAKjC,KAAKiB,SAASI,EAAI,EAAIC,GAAMU,GACjCE,EAAKlC,KAAKiB,SAASI,EAAI,EAAIC,EAAK,GAAKU,GACrCG,EAAKnC,KAAKiB,SAASI,EAAI,EAAIC,EAAK,GAAKU,GAErCI,EAAKpC,KAAKiB,SAASI,EAAI,EAAIC,GAAMU,GACjCK,EAAKrC,KAAKiB,SAASI,EAAI,EAAIC,EAAK,GAAKU,GACrCM,EAAKtC,KAAKiB,SAASI,EAAI,EAAIC,EAAK,GAAKU,GAE3ChC,KAAKO,WAAa,EAElB,IAAK,IAAII,EAAKsB,EAAItB,GAAMyB,EAAIzB,IACxB,IAAK,IAAIC,EAAKsB,EAAItB,GAAMyB,EAAIzB,IACxB,IAAK,IAAIC,EAAKsB,EAAItB,GAAMyB,EAAIzB,IAAM,CAC9B,MAAMC,EAAId,KAAKU,WAAWC,EAAIC,EAAIC,GAC5BiB,EAAQ9B,KAAKG,WAAWW,GACxByB,EAAMvC,KAAKG,WAAWW,EAAI,GAEhC,IAAK,IAAIe,EAAIC,EAAOD,EAAIU,EAAKV,IACzB7B,KAAKM,UAAUN,KAAKO,YAAcP,KAAKK,aAAawB,GACpD7B,KAAKO","sources":["webpack://babylonjs-fluid-rendering/./src/scenes/FluidSimulator2/hash.ts"],"sourcesContent":["/**\r\n * From https://github.com/matthias-research/pages/blob/master/tenMinutePhysics/11-hashing.html\r\n */\r\n\r\nexport class Hash {\r\n    private _spacing: number;\r\n    private _tableSize: number;\r\n    private _cellStart: Int32Array;\r\n    private _cellEntries: Int32Array;\r\n    private _queryIds: Int32Array;\r\n    private _querySize: number;\r\n\r\n    public get querySize() {\r\n        return this._querySize;\r\n    }\r\n\r\n    public get queryIds() {\r\n        return this._queryIds;\r\n    }\r\n\r\n    constructor(spacing: number, maxNumObjects: number) {\r\n        this._spacing = spacing;\r\n        this._tableSize = 2 * maxNumObjects;\r\n        this._cellStart = new Int32Array(this._tableSize + 1);\r\n        this._cellEntries = new Int32Array(maxNumObjects);\r\n        this._queryIds = new Int32Array(maxNumObjects);\r\n        this._querySize = 0;\r\n    }\r\n\r\n    public hashCoords(xi: number, yi: number, zi: number) {\r\n        const h = (xi * 92837111) ^ (yi * 689287499) ^ (zi * 283923481); // fantasy function\r\n        //const h = (xi * 73856093) ^ (yi * 19349663) ^ (zi * 83492791); // fantasy function\r\n        return Math.abs(h) % this._tableSize;\r\n    }\r\n\r\n    public intCoord(coord: number) {\r\n        return Math.floor(coord / this._spacing);\r\n    }\r\n\r\n    public hashPos(pos: number[] | Float32Array, nr: number) {\r\n        return this.hashCoords(\r\n            this.intCoord(pos[3 * nr]),\r\n            this.intCoord(pos[3 * nr + 1]),\r\n            this.intCoord(pos[3 * nr + 2])\r\n        );\r\n    }\r\n\r\n    public create(pos: number[] | Float32Array, numElements?: number) {\r\n        numElements = numElements ?? pos.length / 3;\r\n\r\n        const numObjects = Math.min(numElements, this._cellEntries.length);\r\n\r\n        // determine cell sizes\r\n        this._cellStart.fill(0);\r\n        this._cellEntries.fill(0);\r\n\r\n        for (let i = 0; i < numObjects; i++) {\r\n            const h = this.hashPos(pos, i);\r\n            this._cellStart[h]++;\r\n        }\r\n\r\n        // determine cells starts\r\n        let start = 0;\r\n        for (let i = 0; i < this._tableSize; i++) {\r\n            start += this._cellStart[i];\r\n            this._cellStart[i] = start;\r\n        }\r\n        this._cellStart[this._tableSize] = start; // guard\r\n\r\n        // fill in objects ids\r\n        for (let i = 0; i < numObjects; i++) {\r\n            const h = this.hashPos(pos, i);\r\n            this._cellStart[h]--;\r\n            this._cellEntries[this._cellStart[h]] = i;\r\n        }\r\n    }\r\n\r\n    public query(pos: number[] | Float32Array, nr: number, maxDist: number) {\r\n        const x0 = this.intCoord(pos[3 * nr] - maxDist);\r\n        const y0 = this.intCoord(pos[3 * nr + 1] - maxDist);\r\n        const z0 = this.intCoord(pos[3 * nr + 2] - maxDist);\r\n\r\n        const x1 = this.intCoord(pos[3 * nr] + maxDist);\r\n        const y1 = this.intCoord(pos[3 * nr + 1] + maxDist);\r\n        const z1 = this.intCoord(pos[3 * nr + 2] + maxDist);\r\n\r\n        this._querySize = 0;\r\n\r\n        for (let xi = x0; xi <= x1; xi++) {\r\n            for (let yi = y0; yi <= y1; yi++) {\r\n                for (let zi = z0; zi <= z1; zi++) {\r\n                    const h = this.hashCoords(xi, yi, zi);\r\n                    const start = this._cellStart[h];\r\n                    const end = this._cellStart[h + 1];\r\n\r\n                    for (let i = start; i < end; i++) {\r\n                        this._queryIds[this._querySize] = this._cellEntries[i];\r\n                        this._querySize++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"names":["Hash","constructor","spacing","maxNumObjects","this","_spacing","_tableSize","_cellStart","Int32Array","_cellEntries","_queryIds","_querySize","querySize","queryIds","hashCoords","xi","yi","zi","h","Math","abs","intCoord","coord","floor","hashPos","pos","nr","create","numElements","length","numObjects","min","fill","i","start","query","maxDist","x0","y0","z0","x1","y1","z1","end"],"sourceRoot":""}