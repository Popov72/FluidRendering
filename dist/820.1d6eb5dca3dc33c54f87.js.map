{"version":3,"file":"820.1d6eb5dca3dc33c54f87.js","mappings":"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","sources":["webpack://babylonjs-fluid-rendering/./src/scenes/FluidRenderer/fluidRendererGUI.ts","webpack://babylonjs-fluid-rendering/./src/scenes/FluidSimulator2/fluidSimulator.ts","webpack://babylonjs-fluid-rendering/./src/scenes/FluidSimulator2/hash.ts","webpack://babylonjs-fluid-rendering/./src/scenes/Utils/particleGenerator.ts","webpack://babylonjs-fluid-rendering/./src/assets/materials/sulphuric-rock_albedo.png","webpack://babylonjs-fluid-rendering/./src/assets/materials/sulphuric-rock_roughness.png","webpack://babylonjs-fluid-rendering/./src/assets/materials/sulphuric-rock_normal-ogl.png","webpack://babylonjs-fluid-rendering/./src/assets/materials/Marble08_1K_BaseColor.png","webpack://babylonjs-fluid-rendering/./src/scenes/Utils/sdfHelper.ts","webpack://babylonjs-fluid-rendering/./src/scenes/fluidSimulationDemoBase.ts"],"sourcesContent":["import * as BABYLON from \"@babylonjs/core\";\r\n\r\nimport * as LiLGUI from \"lil-gui\";\r\nimport { FluidRenderingDebug } from \"./fluidRenderingTargetRenderer\";\r\n/*\r\nasync function LoadDAT(): Promise<void> {\r\n    const _ = await import(\"@babylonjs/core/Misc/tools\")\r\n    return _.Tools.LoadScriptAsync(\"https://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.6.2/dat.gui.min.js\");\r\n}\r\n*/\r\nexport class FluidRendererGUI {\r\n    private _gui: BABYLON.Nullable<LiLGUI.GUI>;\r\n    private _visible: boolean;\r\n    private _scene: BABYLON.Scene;\r\n    private _showGeneralMenu: boolean;\r\n    private _onKeyObserver: BABYLON.Nullable<\r\n        BABYLON.Observer<BABYLON.KeyboardInfo>\r\n    >;\r\n    private _targetRendererIndex: number;\r\n    private _targetRenderersGUIElements: LiLGUI.Controller[];\r\n    private _renderObjectIndex: number;\r\n    private _renderObjectsGUIElements: LiLGUI.Controller[];\r\n\r\n    public set visible(v: boolean) {\r\n        if (v === this._visible) {\r\n            return;\r\n        }\r\n        this._visible = v;\r\n        if (this._gui) {\r\n            this._gui.domElement.style.display = v ? \"\" : \"none\";\r\n        }\r\n    }\r\n\r\n    constructor(scene: BABYLON.Scene, showGeneralMenu = true) {\r\n        this._scene = scene;\r\n        this._showGeneralMenu = showGeneralMenu;\r\n        this._visible = true;\r\n        this._onKeyObserver = null;\r\n        this._targetRendererIndex = 0;\r\n        this._targetRenderersGUIElements = [];\r\n        this._renderObjectIndex = 0;\r\n        this._renderObjectsGUIElements = [];\r\n        this._gui = null;\r\n\r\n        this.initialize();\r\n    }\r\n\r\n    public dispose() {\r\n        const oldgui = document.getElementById(\"datGUI\");\r\n        if (oldgui !== null) {\r\n            oldgui.remove();\r\n            this._gui = null;\r\n        }\r\n        this._scene.onKeyboardObservable.remove(this._onKeyObserver);\r\n        this._onKeyObserver = null;\r\n    }\r\n\r\n    private _setupKeyboard(): void {\r\n        this._onKeyObserver = this._scene.onKeyboardObservable.add((kbInfo) => {\r\n            switch (kbInfo.type) {\r\n                case BABYLON.KeyboardEventTypes.KEYDOWN:\r\n                    //console.log(\"KEY DOWN: \", kbInfo.event.key);\r\n                    break;\r\n                case BABYLON.KeyboardEventTypes.KEYUP:\r\n                    switch (kbInfo.event.key) {\r\n                        case \"F8\": {\r\n                            this.visible = !this._visible;\r\n                            break;\r\n                        }\r\n                    }\r\n                    //console.log(\"KEY UP: \", kbInfo.event.key, kbInfo.event.keyCode);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    public initialize(): void {\r\n        this.dispose();\r\n\r\n        this._gui = new LiLGUI.GUI({ title: \"Fluid Rendering\" });\r\n        this._gui.domElement.style.marginTop = \"60px\";\r\n        this._gui.domElement.id = \"datGUI\";\r\n\r\n        this._setupKeyboard();\r\n\r\n        if (this._showGeneralMenu) {\r\n            this._makeMenuGeneral();\r\n        }\r\n        this._makeMenuTargetRenderers();\r\n        this._makeMenuRenderObjects();\r\n    }\r\n\r\n    private _addList(\r\n        menu: LiLGUI.GUI,\r\n        params: object,\r\n        name: string,\r\n        friendlyName: string,\r\n        list: any[]\r\n    ): LiLGUI.Controller {\r\n        return menu\r\n            .add(params, name, list)\r\n            .name(friendlyName)\r\n            .onChange((value: any) => {\r\n                this._parameterChanged(name, value);\r\n            });\r\n    }\r\n\r\n    private _addCheckbox(\r\n        menu: LiLGUI.GUI,\r\n        params: object,\r\n        name: string,\r\n        friendlyName: string\r\n    ): LiLGUI.Controller {\r\n        return menu\r\n            .add(params, name)\r\n            .name(friendlyName)\r\n            .onChange((value: any) => {\r\n                this._parameterChanged(name, value);\r\n            });\r\n    }\r\n\r\n    private _addSlider(\r\n        menu: LiLGUI.GUI,\r\n        params: object,\r\n        name: string,\r\n        friendlyName: string,\r\n        min: number,\r\n        max: number,\r\n        step: number\r\n    ): LiLGUI.Controller {\r\n        return menu\r\n            .add(params, name, min, max, step)\r\n            .name(friendlyName)\r\n            .onChange((value: any) => {\r\n                this._parameterChanged(name, value);\r\n            });\r\n    }\r\n\r\n    private _addColor(\r\n        menu: LiLGUI.GUI,\r\n        params: object,\r\n        name: string,\r\n        friendlyName: string\r\n    ): LiLGUI.Controller {\r\n        return menu\r\n            .addColor(params, name)\r\n            .name(friendlyName)\r\n            .onChange((value: any) => {\r\n                this._parameterChanged(name, value);\r\n            });\r\n    }\r\n\r\n    private _makeMenuGeneral(): void {\r\n        if (!this._gui) {\r\n            return;\r\n        }\r\n\r\n        const params = {\r\n            enable: this._parameterRead(\"enable\"),\r\n        };\r\n\r\n        const general = this._gui.addFolder(\"General\");\r\n\r\n        general.$title.style.fontWeight = \"bold\";\r\n\r\n        this._addCheckbox(general, params, \"enable\", \"Enable fluid renderer\");\r\n\r\n        general.open();\r\n    }\r\n\r\n    private _makeMenuTargetRenderers(): void {\r\n        if (\r\n            !this._gui ||\r\n            !(this._scene.fluidRenderer?.targetRenderers.length ?? 0)\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        const params = {\r\n            targets_index: this._parameterRead(\"targets_index\"),\r\n            targets_generateDiffuseTexture: this._parameterRead(\r\n                \"targets_generateDiffuseTexture\"\r\n            ),\r\n            targets_fluidColor: this._parameterRead(\"targets_fluidColor\"),\r\n            targets_density: this._parameterRead(\"targets_density\"),\r\n            targets_refractionStrength: this._parameterRead(\r\n                \"targets_refractionStrength\"\r\n            ),\r\n            targets_fresnelClamp: this._parameterRead(\"targets_fresnelClamp\"),\r\n            targets_specularPower: this._parameterRead(\"targets_specularPower\"),\r\n            targets_minimumThickness: this._parameterRead(\r\n                \"targets_minimumThickness\"\r\n            ),\r\n            targets_debug: this._parameterRead(\"targets_debug\"),\r\n            targets_debugFeature: this._parameterRead(\"targets_debugFeature\"),\r\n            targets_enableBlurDepth: this._parameterRead(\r\n                \"targets_enableBlurDepth\"\r\n            ),\r\n            targets_blurDepthSizeDivisor: this._parameterRead(\r\n                \"targets_blurDepthSizeDivisor\"\r\n            ),\r\n            targets_blurDepthFilterSize: this._parameterRead(\r\n                \"targets_blurDepthFilterSize\"\r\n            ),\r\n            targets_blurDepthNumIterations: this._parameterRead(\r\n                \"targets_blurDepthNumIterations\"\r\n            ),\r\n            targets_blurDepthMaxFilterSize: this._parameterRead(\r\n                \"targets_blurDepthMaxFilterSize\"\r\n            ),\r\n            targets_blurDepthDepthScale: this._parameterRead(\r\n                \"targets_blurDepthDepthScale\"\r\n            ),\r\n            targets_enableBlurThickness: this._parameterRead(\r\n                \"targets_enableBlurThickness\"\r\n            ),\r\n            targets_blurThicknessSizeDivisor: this._parameterRead(\r\n                \"targets_blurThicknessSizeDivisor\"\r\n            ),\r\n            targets_blurThicknessFilterSize: this._parameterRead(\r\n                \"targets_blurThicknessFilterSize\"\r\n            ),\r\n            targets_blurThicknessNumIterations: this._parameterRead(\r\n                \"targets_blurThicknessNumIterations\"\r\n            ),\r\n            targets_depthMapSize: this._parameterRead(\"targets_depthMapSize\"),\r\n            targets_thicknessMapSize: this._parameterRead(\r\n                \"targets_thicknessMapSize\"\r\n            ),\r\n            targets_diffuseMapSize: this._parameterRead(\r\n                \"targets_diffuseMapSize\"\r\n            ),\r\n            targets_useVelocity: this._parameterRead(\"targets_useVelocity\"),\r\n            targets_useFixedThickness: this._parameterRead(\r\n                \"targets_useFixedThickness\"\r\n            ),\r\n        };\r\n\r\n        const targetRenderers = this._gui.addFolder(\"Target renderers\");\r\n        targetRenderers.$title.style.fontWeight = \"bold\";\r\n\r\n        const targetList: number[] = [];\r\n        if (this._scene.fluidRenderer) {\r\n            for (\r\n                let i = 0;\r\n                i < this._scene.fluidRenderer.targetRenderers.length;\r\n                ++i\r\n            ) {\r\n                targetList.push(i);\r\n            }\r\n        }\r\n\r\n        this._addList(\r\n            targetRenderers,\r\n            params,\r\n            \"targets_index\",\r\n            \"Index\",\r\n            targetList\r\n        );\r\n        this._targetRenderersGUIElements.push(\r\n            this._addList(\r\n                targetRenderers,\r\n                params,\r\n                \"targets_depthMapSize\",\r\n                \"Depth map size\",\r\n                [\"Screen size\", 256, 512, 1024, 2048, 4096]\r\n            )\r\n        );\r\n        this._targetRenderersGUIElements.push(\r\n            this._addList(\r\n                targetRenderers,\r\n                params,\r\n                \"targets_thicknessMapSize\",\r\n                \"Thickness map size\",\r\n                [\"Screen size\", 64, 128, 256, 512, 1024, 2048]\r\n            )\r\n        );\r\n        this._targetRenderersGUIElements.push(\r\n            this._addList(\r\n                targetRenderers,\r\n                params,\r\n                \"targets_diffuseMapSize\",\r\n                \"Diffuse map size\",\r\n                [\"Screen size\", 256, 512, 1024, 2048, 4096]\r\n            )\r\n        );\r\n        this._targetRenderersGUIElements.push(\r\n            this._addSlider(\r\n                targetRenderers,\r\n                params,\r\n                \"targets_minimumThickness\",\r\n                \"Minimum thickness\",\r\n                0,\r\n                3,\r\n                0.001\r\n            )\r\n        );\r\n        this._targetRenderersGUIElements.push(\r\n            this._addCheckbox(\r\n                targetRenderers,\r\n                params,\r\n                \"targets_useFixedThickness\",\r\n                \"Use fixed thickness\"\r\n            )\r\n        );\r\n        this._targetRenderersGUIElements.push(\r\n            this._addCheckbox(\r\n                targetRenderers,\r\n                params,\r\n                \"targets_useVelocity\",\r\n                \"Use velocity\"\r\n            )\r\n        );\r\n\r\n        const menuColor = targetRenderers.addFolder(\"Color\");\r\n        menuColor.$title.style.fontStyle = \"italic\";\r\n\r\n        this._targetRenderersGUIElements.push(\r\n            this._addCheckbox(\r\n                menuColor,\r\n                params,\r\n                \"targets_generateDiffuseTexture\",\r\n                \"Generate diffuse texture\"\r\n            )\r\n        );\r\n        this._targetRenderersGUIElements.push(\r\n            this._addColor(\r\n                menuColor,\r\n                params,\r\n                \"targets_fluidColor\",\r\n                \"Fluid color\"\r\n            )\r\n        );\r\n        this._targetRenderersGUIElements.push(\r\n            this._addSlider(\r\n                menuColor,\r\n                params,\r\n                \"targets_density\",\r\n                \"Density\",\r\n                0,\r\n                20,\r\n                0.01\r\n            )\r\n        );\r\n        this._targetRenderersGUIElements.push(\r\n            this._addSlider(\r\n                menuColor,\r\n                params,\r\n                \"targets_refractionStrength\",\r\n                \"Refraction strength\",\r\n                0,\r\n                0.3,\r\n                0.005\r\n            )\r\n        );\r\n        this._targetRenderersGUIElements.push(\r\n            this._addSlider(\r\n                menuColor,\r\n                params,\r\n                \"targets_fresnelClamp\",\r\n                \"Fresnel clamp\",\r\n                0,\r\n                1.0,\r\n                0.005\r\n            )\r\n        );\r\n        this._targetRenderersGUIElements.push(\r\n            this._addSlider(\r\n                menuColor,\r\n                params,\r\n                \"targets_specularPower\",\r\n                \"Specular power\",\r\n                1,\r\n                5000,\r\n                5\r\n            )\r\n        );\r\n\r\n        const menuBlurDepth = targetRenderers.addFolder(\"Blur Depth\");\r\n        menuBlurDepth.$title.style.fontStyle = \"italic\";\r\n\r\n        this._targetRenderersGUIElements.push(\r\n            this._addCheckbox(\r\n                menuBlurDepth,\r\n                params,\r\n                \"targets_enableBlurDepth\",\r\n                \"Enable\"\r\n            )\r\n        );\r\n        this._targetRenderersGUIElements.push(\r\n            this._addSlider(\r\n                menuBlurDepth,\r\n                params,\r\n                \"targets_blurDepthSizeDivisor\",\r\n                \"Size divisor\",\r\n                1,\r\n                10,\r\n                1\r\n            )\r\n        );\r\n        this._targetRenderersGUIElements.push(\r\n            this._addSlider(\r\n                menuBlurDepth,\r\n                params,\r\n                \"targets_blurDepthFilterSize\",\r\n                \"Filter size\",\r\n                1,\r\n                20,\r\n                1\r\n            )\r\n        );\r\n        this._targetRenderersGUIElements.push(\r\n            this._addSlider(\r\n                menuBlurDepth,\r\n                params,\r\n                \"targets_blurDepthNumIterations\",\r\n                \"Num iterations\",\r\n                1,\r\n                10,\r\n                1\r\n            )\r\n        );\r\n        this._targetRenderersGUIElements.push(\r\n            this._addSlider(\r\n                menuBlurDepth,\r\n                params,\r\n                \"targets_blurDepthMaxFilterSize\",\r\n                \"Max filter size\",\r\n                1,\r\n                100,\r\n                1\r\n            )\r\n        );\r\n        this._targetRenderersGUIElements.push(\r\n            this._addSlider(\r\n                menuBlurDepth,\r\n                params,\r\n                \"targets_blurDepthDepthScale\",\r\n                \"Depth scale\",\r\n                0,\r\n                100,\r\n                0.01\r\n            )\r\n        );\r\n\r\n        const menuBlurThickness = targetRenderers.addFolder(\"Blur Thickness\");\r\n        menuBlurThickness.$title.style.fontStyle = \"italic\";\r\n\r\n        this._targetRenderersGUIElements.push(\r\n            this._addCheckbox(\r\n                menuBlurThickness,\r\n                params,\r\n                \"targets_enableBlurThickness\",\r\n                \"Enable\"\r\n            )\r\n        );\r\n        this._targetRenderersGUIElements.push(\r\n            this._addSlider(\r\n                menuBlurThickness,\r\n                params,\r\n                \"targets_blurThicknessSizeDivisor\",\r\n                \"Size divisor\",\r\n                1,\r\n                10,\r\n                1\r\n            )\r\n        );\r\n        this._targetRenderersGUIElements.push(\r\n            this._addSlider(\r\n                menuBlurThickness,\r\n                params,\r\n                \"targets_blurThicknessFilterSize\",\r\n                \"Filter size\",\r\n                1,\r\n                20,\r\n                1\r\n            )\r\n        );\r\n        this._targetRenderersGUIElements.push(\r\n            this._addSlider(\r\n                menuBlurThickness,\r\n                params,\r\n                \"targets_blurThicknessNumIterations\",\r\n                \"Num iterations\",\r\n                1,\r\n                10,\r\n                1\r\n            )\r\n        );\r\n\r\n        const menuDebug = targetRenderers.addFolder(\"Debug\");\r\n        menuDebug.$title.style.fontStyle = \"italic\";\r\n\r\n        this._targetRenderersGUIElements.push(\r\n            this._addCheckbox(menuDebug, params, \"targets_debug\", \"Enable\")\r\n        );\r\n        this._targetRenderersGUIElements.push(\r\n            this._addList(\r\n                menuDebug,\r\n                params,\r\n                \"targets_debugFeature\",\r\n                \"Feature\",\r\n                Object.keys(FluidRenderingDebug).filter((k) => isNaN(Number(k)))\r\n            )\r\n        );\r\n\r\n        targetRenderers.open();\r\n    }\r\n\r\n    private _makeMenuRenderObjects(): void {\r\n        if (\r\n            !this._gui ||\r\n            !(this._scene.fluidRenderer?.renderObjects.length ?? 0)\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        const params = {\r\n            objects_index: this._parameterRead(\"objects_index\"),\r\n            objects_particleSize: this._parameterRead(\"objects_particleSize\"),\r\n            objects_particleThicknessAlpha: this._parameterRead(\r\n                \"objects_particleThicknessAlpha\"\r\n            ),\r\n        };\r\n\r\n        const renderObjects = this._gui.addFolder(\"Render objects\");\r\n        renderObjects.$title.style.fontWeight = \"bold\";\r\n\r\n        const objectList: number[] = [];\r\n        if (this._scene.fluidRenderer) {\r\n            for (\r\n                let i = 0;\r\n                i < this._scene.fluidRenderer.renderObjects.length;\r\n                ++i\r\n            ) {\r\n                objectList.push(i);\r\n            }\r\n        }\r\n\r\n        this._addList(\r\n            renderObjects,\r\n            params,\r\n            \"objects_index\",\r\n            \"Index\",\r\n            objectList\r\n        );\r\n        this._renderObjectsGUIElements.push(\r\n            this._addSlider(\r\n                renderObjects,\r\n                params,\r\n                \"objects_particleSize\",\r\n                \"Particle size\",\r\n                0,\r\n                2,\r\n                0.001\r\n            )\r\n        );\r\n        this._renderObjectsGUIElements.push(\r\n            this._addSlider(\r\n                renderObjects,\r\n                params,\r\n                \"objects_particleThicknessAlpha\",\r\n                \"Particle alpha\",\r\n                0,\r\n                1,\r\n                0.001\r\n            )\r\n        );\r\n    }\r\n\r\n    private _readValue(obj: any, name: string): any {\r\n        const parts: string[] = name.split(\"_\");\r\n\r\n        for (let i = 0; i < parts.length; ++i) {\r\n            const part = parts[i];\r\n            obj = obj[parts[i]];\r\n\r\n            if (obj instanceof BABYLON.Color3) {\r\n                obj = obj.toHexString();\r\n            }\r\n\r\n            if (part === \"debugFeature\") {\r\n                obj = FluidRenderingDebug[obj];\r\n            }\r\n\r\n            if (part.endsWith(\"MapSize\") && obj === null) {\r\n                obj = \"Screen size\";\r\n            }\r\n        }\r\n\r\n        return obj;\r\n    }\r\n\r\n    private _setValue(obj: any, name: string, value: any): void {\r\n        const parts: string[] = name.split(\"_\");\r\n\r\n        for (let i = 0; i < parts.length - 1; ++i) {\r\n            obj = obj[parts[i]];\r\n            if (parts[i].endsWith(\"MapSize\") && value === \"Screen size\") {\r\n                value = null;\r\n            }\r\n        }\r\n\r\n        if (\r\n            parts[parts.length - 1].endsWith(\"MapSize\") &&\r\n            value === \"Screen size\"\r\n        ) {\r\n            value = null;\r\n        }\r\n\r\n        obj[parts[parts.length - 1]] = value;\r\n    }\r\n\r\n    private _parameterRead(name: string): any {\r\n        const fluidRenderer = this._scene.fluidRenderer;\r\n        switch (name) {\r\n            case \"enable\":\r\n                return !!this._scene.fluidRenderer;\r\n        }\r\n\r\n        if (name.startsWith(\"targets_\")) {\r\n            name = name.substring(8);\r\n            if (name === \"index\") {\r\n                return this._targetRendererIndex;\r\n            } else {\r\n                return fluidRenderer\r\n                    ? this._readValue(\r\n                          fluidRenderer.targetRenderers[\r\n                              this._targetRendererIndex\r\n                          ],\r\n                          name\r\n                      )\r\n                    : \"\";\r\n            }\r\n        }\r\n\r\n        if (name.startsWith(\"objects_\")) {\r\n            name = name.substring(8);\r\n            if (name === \"index\") {\r\n                return this._renderObjectIndex;\r\n            } else {\r\n                return fluidRenderer\r\n                    ? this._readValue(\r\n                          fluidRenderer.renderObjects[this._renderObjectIndex]\r\n                              .object,\r\n                          name\r\n                      )\r\n                    : \"\";\r\n            }\r\n        }\r\n    }\r\n\r\n    private _fillValues(listGUIElements: LiLGUI.Controller[], obj: any): void {\r\n        for (let i = 0; i < listGUIElements.length; ++i) {\r\n            const elem = listGUIElements[i];\r\n            const property = elem.property.split(\"_\")[1];\r\n            (elem.object as any)[elem.property] = this._readValue(\r\n                obj,\r\n                property\r\n            );\r\n            elem.updateDisplay();\r\n        }\r\n    }\r\n\r\n    public syncGUI(): void {\r\n        const fluidRenderer = this._scene.fluidRenderer;\r\n\r\n        if (fluidRenderer) {\r\n            this._fillValues(\r\n                this._targetRenderersGUIElements,\r\n                fluidRenderer.targetRenderers[this._targetRendererIndex]\r\n            );\r\n            this._fillValues(\r\n                this._renderObjectsGUIElements,\r\n                fluidRenderer.renderObjects[this._renderObjectIndex].object\r\n            );\r\n        }\r\n    }\r\n\r\n    private _parameterChanged(name: string, value: any): void {\r\n        const fluidRenderer = this._scene.fluidRenderer;\r\n        switch (name) {\r\n            case \"enable\":\r\n                if (value) {\r\n                    this._scene.enableFluidRenderer();\r\n                    this._targetRendererIndex = 0;\r\n                    this.initialize();\r\n                } else {\r\n                    this._scene.disableFluidRenderer();\r\n                    this._targetRendererIndex = 0;\r\n                    this.initialize();\r\n                }\r\n                return;\r\n            case \"targets_fluidColor\":\r\n                if (\r\n                    fluidRenderer &&\r\n                    fluidRenderer.targetRenderers.length >\r\n                        this._targetRendererIndex\r\n                ) {\r\n                    fluidRenderer.targetRenderers[\r\n                        this._targetRendererIndex\r\n                    ].fluidColor.copyFrom(BABYLON.Color3.FromHexString(value));\r\n                }\r\n                return;\r\n            case \"targets_debugFeature\": {\r\n                const typedDebugFeature: keyof typeof FluidRenderingDebug =\r\n                    value;\r\n                const val = FluidRenderingDebug[typedDebugFeature];\r\n                if (\r\n                    fluidRenderer &&\r\n                    fluidRenderer.targetRenderers.length >\r\n                        this._targetRendererIndex\r\n                ) {\r\n                    fluidRenderer.targetRenderers[\r\n                        this._targetRendererIndex\r\n                    ].debugFeature = val;\r\n                }\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (name.startsWith(\"targets_\")) {\r\n            name = name.substring(8);\r\n            if (name === \"index\") {\r\n                this._targetRendererIndex = value || 0;\r\n                if (fluidRenderer) {\r\n                    this._fillValues(\r\n                        this._targetRenderersGUIElements,\r\n                        fluidRenderer.targetRenderers[this._targetRendererIndex]\r\n                    );\r\n                }\r\n            } else {\r\n                if (fluidRenderer) {\r\n                    this._setValue(\r\n                        fluidRenderer.targetRenderers[\r\n                            this._targetRendererIndex\r\n                        ],\r\n                        name,\r\n                        value === false\r\n                            ? false\r\n                            : value === true\r\n                            ? true\r\n                            : isNaN(value)\r\n                            ? value\r\n                            : parseFloat(value)\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        if (name.startsWith(\"objects_\")) {\r\n            name = name.substring(8);\r\n            if (name === \"index\") {\r\n                this._renderObjectIndex = value || 0;\r\n                if (fluidRenderer) {\r\n                    this._fillValues(\r\n                        this._renderObjectsGUIElements,\r\n                        fluidRenderer.renderObjects[this._renderObjectIndex]\r\n                            .object\r\n                    );\r\n                }\r\n            } else {\r\n                if (fluidRenderer) {\r\n                    this._setValue(\r\n                        fluidRenderer.renderObjects[this._renderObjectIndex]\r\n                            .object,\r\n                        name,\r\n                        value === false\r\n                            ? false\r\n                            : value === true\r\n                            ? true\r\n                            : isNaN(value)\r\n                            ? value\r\n                            : parseFloat(value)\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import * as BABYLON from \"@babylonjs/core\";\r\nimport { Hash } from \"./hash\";\r\n\r\n// Based on https://github.com/rlguy/SPHFluidSim/blob/master/src/sphfluidsimulation.cpp\r\n\r\nexport interface IFluidParticle {\r\n    mass: number;\r\n    density: number;\r\n    pressure: number;\r\n    accelX: number;\r\n    accelY: number;\r\n    accelZ: number;\r\n}\r\n\r\nexport class FluidSimulator {\r\n    protected _particles: IFluidParticle[];\r\n    protected _numMaxParticles: number;\r\n    protected _positions: Float32Array;\r\n    protected _velocities: Float32Array;\r\n    protected _hash: Hash;\r\n\r\n    protected _smoothingRadius2: number;\r\n    protected _poly6Constant: number;\r\n    protected _spikyConstant: number;\r\n    protected _viscConstant: number;\r\n\r\n    protected _smoothingRadius = 0.2;\r\n\r\n    public get smoothingRadius() {\r\n        return this._smoothingRadius;\r\n    }\r\n\r\n    public set smoothingRadius(radius: number) {\r\n        this._smoothingRadius = radius;\r\n        this._computeConstants();\r\n    }\r\n\r\n    public densityReference = 2000;\r\n\r\n    public pressureConstant = 20;\r\n\r\n    public viscosity = 0.005;\r\n\r\n    public gravity = new BABYLON.Vector3(0, -9.8, 0);\r\n\r\n    public minTimeStep = 1 / 100;\r\n\r\n    public maxVelocity = 75;\r\n\r\n    public maxAcceleration = 2000;\r\n\r\n    public currentNumParticles: number;\r\n\r\n    private _mass: number;\r\n\r\n    public get mass() {\r\n        return this._mass;\r\n    }\r\n\r\n    public set mass(m: number) {\r\n        for (let i = 0; i < this._particles.length; ++i) {\r\n            this._particles[i].mass = m;\r\n        }\r\n    }\r\n\r\n    private _computeConstants(): void {\r\n        this._smoothingRadius2 = this._smoothingRadius * this._smoothingRadius;\r\n        this._poly6Constant =\r\n            315 / (64 * Math.PI * Math.pow(this._smoothingRadius, 9));\r\n        this._spikyConstant =\r\n            -45 / (Math.PI * Math.pow(this._smoothingRadius, 6));\r\n        this._viscConstant =\r\n            45 / (Math.PI * Math.pow(this._smoothingRadius, 6));\r\n        this._hash = new Hash(this._smoothingRadius, this._numMaxParticles);\r\n    }\r\n\r\n    public get positions() {\r\n        return this._positions;\r\n    }\r\n\r\n    public get velocities() {\r\n        return this._velocities;\r\n    }\r\n\r\n    public get numMaxParticles() {\r\n        return this._numMaxParticles;\r\n    }\r\n\r\n    public setParticleData(\r\n        positions?: Float32Array,\r\n        velocities?: Float32Array\r\n    ): void {\r\n        this._positions = positions ?? new Float32Array();\r\n        this._velocities = velocities ?? new Float32Array();\r\n        this._numMaxParticles = this._positions.length / 3;\r\n        this._hash = new Hash(this._smoothingRadius, this._numMaxParticles);\r\n\r\n        for (let i = this._particles.length; i < this._numMaxParticles; ++i) {\r\n            this._particles.push({\r\n                mass: this.mass,\r\n                density: 0,\r\n                pressure: 0,\r\n                accelX: 0,\r\n                accelY: 0,\r\n                accelZ: 0,\r\n            });\r\n        }\r\n    }\r\n\r\n    constructor(positions?: Float32Array, velocities?: Float32Array, mass = 1) {\r\n        this._positions = undefined as any;\r\n        this._velocities = undefined as any;\r\n        this._particles = [];\r\n        this._numMaxParticles = 0;\r\n        this._mass = mass;\r\n\r\n        if (positions && velocities) {\r\n            this.setParticleData(positions, velocities);\r\n        }\r\n\r\n        this._hash = new Hash(this._smoothingRadius, this._numMaxParticles);\r\n\r\n        this.currentNumParticles = this._numMaxParticles;\r\n\r\n        this._smoothingRadius2 = 0;\r\n        this._poly6Constant = 0;\r\n        this._spikyConstant = 0;\r\n        this._viscConstant = 0;\r\n\r\n        this._computeConstants();\r\n    }\r\n\r\n    public update(deltaTime: number): void {\r\n        let timeLeft = deltaTime;\r\n\r\n        while (timeLeft > 0) {\r\n            this._hash.create(this._positions, this.currentNumParticles);\r\n            this._computeDensityAndPressure();\r\n            this._computeAcceleration();\r\n\r\n            let timeStep = this._calculateTimeStep();\r\n\r\n            timeLeft -= timeStep;\r\n            if (timeLeft < 0) {\r\n                timeStep += timeLeft;\r\n                timeLeft = 0;\r\n            }\r\n\r\n            this._updatePositions(timeStep);\r\n        }\r\n    }\r\n\r\n    public dispose(): void {\r\n        // nothing to do\r\n    }\r\n\r\n    protected _computeDensityAndPressure(): void {\r\n        for (let a = 0; a < this.currentNumParticles; ++a) {\r\n            const pA = this._particles[a];\r\n            const paX = this._positions[a * 3 + 0];\r\n            const paY = this._positions[a * 3 + 1];\r\n            const paZ = this._positions[a * 3 + 2];\r\n\r\n            pA.density = 0;\r\n\r\n            this._hash.query(this._positions, a, this._smoothingRadius);\r\n\r\n            for (let ib = 0; ib < this._hash.querySize; ++ib) {\r\n                const b = this._hash.queryIds[ib];\r\n                const diffX = paX - this._positions[b * 3 + 0];\r\n                const diffY = paY - this._positions[b * 3 + 1];\r\n                const diffZ = paZ - this._positions[b * 3 + 2];\r\n                const r2 = diffX * diffX + diffY * diffY + diffZ * diffZ;\r\n\r\n                if (r2 < this._smoothingRadius2) {\r\n                    const w =\r\n                        this._poly6Constant *\r\n                        Math.pow(this._smoothingRadius2 - r2, 3);\r\n                    pA.density += w;\r\n                }\r\n            }\r\n\r\n            pA.density = Math.max(this.densityReference, pA.density);\r\n            pA.pressure =\r\n                this.pressureConstant * (pA.density - this.densityReference);\r\n        }\r\n    }\r\n\r\n    protected _computeAcceleration(): void {\r\n        // Pressurce-based acceleration + viscosity-based acceleration computation\r\n        for (let a = 0; a < this.currentNumParticles; ++a) {\r\n            const pA = this._particles[a];\r\n            const paX = this._positions[a * 3 + 0];\r\n            const paY = this._positions[a * 3 + 1];\r\n            const paZ = this._positions[a * 3 + 2];\r\n\r\n            const vaX = this._velocities[a * 3 + 0];\r\n            const vaY = this._velocities[a * 3 + 1];\r\n            const vaZ = this._velocities[a * 3 + 2];\r\n\r\n            let pressureAccelX = 0;\r\n            let pressureAccelY = 0;\r\n            let pressureAccelZ = 0;\r\n\r\n            let viscosityAccelX = 0;\r\n            let viscosityAccelY = 0;\r\n            let viscosityAccelZ = 0;\r\n\r\n            this._hash.query(this._positions, a, this._smoothingRadius);\r\n\r\n            for (let ib = 0; ib < this._hash.querySize; ++ib) {\r\n                const b = this._hash.queryIds[ib];\r\n                let diffX = paX - this._positions[b * 3 + 0];\r\n                let diffY = paY - this._positions[b * 3 + 1];\r\n                let diffZ = paZ - this._positions[b * 3 + 2];\r\n                const r2 = diffX * diffX + diffY * diffY + diffZ * diffZ;\r\n                const r = Math.sqrt(r2);\r\n\r\n                if (r > 0 && r2 < this._smoothingRadius2) {\r\n                    const pB = this._particles[b];\r\n\r\n                    diffX /= r;\r\n                    diffY /= r;\r\n                    diffZ /= r;\r\n\r\n                    const w =\r\n                        this._spikyConstant *\r\n                        (this._smoothingRadius - r) *\r\n                        (this._smoothingRadius - r);\r\n                    const massRatio = pB.mass / pA.mass;\r\n                    const fp =\r\n                        w *\r\n                        ((pA.pressure + pB.pressure) /\r\n                            (2 * pA.density * pB.density)) *\r\n                        massRatio;\r\n\r\n                    pressureAccelX -= fp * diffX;\r\n                    pressureAccelY -= fp * diffY;\r\n                    pressureAccelZ -= fp * diffZ;\r\n\r\n                    const w2 = this._viscConstant * (this._smoothingRadius - r);\r\n                    const fv =\r\n                        w2 * (1 / pB.density) * massRatio * this.viscosity;\r\n\r\n                    viscosityAccelX += fv * (this._velocities[b * 3 + 0] - vaX);\r\n                    viscosityAccelY += fv * (this._velocities[b * 3 + 1] - vaY);\r\n                    viscosityAccelZ += fv * (this._velocities[b * 3 + 2] - vaZ);\r\n                }\r\n            }\r\n\r\n            pA.accelX = pressureAccelX + viscosityAccelX;\r\n            pA.accelY = pressureAccelY + viscosityAccelY;\r\n            pA.accelZ = pressureAccelZ + viscosityAccelZ;\r\n\r\n            pA.accelX += this.gravity.x;\r\n            pA.accelY += this.gravity.y;\r\n            pA.accelZ += this.gravity.z;\r\n\r\n            const mag = Math.sqrt(\r\n                pA.accelX * pA.accelX +\r\n                    pA.accelY * pA.accelY +\r\n                    pA.accelZ * pA.accelZ\r\n            );\r\n\r\n            if (mag > this.maxAcceleration) {\r\n                pA.accelX = (pA.accelX / mag) * this.maxAcceleration;\r\n                pA.accelY = (pA.accelY / mag) * this.maxAcceleration;\r\n                pA.accelZ = (pA.accelZ / mag) * this.maxAcceleration;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected _calculateTimeStep() {\r\n        let maxVelocity = 0;\r\n        let maxAcceleration = 0;\r\n        let maxSpeedOfSound = 0;\r\n\r\n        for (let a = 0; a < this.currentNumParticles; ++a) {\r\n            const pA = this._particles[a];\r\n\r\n            const velSq =\r\n                this._velocities[a * 3 + 0] * this._velocities[a * 3 + 0] +\r\n                this._velocities[a * 3 + 1] * this._velocities[a * 3 + 1] +\r\n                this._velocities[a * 3 + 2] * this._velocities[a * 3 + 2];\r\n            const accSq =\r\n                pA.accelX * pA.accelX +\r\n                pA.accelY * pA.accelY +\r\n                pA.accelZ * pA.accelZ;\r\n            const spsSq = pA.density < 0.00001 ? 0 : pA.pressure / pA.density;\r\n\r\n            if (velSq > maxVelocity) {\r\n                maxVelocity = velSq;\r\n            }\r\n            if (accSq > maxAcceleration) {\r\n                maxAcceleration = accSq;\r\n            }\r\n            if (spsSq > maxSpeedOfSound) {\r\n                maxSpeedOfSound = spsSq;\r\n            }\r\n        }\r\n\r\n        maxVelocity = Math.sqrt(maxVelocity);\r\n        maxAcceleration = Math.sqrt(maxAcceleration);\r\n        maxSpeedOfSound = Math.sqrt(maxSpeedOfSound);\r\n\r\n        const velStep = (0.4 * this.smoothingRadius) / Math.max(1, maxVelocity);\r\n        const accStep = 0.4 * Math.sqrt(this.smoothingRadius / maxAcceleration);\r\n        const spsStep = this.smoothingRadius / maxSpeedOfSound;\r\n\r\n        return Math.max(this.minTimeStep, Math.min(velStep, accStep, spsStep));\r\n    }\r\n\r\n    protected _updatePositions(deltaTime: number): void {\r\n        for (let a = 0; a < this.currentNumParticles; ++a) {\r\n            const pA = this._particles[a];\r\n\r\n            this._velocities[a * 3 + 0] += pA.accelX * deltaTime;\r\n            this._velocities[a * 3 + 1] += pA.accelY * deltaTime;\r\n            this._velocities[a * 3 + 2] += pA.accelZ * deltaTime;\r\n\r\n            const mag = Math.sqrt(\r\n                this._velocities[a * 3 + 0] * this._velocities[a * 3 + 0] +\r\n                    this._velocities[a * 3 + 1] * this._velocities[a * 3 + 1] +\r\n                    this._velocities[a * 3 + 2] * this._velocities[a * 3 + 2]\r\n            );\r\n\r\n            if (mag > this.maxVelocity) {\r\n                this._velocities[a * 3 + 0] =\r\n                    (this._velocities[a * 3 + 0] / mag) * this.maxVelocity;\r\n                this._velocities[a * 3 + 1] =\r\n                    (this._velocities[a * 3 + 1] / mag) * this.maxVelocity;\r\n                this._velocities[a * 3 + 2] =\r\n                    (this._velocities[a * 3 + 2] / mag) * this.maxVelocity;\r\n            }\r\n\r\n            this._positions[a * 3 + 0] +=\r\n                deltaTime * this._velocities[a * 3 + 0];\r\n            this._positions[a * 3 + 1] +=\r\n                deltaTime * this._velocities[a * 3 + 1];\r\n            this._positions[a * 3 + 2] +=\r\n                deltaTime * this._velocities[a * 3 + 2];\r\n        }\r\n    }\r\n}\r\n","/**\r\n * From https://github.com/matthias-research/pages/blob/master/tenMinutePhysics/11-hashing.html\r\n */\r\n\r\nexport class Hash {\r\n    private _spacing: number;\r\n    private _tableSize: number;\r\n    private _cellStart: Int32Array;\r\n    private _cellEntries: Int32Array;\r\n    private _queryIds: Int32Array;\r\n    private _querySize: number;\r\n\r\n    public get querySize() {\r\n        return this._querySize;\r\n    }\r\n\r\n    public get queryIds() {\r\n        return this._queryIds;\r\n    }\r\n\r\n    constructor(spacing: number, maxNumObjects: number) {\r\n        this._spacing = spacing;\r\n        this._tableSize = 2 * maxNumObjects;\r\n        this._cellStart = new Int32Array(this._tableSize + 1);\r\n        this._cellEntries = new Int32Array(maxNumObjects);\r\n        this._queryIds = new Int32Array(maxNumObjects);\r\n        this._querySize = 0;\r\n    }\r\n\r\n    public hashCoords(xi: number, yi: number, zi: number) {\r\n        const h = (xi * 92837111) ^ (yi * 689287499) ^ (zi * 283923481); // fantasy function\r\n        //const h = (xi * 73856093) ^ (yi * 19349663) ^ (zi * 83492791); // fantasy function\r\n        return Math.abs(h) % this._tableSize;\r\n    }\r\n\r\n    public intCoord(coord: number) {\r\n        return Math.floor(coord / this._spacing);\r\n    }\r\n\r\n    public hashPos(pos: number[] | Float32Array, nr: number) {\r\n        return this.hashCoords(\r\n            this.intCoord(pos[3 * nr]),\r\n            this.intCoord(pos[3 * nr + 1]),\r\n            this.intCoord(pos[3 * nr + 2])\r\n        );\r\n    }\r\n\r\n    public create(pos: number[] | Float32Array, numElements?: number) {\r\n        numElements = numElements ?? pos.length / 3;\r\n\r\n        const numObjects = Math.min(numElements, this._cellEntries.length);\r\n\r\n        // determine cell sizes\r\n        this._cellStart.fill(0);\r\n        this._cellEntries.fill(0);\r\n\r\n        for (let i = 0; i < numObjects; i++) {\r\n            const h = this.hashPos(pos, i);\r\n            this._cellStart[h]++;\r\n        }\r\n\r\n        // determine cells starts\r\n        let start = 0;\r\n        for (let i = 0; i < this._tableSize; i++) {\r\n            start += this._cellStart[i];\r\n            this._cellStart[i] = start;\r\n        }\r\n        this._cellStart[this._tableSize] = start; // guard\r\n\r\n        // fill in objects ids\r\n        for (let i = 0; i < numObjects; i++) {\r\n            const h = this.hashPos(pos, i);\r\n            this._cellStart[h]--;\r\n            this._cellEntries[this._cellStart[h]] = i;\r\n        }\r\n    }\r\n\r\n    public query(pos: number[] | Float32Array, nr: number, maxDist: number) {\r\n        const x0 = this.intCoord(pos[3 * nr] - maxDist);\r\n        const y0 = this.intCoord(pos[3 * nr + 1] - maxDist);\r\n        const z0 = this.intCoord(pos[3 * nr + 2] - maxDist);\r\n\r\n        const x1 = this.intCoord(pos[3 * nr] + maxDist);\r\n        const y1 = this.intCoord(pos[3 * nr + 1] + maxDist);\r\n        const z1 = this.intCoord(pos[3 * nr + 2] + maxDist);\r\n\r\n        this._querySize = 0;\r\n\r\n        for (let xi = x0; xi <= x1; xi++) {\r\n            for (let yi = y0; yi <= y1; yi++) {\r\n                for (let zi = z0; zi <= z1; zi++) {\r\n                    const h = this.hashCoords(xi, yi, zi);\r\n                    const start = this._cellStart[h];\r\n                    const end = this._cellStart[h + 1];\r\n\r\n                    for (let i = start; i < end; i++) {\r\n                        this._queryIds[this._querySize] = this._cellEntries[i];\r\n                        this._querySize++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import * as BABYLON from \"@babylonjs/core\";\r\n\r\nexport class ParticleGenerator {\r\n    private _scene: BABYLON.Scene;\r\n    private _observer: BABYLON.Nullable<BABYLON.Observer<BABYLON.Scene>>;\r\n    private _currNumParticles: number;\r\n    private _numCrossSection: number;\r\n    private _numParticles = 0;\r\n    private _positions: Float32Array;\r\n    private _velocities: Float32Array;\r\n    private _loadFromFile: string | undefined;\r\n\r\n    public particleRadius: number;\r\n\r\n    public position: BABYLON.Vector3;\r\n\r\n    public get currNumParticles() {\r\n        return this._currNumParticles;\r\n    }\r\n\r\n    public get positions() {\r\n        return this._positions;\r\n    }\r\n\r\n    public get velocities() {\r\n        return this._velocities;\r\n    }\r\n\r\n    constructor(scene: BABYLON.Scene, loadFromFile?: string) {\r\n        this._scene = scene;\r\n        this._currNumParticles = 0;\r\n        this._numCrossSection = 0;\r\n        this._positions = new Float32Array();\r\n        this._velocities = new Float32Array();\r\n        this.particleRadius = 0;\r\n        this._loadFromFile = loadFromFile;\r\n        this.position = new BABYLON.Vector3(0, 0, 0);\r\n\r\n        if (!this._loadFromFile) {\r\n            this._observer = scene.onBeforeRenderObservable.add(() => {\r\n                if (this._currNumParticles === 0) {\r\n                    if (this._positions.length / 3 >= this._numCrossSection) {\r\n                        this._currNumParticles = this._numCrossSection;\r\n                    }\r\n                } else if (this._currNumParticles < this._numParticles) {\r\n                    const px1 = this._positions[this._currNumParticles * 3 + 0];\r\n                    const py1 = this._positions[this._currNumParticles * 3 + 1];\r\n                    const pz1 = this._positions[this._currNumParticles * 3 + 2];\r\n\r\n                    const px2 =\r\n                        this._positions[\r\n                            (this._currNumParticles - this._numCrossSection) *\r\n                                3 +\r\n                                0\r\n                        ];\r\n                    const py2 =\r\n                        this._positions[\r\n                            (this._currNumParticles - this._numCrossSection) *\r\n                                3 +\r\n                                1\r\n                        ];\r\n                    const pz2 =\r\n                        this._positions[\r\n                            (this._currNumParticles - this._numCrossSection) *\r\n                                3 +\r\n                                2\r\n                        ];\r\n\r\n                    const dist = Math.sqrt(\r\n                        (px1 - px2) * (px1 - px2) +\r\n                            (py1 - py2) * (py1 - py2) +\r\n                            (pz1 - pz2) * (pz1 - pz2)\r\n                    );\r\n\r\n                    if (dist > this.particleRadius * 2) {\r\n                        this._currNumParticles += this._numCrossSection;\r\n                    }\r\n                }\r\n            });\r\n        } else {\r\n            this._observer = null;\r\n        }\r\n    }\r\n\r\n    public async generateParticles(\r\n        numTotParticles: number,\r\n        regenerateAll = true\r\n    ) {\r\n        if (this._loadFromFile) {\r\n            await this._generateParticlesFromFile(this._loadFromFile);\r\n        } else {\r\n            this._generateParticles(numTotParticles, regenerateAll);\r\n        }\r\n    }\r\n\r\n    private async _generateParticlesFromFile(fileName: string) {\r\n        const data = await (\r\n            await fetch(`/assets/particles/${fileName}.txt`)\r\n        ).text();\r\n\r\n        const lines = data.replace(\"\\r\", \"\").split(\"\\n\");\r\n\r\n        const particlePos = [];\r\n        const particleVel = [];\r\n\r\n        let numParticles = 0;\r\n\r\n        for (let i = 1; i < lines.length; ++i) {\r\n            const line = lines[i];\r\n            const vals = line.split(\",\");\r\n            if (line.charAt(0) === '\"' || vals.length < 4) {\r\n                continue;\r\n            }\r\n            particlePos.push(\r\n                parseFloat(vals[1]) + this.position.x,\r\n                parseFloat(vals[2]) + +this.position.y,\r\n                parseFloat(vals[3]) + this.position.z\r\n            );\r\n            particleVel.push(0, 0, 0);\r\n            numParticles++;\r\n        }\r\n\r\n        const particleStartIndex = 0;\r\n\r\n        this._numParticles = this._numCrossSection = numParticles;\r\n\r\n        if (this._numParticles > this._positions.length / 3) {\r\n            const newPositions = new Float32Array(this._numParticles * 3);\r\n            const newVelocities = new Float32Array(this._numParticles * 3);\r\n\r\n            newPositions.set(this._positions, 0);\r\n            newVelocities.set(this._velocities, 0);\r\n\r\n            this._positions = newPositions;\r\n            this._velocities = newVelocities;\r\n        }\r\n\r\n        this._positions.set(particlePos, particleStartIndex * 3);\r\n        this._velocities.set(particleVel, particleStartIndex * 3);\r\n\r\n        this._currNumParticles = this._numParticles;\r\n    }\r\n\r\n    private _generateParticles(\r\n        numTotParticles: number,\r\n        regenerateAll = true\r\n    ): void {\r\n        if (this._numParticles >= numTotParticles && !regenerateAll) {\r\n            this._numParticles = numTotParticles;\r\n            this._currNumParticles = Math.min(\r\n                this._currNumParticles,\r\n                this._numParticles\r\n            );\r\n            return;\r\n        }\r\n\r\n        const dimX = 12,\r\n            dimY = 12;\r\n\r\n        const particlePos = [];\r\n        const particleVel = [];\r\n\r\n        const distance = this.particleRadius * 2;\r\n        const jitter = distance * 0.1;\r\n        const getJitter = () => Math.random() * jitter - jitter / 2;\r\n\r\n        const particleStartIndex = regenerateAll ? 0 : this._currNumParticles;\r\n\r\n        this._numParticles = particleStartIndex;\r\n\r\n        while (this._numParticles <= numTotParticles - this._numCrossSection) {\r\n            let yCoord = (dimY / 2) * distance;\r\n\r\n            this._numCrossSection = 0;\r\n            for (let y = 1; y < dimY - 1; ++y) {\r\n                const angle = (y * Math.PI) / (dimY - 1);\r\n\r\n                let x2 = ((Math.sin(angle) * dimX) / 2) * distance;\r\n                if (x2 < 0) {\r\n                    x2 = 0;\r\n                }\r\n\r\n                let xCoord = -x2;\r\n                while (xCoord <= x2) {\r\n                    const xc =\r\n                        xCoord === -x2 || xCoord + distance > x2\r\n                            ? xCoord\r\n                            : xCoord + getJitter();\r\n                    const yc =\r\n                        xCoord === -x2 || xCoord + distance > x2\r\n                            ? yCoord\r\n                            : yCoord + getJitter();\r\n                    const zCoord =\r\n                        xCoord === -x2 || xCoord + distance > x2\r\n                            ? 0.49\r\n                            : 0.49 + getJitter();\r\n                    particlePos.push(\r\n                        xc + this.position.x,\r\n                        yc + this.position.y,\r\n                        zCoord + this.position.z\r\n                    );\r\n                    particleVel.push(\r\n                        (Math.random() - 0.5) * 0.03,\r\n                        (Math.random() - 0.5) * 0.03,\r\n                        (Math.random() - 1.0) * 0.03 - 1.5\r\n                    );\r\n                    xCoord += distance;\r\n                    this._numParticles++;\r\n                    this._numCrossSection++;\r\n                }\r\n\r\n                yCoord += distance;\r\n            }\r\n        }\r\n\r\n        if (this._numParticles > this._positions.length / 3) {\r\n            const newPositions = new Float32Array(this._numParticles * 3);\r\n            const newVelocities = new Float32Array(this._numParticles * 3);\r\n\r\n            newPositions.set(this._positions, 0);\r\n            newVelocities.set(this._velocities, 0);\r\n\r\n            this._positions = newPositions;\r\n            this._velocities = newVelocities;\r\n        }\r\n\r\n        this._positions.set(particlePos, particleStartIndex * 3);\r\n        this._velocities.set(particleVel, particleStartIndex * 3);\r\n\r\n        this._currNumParticles = particleStartIndex;\r\n    }\r\n\r\n    public dispose(): void {\r\n        this._scene.onBeforeRenderObservable.remove(this._observer);\r\n        this._observer = null;\r\n    }\r\n}\r\n","export default __webpack_public_path__ + \"1927c2ee10e174350b0f2680480bac03.png\";","export default __webpack_public_path__ + \"42501ae63687985d3bdf75e684bf30b8.png\";","export default __webpack_public_path__ + \"de78498b6fd56d907b099104d11e9a2a.png\";","export default __webpack_public_path__ + \"cb9384751f5882e7f6eb9f8d4f333114.png\";","import * as BABYLON from \"@babylonjs/core\";\r\n\r\n// Textures from https://freepbr.com/materials/sulphuric-rock/\r\nimport rockBaseColor from \"../../assets/materials/sulphuric-rock_albedo.png\";\r\nimport rockRoughness from \"../../assets/materials/sulphuric-rock_roughness.png\";\r\nimport rockNormal from \"../../assets/materials/sulphuric-rock_normal-ogl.png\";\r\n\r\nimport marbleBaseColor from \"../../assets/materials/Marble08_1K_BaseColor.png\";\r\n\r\nconst eps = 0.0001;\r\n\r\nconst eps1 = new BABYLON.Vector3(eps, -eps, -eps);\r\nconst eps2 = new BABYLON.Vector3(-eps, -eps, eps);\r\nconst eps3 = new BABYLON.Vector3(-eps, eps, -eps);\r\nconst eps4 = new BABYLON.Vector3(eps, eps, eps);\r\n\r\nconst dir1 = new BABYLON.Vector3(1, -1, -1);\r\nconst dir2 = new BABYLON.Vector3(-1, -1, 1);\r\nconst dir3 = new BABYLON.Vector3(-1, 1, -1);\r\nconst dir4 = new BABYLON.Vector3(1, 1, 1);\r\n\r\nexport interface SDFArray {\r\n    origin: BABYLON.Vector3;\r\n    dimX: number;\r\n    dimY: number;\r\n    dimZ: number;\r\n    step: number;\r\n    data: number[];\r\n}\r\n\r\nexport interface ICollisionShape {\r\n    params: Array<any>;\r\n    sdEvaluate: (p: BABYLON.Vector3, ...args: any[]) => number;\r\n    computeNormal: (\r\n        pos: BABYLON.Vector3,\r\n        shape: ICollisionShape,\r\n        normal: BABYLON.Vector3\r\n    ) => void;\r\n    createMesh?: (\r\n        scene: BABYLON.Scene,\r\n        shape: ICollisionShape,\r\n        ...args: any[]\r\n    ) => Promise<BABYLON.Mesh>;\r\n    transf: BABYLON.Matrix;\r\n    invTransf: BABYLON.Matrix;\r\n    scale: number;\r\n    position?: BABYLON.Vector3;\r\n    rotation?: BABYLON.Vector3;\r\n    rotationQuaternion?: BABYLON.Quaternion;\r\n    mesh?: BABYLON.Mesh;\r\n    dragPlane: BABYLON.Nullable<BABYLON.Vector3>;\r\n    disabled?: boolean;\r\n    collisionRestitution?: number;\r\n}\r\n\r\nexport class SDFHelper {\r\n    public static CreateBox(\r\n        scene: BABYLON.Scene,\r\n        shape: ICollisionShape,\r\n        extents: BABYLON.Vector3\r\n    ) {\r\n        const box = BABYLON.MeshBuilder.CreateBox(\r\n            \"box\",\r\n            {\r\n                width: extents.x * 2,\r\n                height: extents.y * 2,\r\n                depth: extents.z * 2,\r\n            },\r\n            scene\r\n        );\r\n\r\n        const material = new BABYLON.PBRMaterial(\"boxMat\", scene);\r\n\r\n        material.metallic = 0;\r\n        material.roughness = 0.9;\r\n        material.albedoTexture = new BABYLON.Texture(\r\n            \"https://playground.babylonjs.com/textures/wood.jpg\",\r\n            scene\r\n        );\r\n        material.cullBackFaces = true;\r\n\r\n        box.material = material;\r\n\r\n        return Promise.resolve(box);\r\n    }\r\n\r\n    public static CreateSphere(\r\n        scene: BABYLON.Scene,\r\n        shape: ICollisionShape,\r\n        s: number\r\n    ) {\r\n        const sphere = BABYLON.MeshBuilder.CreateSphere(\r\n            \"sphere\",\r\n            { diameter: s * 2, segments: 16 },\r\n            scene\r\n        );\r\n\r\n        const material = new BABYLON.PBRMaterial(\"sphereMat\", scene);\r\n\r\n        material.metallic = 1;\r\n        material.roughness = 0.05;\r\n        material.albedoTexture = new BABYLON.Texture(marbleBaseColor, scene);\r\n        material.cullBackFaces = true;\r\n\r\n        sphere.material = material;\r\n\r\n        return Promise.resolve(sphere);\r\n    }\r\n\r\n    public static CreateCutHollowSphere(\r\n        scene: BABYLON.Scene,\r\n        shape: ICollisionShape,\r\n        radius: number,\r\n        planeDist: number,\r\n        thickness: number,\r\n        segments: number\r\n    ) {\r\n        thickness = thickness / radius;\r\n\r\n        const sphere = BABYLON.MeshBuilder.CreateSphere(\r\n            \"sphere\",\r\n            { diameter: radius * 2, segments },\r\n            scene\r\n        );\r\n        const plane = BABYLON.MeshBuilder.CreatePlane(\r\n            \"plane\",\r\n            { size: radius * 2 },\r\n            scene\r\n        );\r\n\r\n        plane.rotation.y = Math.PI / 2;\r\n        plane.position.x = planeDist;\r\n\r\n        const csg1 = BABYLON.CSG.FromMesh(sphere);\r\n        const csgp = BABYLON.CSG.FromMesh(plane);\r\n\r\n        sphere.dispose();\r\n        plane.dispose();\r\n\r\n        csg1.subtractInPlace(csgp);\r\n\r\n        const mesh = csg1.toMesh(\"sppl\");\r\n\r\n        mesh.computeWorldMatrix(true);\r\n        mesh.refreshBoundingInfo();\r\n\r\n        mesh.scaling.setAll(1 - thickness);\r\n        mesh.position.x =\r\n            mesh.getBoundingInfo().boundingBox.maximumWorld.x * thickness;\r\n\r\n        const csg2 = BABYLON.CSG.FromMesh(mesh);\r\n\r\n        mesh.dispose();\r\n\r\n        csg1.subtractInPlace(csg2);\r\n\r\n        const meshFinal = csg1.toMesh(\"cutHollowSphere\");\r\n\r\n        meshFinal.rotation.z = Math.PI / 2;\r\n        meshFinal.bakeCurrentTransformIntoVertices();\r\n\r\n        const material = new BABYLON.PBRMaterial(\"cutHollowSphereMat\", scene);\r\n\r\n        material.metallic = 1;\r\n        material.roughness = 0.05;\r\n        material.albedoTexture = new BABYLON.Texture(marbleBaseColor, scene);\r\n        material.cullBackFaces = true;\r\n\r\n        meshFinal.material = material;\r\n\r\n        return Promise.resolve(meshFinal);\r\n    }\r\n\r\n    public static CreateVerticalCylinder(\r\n        scene: BABYLON.Scene,\r\n        shape: ICollisionShape,\r\n        r: number,\r\n        h: number,\r\n        segments: number\r\n    ) {\r\n        const cylinder = BABYLON.MeshBuilder.CreateCylinder(\r\n            \"cylinder\",\r\n            { diameter: r * 2, height: h, tessellation: segments },\r\n            scene\r\n        );\r\n\r\n        const material = new BABYLON.PBRMaterial(\"cylinderMat\", scene);\r\n\r\n        material.metallic = 1;\r\n        material.roughness = 0.05;\r\n        material.albedoTexture = new BABYLON.Texture(marbleBaseColor, scene);\r\n        material.cullBackFaces = true;\r\n\r\n        cylinder.material = material;\r\n\r\n        return Promise.resolve(cylinder);\r\n    }\r\n\r\n    public static CreateTerrain(\r\n        scene: BABYLON.Scene,\r\n        shape: ICollisionShape,\r\n        size: number\r\n    ) {\r\n        const ground = BABYLON.MeshBuilder.CreateGroundFromHeightMap(\r\n            \"terrain\",\r\n            \"https://playground.babylonjs.com/textures/heightMap.png\",\r\n            {\r\n                width: size,\r\n                height: size,\r\n                subdivisions: 128,\r\n                maxHeight: size / 5,\r\n                onReady: () => ground!.updateCoordinateHeights(),\r\n            },\r\n            scene\r\n        );\r\n\r\n        const mat = new BABYLON.PBRMaterial(\"mat\", scene);\r\n\r\n        mat.metallicTexture = new BABYLON.Texture(rockRoughness, scene);\r\n        mat.albedoTexture = new BABYLON.Texture(rockBaseColor, scene);\r\n        mat.bumpTexture = new BABYLON.Texture(rockNormal, scene);\r\n        mat.useRoughnessFromMetallicTextureGreen = true;\r\n        mat.metallic = 0;\r\n        mat.roughness = 1;\r\n\r\n        ground.material = mat;\r\n\r\n        shape.params.push(ground);\r\n\r\n        return Promise.resolve(ground);\r\n    }\r\n\r\n    protected static _ParseSDFData(textData: string): SDFArray {\r\n        const lines = textData.replace(\"\\r\", \"\").split(\"\\n\");\r\n\r\n        const dimLine = lines[0].split(\" \");\r\n\r\n        const dimX = parseFloat(dimLine[0]);\r\n        const dimY = parseFloat(dimLine[1]);\r\n        const dimZ = parseFloat(dimLine[2]);\r\n\r\n        const originLine = lines[1].split(\" \");\r\n\r\n        const origin = new BABYLON.Vector3(\r\n            parseFloat(originLine[0]),\r\n            parseFloat(originLine[1]),\r\n            parseFloat(originLine[2])\r\n        );\r\n\r\n        const step = parseFloat(lines[2]);\r\n\r\n        const data: number[] = [];\r\n\r\n        for (let i = 3; i < lines.length; ++i) {\r\n            const val = lines[i];\r\n            if (val.length === 0) {\r\n                continue;\r\n            }\r\n            data.push(parseFloat(val));\r\n        }\r\n\r\n        return {\r\n            dimX,\r\n            dimY,\r\n            dimZ,\r\n            origin,\r\n            step,\r\n            data,\r\n        };\r\n    }\r\n\r\n    public static CreateMesh(\r\n        scene: BABYLON.Scene,\r\n        shape: ICollisionShape,\r\n        meshFilename: string,\r\n        sdfFilename: string,\r\n        createNormals: boolean\r\n    ): Promise<BABYLON.Mesh> {\r\n        return new Promise((resolve) => {\r\n            const promises = [\r\n                BABYLON.SceneLoader.ImportMeshAsync(\r\n                    \"\",\r\n                    \"/assets/scenes/\",\r\n                    meshFilename,\r\n                    scene\r\n                ),\r\n                new Promise((resolve) => {\r\n                    fetch(\"/assets/sdf/\" + sdfFilename).then((response) => {\r\n                        response.text().then((text) => {\r\n                            shape.params.push(SDFHelper._ParseSDFData(text));\r\n                            resolve(void 0);\r\n                        });\r\n                    });\r\n                }),\r\n            ];\r\n\r\n            Promise.all(promises).then((results) => {\r\n                const meshes = results[0] as BABYLON.ISceneLoaderAsyncResult;\r\n                const mesh = meshes.meshes[0] as BABYLON.Mesh;\r\n                if (!mesh.material) {\r\n                    const material = new BABYLON.PBRMaterial(\"meshMat\", scene);\r\n\r\n                    material.metallic = 1;\r\n                    material.roughness = 0.05;\r\n                    material.albedoTexture = new BABYLON.Texture(\r\n                        rockBaseColor,\r\n                        scene\r\n                    );\r\n                    material.cullBackFaces = true;\r\n\r\n                    mesh.material = material;\r\n                }\r\n                if (createNormals) {\r\n                    mesh.createNormals(false);\r\n                }\r\n                mesh.scaling.setAll(shape.scale);\r\n                resolve(mesh);\r\n            });\r\n        });\r\n    }\r\n\r\n    // SD functions from https://iquilezles.org/articles/distfunctions/\r\n    public static SDBox(p: BABYLON.Vector3, b: BABYLON.Vector3) {\r\n        const q = BABYLON.TmpVectors.Vector3[0];\r\n        q.copyFromFloats(Math.abs(p.x), Math.abs(p.y), Math.abs(p.z));\r\n        q.subtractInPlace(b);\r\n\r\n        const tmp = Math.min(Math.max(q.x, q.y, q.z), 0);\r\n\r\n        q.maximizeInPlaceFromFloats(0, 0, 0);\r\n\r\n        return q.length() + tmp;\r\n    }\r\n\r\n    public static SDSphere(p: BABYLON.Vector3, s: number) {\r\n        return p.length() - s;\r\n    }\r\n\r\n    public static SDPlane(p: BABYLON.Vector3, n: BABYLON.Vector3, h: number) {\r\n        return BABYLON.Vector3.Dot(p, n) + h;\r\n    }\r\n\r\n    public static SDCutHollowSphere(\r\n        p: BABYLON.Vector3,\r\n        r: number,\r\n        h: number,\r\n        t: number\r\n    ) {\r\n        // sampling independent computations (only depend on shape)\r\n        const w = Math.sqrt(r * r - h * h);\r\n\r\n        // sampling dependant computations\r\n        const qx = Math.sqrt(p.x * p.x + p.z * p.z);\r\n        const qy = p.y;\r\n\r\n        if (h * qx < w * qy) {\r\n            return Math.sqrt((qx - w) * (qx - w) + (qy - h) * (qy - h));\r\n        }\r\n\r\n        return Math.abs(Math.sqrt(qx * qx + qy * qy) - r) - t;\r\n    }\r\n\r\n    public static SDVerticalCylinder(p: BABYLON.Vector3, r: number, h: number) {\r\n        const dx = Math.abs(Math.sqrt(p.x * p.x + p.z * p.z)) - r;\r\n        const dy = Math.abs(p.y) - h;\r\n        const dx2 = Math.max(dx, 0);\r\n        const dy2 = Math.max(dy, 0);\r\n\r\n        return (\r\n            Math.min(Math.max(dx, dy), 0.0) + Math.sqrt(dx2 * dx2 + dy2 * dy2)\r\n        );\r\n    }\r\n\r\n    public static SDTerrain(\r\n        p: BABYLON.Vector3,\r\n        size: number,\r\n        terrain: BABYLON.GroundMesh\r\n    ) {\r\n        return p.y - terrain.getHeightAtCoordinates(p.x, p.z);\r\n    }\r\n\r\n    public static SDMesh(\r\n        p: BABYLON.Vector3,\r\n        meshFilename: string,\r\n        sdfFilename: string,\r\n        createNormals: boolean,\r\n        sdf: SDFArray\r\n    ) {\r\n        const x = (p.x - sdf.origin.x) / sdf.step;\r\n        const y = (p.y - sdf.origin.y) / sdf.step;\r\n        const z = (p.z - sdf.origin.z) / sdf.step;\r\n\r\n        let gx = Math.floor(x);\r\n        let gy = Math.floor(y);\r\n        let gz = Math.floor(z);\r\n\r\n        gx = Math.max(Math.min(gx, sdf.dimX - 2), 0);\r\n        gy = Math.max(Math.min(gy, sdf.dimY - 2), 0);\r\n        gz = Math.max(Math.min(gz, sdf.dimZ - 2), 0);\r\n\r\n        // trilinear filtering\r\n        const fx = x - gx;\r\n        const fy = y - gy;\r\n        const fz = z - gz;\r\n\r\n        const a00 = sdf.data[gz * sdf.dimY * sdf.dimX + gy * sdf.dimX + gx];\r\n        const a10 = sdf.data[gz * sdf.dimY * sdf.dimX + gy * sdf.dimX + gx + 1];\r\n        const a11 =\r\n            sdf.data[gz * sdf.dimY * sdf.dimX + (gy + 1) * sdf.dimX + gx + 1];\r\n        const a01 =\r\n            sdf.data[gz * sdf.dimY * sdf.dimX + (gy + 1) * sdf.dimX + gx];\r\n\r\n        const a0 = a00 * (1 - fx) + a10 * fx;\r\n        const a1 = a01 * (1 - fx) + a11 * fx;\r\n        const a = a0 * (1 - fy) + a1 * fy;\r\n\r\n        const b00 =\r\n            sdf.data[(gz + 1) * sdf.dimY * sdf.dimX + gy * sdf.dimX + gx];\r\n        const b10 =\r\n            sdf.data[(gz + 1) * sdf.dimY * sdf.dimX + gy * sdf.dimX + gx + 1];\r\n        const b11 =\r\n            sdf.data[\r\n                (gz + 1) * sdf.dimY * sdf.dimX + (gy + 1) * sdf.dimX + gx + 1\r\n            ];\r\n        const b01 =\r\n            sdf.data[(gz + 1) * sdf.dimY * sdf.dimX + (gy + 1) * sdf.dimX + gx];\r\n\r\n        const b0 = b00 * (1 - fx) + b10 * fx;\r\n        const b1 = b01 * (1 - fx) + b11 * fx;\r\n        const b = b0 * (1 - fy) + b1 * fy;\r\n\r\n        const d = a * (1 - fz) + b * fz;\r\n        //const d = sdf.data[gz * sdf.dimY * sdf.dimX + gy * sdf.dimX + gx];\r\n\r\n        return d;\r\n    }\r\n\r\n    // normal computed with the Tetrahedron technique, see https://iquilezles.org/articles/normalsSDF/\r\n    public static ComputeSDFNormal(\r\n        pos: BABYLON.Vector3,\r\n        shape: ICollisionShape,\r\n        normal: BABYLON.Vector3\r\n    ) {\r\n        const posTemp = BABYLON.TmpVectors.Vector3[5];\r\n        const dir = BABYLON.TmpVectors.Vector3[6];\r\n\r\n        normal.copyFromFloats(0, 0, 0);\r\n\r\n        posTemp.copyFrom(pos);\r\n        dir.copyFrom(dir1);\r\n        normal.addInPlace(\r\n            dir.scaleInPlace(\r\n                shape.sdEvaluate(posTemp.addInPlace(eps1), ...shape.params)\r\n            )\r\n        );\r\n\r\n        posTemp.copyFrom(pos);\r\n        dir.copyFrom(dir2);\r\n        normal.addInPlace(\r\n            dir.scaleInPlace(\r\n                shape.sdEvaluate(posTemp.addInPlace(eps2), ...shape.params)\r\n            )\r\n        );\r\n\r\n        posTemp.copyFrom(pos);\r\n        dir.copyFrom(dir3);\r\n        normal.addInPlace(\r\n            dir.scaleInPlace(\r\n                shape.sdEvaluate(posTemp.addInPlace(eps3), ...shape.params)\r\n            )\r\n        );\r\n\r\n        posTemp.copyFrom(pos);\r\n        dir.copyFrom(dir4);\r\n        normal.addInPlace(\r\n            dir.scaleInPlace(\r\n                shape.sdEvaluate(posTemp.addInPlace(eps4), ...shape.params)\r\n            )\r\n        );\r\n\r\n        BABYLON.Vector3.TransformNormalToRef(normal, shape.transf, normal);\r\n\r\n        normal.normalize();\r\n    }\r\n\r\n    public static ComputeTerrainNormal(\r\n        pos: BABYLON.Vector3,\r\n        shape: ICollisionShape,\r\n        normal: BABYLON.Vector3\r\n    ) {\r\n        const terrain = shape.params[1] as BABYLON.GroundMesh;\r\n\r\n        terrain.getNormalAtCoordinatesToRef(pos.x, pos.z, normal);\r\n    }\r\n}\r\n","import * as BABYLON from \"@babylonjs/core\";\r\n\r\nimport * as LiLGUI from \"lil-gui\";\r\n\r\nimport {\r\n    FluidRenderer,\r\n    IFluidRenderingRenderObject,\r\n} from \"./FluidRenderer/fluidRenderer\";\r\nimport { FluidRendererGUI } from \"./FluidRenderer/fluidRendererGUI\";\r\nimport { FluidRenderingObjectVertexBuffer } from \"./FluidRenderer/fluidRenderingObjectVertexBuffer\";\r\nimport { FluidSimulator } from \"./FluidSimulator2/fluidSimulator\";\r\nimport { ParticleGenerator } from \"./Utils/particleGenerator\";\r\nimport { ICollisionShape, SDFHelper } from \"./Utils/sdfHelper\";\r\n\r\nconst envNames = [\r\n    \"Environment\",\r\n    \"Country\",\r\n    \"Parking\",\r\n    \"Night\",\r\n    \"Canyon\",\r\n    \"Studio\",\r\n];\r\nconst envFile = [\r\n    \"environment.env\",\r\n    \"country.env\",\r\n    \"parking.env\",\r\n    \"night.env\",\r\n    \"Runyon_Canyon_A_2k_cube_specular.env\",\r\n    \"Studio_Softbox_2Umbrellas_cube_specular.env\",\r\n];\r\n\r\nexport class FluidSimulationDemoBase {\r\n    protected _scene: BABYLON.Scene;\r\n    protected _engine: BABYLON.Engine;\r\n    protected _gui: BABYLON.Nullable<LiLGUI.GUI>;\r\n    protected _environmentFile: string;\r\n    protected _noFluidSimulation: boolean;\r\n\r\n    protected _fluidRenderer: FluidRenderer;\r\n    protected _fluidRenderObject: IFluidRenderingRenderObject;\r\n    protected _fluidRendererGUI: BABYLON.Nullable<FluidRendererGUI>;\r\n    protected _fluidSim: BABYLON.Nullable<FluidSimulator>;\r\n    protected _particleGenerator: BABYLON.Nullable<ParticleGenerator>;\r\n    protected _numParticles: number;\r\n    protected _paused: boolean;\r\n    protected _sceneObserver: BABYLON.Nullable<BABYLON.Observer<BABYLON.Scene>>;\r\n    protected _loadParticlesFromFile: boolean;\r\n    protected _shapeCollisionRestitution: number;\r\n    protected _collisionObjectPromises: Array<\r\n        Promise<[BABYLON.Nullable<BABYLON.Mesh>, ICollisionShape]>\r\n    >;\r\n    protected _collisionObjects: Array<\r\n        [BABYLON.Nullable<BABYLON.Mesh>, ICollisionShape]\r\n    >;\r\n\r\n    protected _fluidSimGUIElements: Array<[LiLGUI.Controller, any, string]>;\r\n\r\n    protected static _DemoList: Array<{\r\n        name: string;\r\n        factory: () => FluidSimulationDemoBase;\r\n    }> = [];\r\n    protected static _CurrentDemo: FluidSimulationDemoBase;\r\n    protected static _CurrentDemoIndex: number;\r\n\r\n    public static AddDemo(\r\n        name: string,\r\n        factory: () => FluidSimulationDemoBase\r\n    ): void {\r\n        FluidSimulationDemoBase._DemoList.push({ name, factory });\r\n    }\r\n\r\n    public static StartDemo(index: number): void {\r\n        FluidSimulationDemoBase._CurrentDemo?.dispose();\r\n        FluidSimulationDemoBase._CurrentDemoIndex = index;\r\n        FluidSimulationDemoBase._CurrentDemo =\r\n            FluidSimulationDemoBase._DemoList[index].factory();\r\n        FluidSimulationDemoBase._CurrentDemo.run();\r\n    }\r\n\r\n    constructor(\r\n        scene: BABYLON.Scene,\r\n        noFluidSimulation = false,\r\n        particleFileName?: string\r\n    ) {\r\n        this._scene = scene;\r\n        this._engine = scene.getEngine();\r\n        this._fluidRenderer = scene.enableFluidRenderer()!;\r\n        this._numParticles = 6000;\r\n        this._paused = false;\r\n        this._gui = null;\r\n        this._fluidRendererGUI = null;\r\n        this._sceneObserver = null;\r\n        this._fluidSim = null;\r\n        this._particleGenerator = null;\r\n        this._loadParticlesFromFile = particleFileName !== undefined;\r\n        this._shapeCollisionRestitution = 0.999;\r\n        this._collisionObjectPromises = [];\r\n        this._collisionObjects = [];\r\n        this._environmentFile = \"Environment\";\r\n        this._fluidSimGUIElements = [];\r\n        this._noFluidSimulation = noFluidSimulation;\r\n\r\n        const particleRadius = 0.02;\r\n        const camera = scene.activeCameras?.[0] ?? scene.activeCamera!;\r\n\r\n        camera.storeState();\r\n\r\n        // Setup the fluid renderer object\r\n        const vertexBuffers: { [name: string]: BABYLON.VertexBuffer } = {};\r\n\r\n        this._fluidRenderObject = this._fluidRenderer.addVertexBuffer(\r\n            vertexBuffers,\r\n            0,\r\n            false,\r\n            undefined,\r\n            camera\r\n        );\r\n\r\n        this._fluidRenderObject.targetRenderer.enableBlurDepth = true;\r\n        this._fluidRenderObject.targetRenderer.blurDepthFilterSize = 20;\r\n        this._fluidRenderObject.targetRenderer.blurDepthNumIterations = 5;\r\n        this._fluidRenderObject.targetRenderer.blurDepthDepthScale = 10;\r\n        this._fluidRenderObject.targetRenderer.fluidColor = new BABYLON.Color3(\r\n            1 - 0.5,\r\n            1 - 0.2,\r\n            1 - 0.05\r\n        );\r\n        this._fluidRenderObject.targetRenderer.density = 2.2;\r\n        this._fluidRenderObject.targetRenderer.refractionStrength = 0.02;\r\n        this._fluidRenderObject.targetRenderer.specularPower = 150;\r\n        this._fluidRenderObject.targetRenderer.blurThicknessFilterSize = 10;\r\n        this._fluidRenderObject.targetRenderer.blurThicknessNumIterations = 2;\r\n        this._fluidRenderObject.targetRenderer.dirLight = new BABYLON.Vector3(\r\n            2,\r\n            -1,\r\n            1\r\n        );\r\n        this._fluidRenderObject.object.particleSize = particleRadius * 2 * 2;\r\n        this._fluidRenderObject.object.particleThicknessAlpha =\r\n            this._fluidRenderObject.object.particleSize;\r\n        this._fluidRenderObject.object.useVelocity =\r\n            this._fluidRenderObject.targetRenderer.useVelocity;\r\n        this._fluidRenderObject.targetRenderer.minimumThickness =\r\n            this._fluidRenderObject.object.particleThicknessAlpha / 2;\r\n\r\n        // Setup the fluid simulator / particle generator\r\n        if (!noFluidSimulation) {\r\n            this._fluidSim = new FluidSimulator();\r\n\r\n            this._fluidSim.smoothingRadius = particleRadius * 2;\r\n            this._fluidSim.maxVelocity = 3;\r\n\r\n            (window as any).fsim = this._fluidSim;\r\n\r\n            this._particleGenerator = new ParticleGenerator(\r\n                this._scene,\r\n                particleFileName\r\n            );\r\n            this._particleGenerator.particleRadius =\r\n                this._fluidSim.smoothingRadius / 2;\r\n            this._particleGenerator.position.y = 0.5;\r\n        }\r\n    }\r\n\r\n    protected _setEnvironment() {\r\n        const idx = envNames.indexOf(this._environmentFile);\r\n        this._scene.environmentTexture =\r\n            BABYLON.CubeTexture.CreateFromPrefilteredData(\r\n                \"https://playground.babylonjs.com/textures/\" + envFile[idx],\r\n                this._scene\r\n            );\r\n        this._scene.createDefaultSkybox(this._scene.environmentTexture);\r\n    }\r\n\r\n    public async run() {\r\n        this._setEnvironment();\r\n\r\n        this._collisionObjects = await Promise.all(\r\n            this._collisionObjectPromises\r\n        );\r\n\r\n        this._run();\r\n    }\r\n\r\n    protected async _run() {\r\n        await this._generateParticles();\r\n\r\n        if (this._particleGenerator && this._loadParticlesFromFile) {\r\n            this._numParticles = this._particleGenerator.currNumParticles;\r\n        }\r\n\r\n        this._fluidRendererGUI = new FluidRendererGUI(this._scene, false);\r\n\r\n        this._makeGUI();\r\n\r\n        if (!this._noFluidSimulation) {\r\n            this._sceneObserver = this._scene.onBeforeRenderObservable.add(\r\n                () => {\r\n                    this._fluidSim!.currentNumParticles = Math.min(\r\n                        this._numParticles,\r\n                        this._particleGenerator!.currNumParticles\r\n                    );\r\n                    (\r\n                        this._fluidRenderObject\r\n                            .object as FluidRenderingObjectVertexBuffer\r\n                    ).setNumParticles(this._fluidSim!.currentNumParticles);\r\n\r\n                    if (!this._paused) {\r\n                        this._fluidSim!.update(1 / 100);\r\n                        this._checkCollisions(\r\n                            this._fluidRenderObject.object.particleSize / 2\r\n                        );\r\n                    }\r\n\r\n                    if (\r\n                        this._fluidRenderObject &&\r\n                        this._fluidRenderObject.object.vertexBuffers[\"position\"]\r\n                    ) {\r\n                        this._fluidRenderObject.object.vertexBuffers[\r\n                            \"position\"\r\n                        ].updateDirectly(this._fluidSim!.positions, 0);\r\n                        this._fluidRenderObject.object.vertexBuffers[\r\n                            \"velocity\"\r\n                        ].updateDirectly(this._fluidSim!.velocities, 0);\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n    public disposeCollisionObject(index: number): void {\r\n        const shape = this._collisionObjects[index][1];\r\n\r\n        shape?.mesh?.material?.dispose();\r\n        shape?.mesh?.dispose();\r\n\r\n        this._collisionObjects.splice(index, 1);\r\n        this._collisionObjectPromises.splice(index, 1);\r\n    }\r\n\r\n    public dispose(): void {\r\n        while (this._collisionObjects.length > 0) {\r\n            this.disposeCollisionObject(0);\r\n        }\r\n\r\n        this._scene.onBeforeRenderObservable.remove(this._sceneObserver);\r\n        this._fluidRendererGUI?.dispose();\r\n        this._gui?.destroy();\r\n        this._fluidSim?.dispose();\r\n        this._particleGenerator?.dispose();\r\n        this._fluidRenderer.removeRenderObject(this._fluidRenderObject);\r\n\r\n        const camera =\r\n            this._scene.activeCameras?.[0] ?? this._scene.activeCamera!;\r\n\r\n        (camera as BABYLON.ArcRotateCamera)._restoreStateValues();\r\n    }\r\n\r\n    public addCollisionSphere(\r\n        position: BABYLON.Vector3,\r\n        radius: number,\r\n        dragPlane: BABYLON.Nullable<BABYLON.Vector3> = new BABYLON.Vector3(\r\n            0,\r\n            1,\r\n            0\r\n        ),\r\n        collisionRestitution?: number,\r\n        dontCreateMesh?: boolean\r\n    ): Promise<[BABYLON.Nullable<BABYLON.Mesh>, ICollisionShape]> {\r\n        const collisionShape = {\r\n            params: [radius],\r\n            createMesh: SDFHelper.CreateSphere,\r\n            sdEvaluate: SDFHelper.SDSphere,\r\n            computeNormal: SDFHelper.ComputeSDFNormal,\r\n            position: position.clone(),\r\n            mesh: null as any,\r\n            transf: new BABYLON.Matrix(),\r\n            scale: 1,\r\n            invTransf: new BABYLON.Matrix(),\r\n            dragPlane,\r\n            collisionRestitution,\r\n        };\r\n\r\n        const promise: Promise<\r\n            [BABYLON.Nullable<BABYLON.Mesh>, ICollisionShape]\r\n        > = dontCreateMesh\r\n            ? Promise.resolve([null, collisionShape])\r\n            : this._createMeshForCollision(collisionShape);\r\n\r\n        this._collisionObjectPromises.push(promise);\r\n\r\n        return promise;\r\n    }\r\n\r\n    public addCollisionBox(\r\n        position: BABYLON.Vector3,\r\n        rotation: BABYLON.Vector3,\r\n        extents: BABYLON.Vector3,\r\n        dragPlane: BABYLON.Nullable<BABYLON.Vector3> = new BABYLON.Vector3(\r\n            0,\r\n            1,\r\n            0\r\n        ),\r\n        collisionRestitution?: number,\r\n        dontCreateMesh?: boolean\r\n    ): Promise<[BABYLON.Nullable<BABYLON.Mesh>, ICollisionShape]> {\r\n        const collisionShape = {\r\n            params: [extents.clone()],\r\n            createMesh: SDFHelper.CreateBox,\r\n            sdEvaluate: SDFHelper.SDBox,\r\n            computeNormal: SDFHelper.ComputeSDFNormal,\r\n            rotation: rotation.clone(),\r\n            position: position.clone(),\r\n            mesh: null as any,\r\n            transf: new BABYLON.Matrix(),\r\n            scale: 1,\r\n            invTransf: new BABYLON.Matrix(),\r\n            dragPlane,\r\n            collisionRestitution,\r\n        };\r\n\r\n        const promise: Promise<\r\n            [BABYLON.Nullable<BABYLON.Mesh>, ICollisionShape]\r\n        > = dontCreateMesh\r\n            ? Promise.resolve([null, collisionShape])\r\n            : this._createMeshForCollision(collisionShape);\r\n\r\n        this._collisionObjectPromises.push(promise);\r\n\r\n        return promise;\r\n    }\r\n\r\n    public addCollisionPlane(\r\n        normal: BABYLON.Vector3,\r\n        d: number,\r\n        collisionRestitution?: number\r\n    ): Promise<[BABYLON.Nullable<BABYLON.Mesh>, ICollisionShape]> {\r\n        const collisionShape = {\r\n            params: [normal.clone(), d],\r\n            sdEvaluate: SDFHelper.SDPlane,\r\n            computeNormal: SDFHelper.ComputeSDFNormal,\r\n            mesh: null as any,\r\n            position: new BABYLON.Vector3(0, 0, 0),\r\n            rotation: new BABYLON.Vector3(0, 0, 0),\r\n            transf: BABYLON.Matrix.Identity(),\r\n            scale: 1,\r\n            invTransf: BABYLON.Matrix.Identity(),\r\n            dragPlane: null,\r\n            collisionRestitution,\r\n        };\r\n\r\n        const promise: Promise<\r\n            [BABYLON.Nullable<BABYLON.Mesh>, ICollisionShape]\r\n        > = Promise.resolve([null, collisionShape]);\r\n\r\n        this._collisionObjectPromises.push(promise);\r\n\r\n        return promise;\r\n    }\r\n\r\n    public addCollisionCutHollowSphere(\r\n        position: BABYLON.Vector3,\r\n        rotation: BABYLON.Vector3,\r\n        radius: number,\r\n        planeDist: number,\r\n        thickness: number,\r\n        segments: number,\r\n        dragPlane: BABYLON.Nullable<BABYLON.Vector3> = new BABYLON.Vector3(\r\n            0,\r\n            1,\r\n            0\r\n        ),\r\n        collisionRestitution?: number,\r\n        dontCreateMesh?: boolean\r\n    ): Promise<[BABYLON.Nullable<BABYLON.Mesh>, ICollisionShape]> {\r\n        const collisionShape = {\r\n            params: [radius, planeDist, thickness, segments],\r\n            createMesh: SDFHelper.CreateCutHollowSphere,\r\n            sdEvaluate: SDFHelper.SDCutHollowSphere,\r\n            computeNormal: SDFHelper.ComputeSDFNormal,\r\n            rotation: rotation.clone(),\r\n            position: position.clone(),\r\n            mesh: null as any,\r\n            transf: new BABYLON.Matrix(),\r\n            scale: 1,\r\n            invTransf: new BABYLON.Matrix(),\r\n            dragPlane,\r\n            collisionRestitution,\r\n        };\r\n\r\n        const promise: Promise<\r\n            [BABYLON.Nullable<BABYLON.Mesh>, ICollisionShape]\r\n        > = dontCreateMesh\r\n            ? Promise.resolve([null, collisionShape])\r\n            : this._createMeshForCollision(collisionShape);\r\n\r\n        this._collisionObjectPromises.push(promise);\r\n\r\n        return promise;\r\n    }\r\n\r\n    public addCollisionVerticalCylinder(\r\n        position: BABYLON.Vector3,\r\n        rotation: BABYLON.Vector3,\r\n        radius: number,\r\n        height: number,\r\n        segments: number,\r\n        dragPlane: BABYLON.Nullable<BABYLON.Vector3> = new BABYLON.Vector3(\r\n            0,\r\n            1,\r\n            0\r\n        ),\r\n        collisionRestitution?: number,\r\n        dontCreateMesh?: boolean\r\n    ): Promise<[BABYLON.Nullable<BABYLON.Mesh>, ICollisionShape]> {\r\n        const collisionShape = {\r\n            params: [radius, height, segments],\r\n            createMesh: SDFHelper.CreateVerticalCylinder,\r\n            sdEvaluate: SDFHelper.SDVerticalCylinder,\r\n            computeNormal: SDFHelper.ComputeSDFNormal,\r\n            rotation: rotation.clone(),\r\n            position: position.clone(),\r\n            mesh: null as any,\r\n            transf: new BABYLON.Matrix(),\r\n            scale: 1,\r\n            invTransf: new BABYLON.Matrix(),\r\n            dragPlane,\r\n            collisionRestitution,\r\n        };\r\n\r\n        const promise: Promise<\r\n            [BABYLON.Nullable<BABYLON.Mesh>, ICollisionShape]\r\n        > = dontCreateMesh\r\n            ? Promise.resolve([null, collisionShape])\r\n            : this._createMeshForCollision(collisionShape);\r\n\r\n        this._collisionObjectPromises.push(promise);\r\n\r\n        return promise;\r\n    }\r\n\r\n    public addCollisionMesh(\r\n        position: BABYLON.Vector3,\r\n        rotation: BABYLON.Vector3,\r\n        meshFilename: string,\r\n        sdfFilename: string,\r\n        createNormals = false,\r\n        scale = 1,\r\n        dragPlane: BABYLON.Nullable<BABYLON.Vector3> = new BABYLON.Vector3(\r\n            0,\r\n            1,\r\n            0\r\n        ),\r\n        collisionRestitution?: number,\r\n        dontCreateMesh?: boolean\r\n    ): Promise<[BABYLON.Nullable<BABYLON.Mesh>, ICollisionShape]> {\r\n        const collisionShape = {\r\n            params: [meshFilename, sdfFilename, createNormals],\r\n            createMesh: SDFHelper.CreateMesh,\r\n            sdEvaluate: SDFHelper.SDMesh,\r\n            computeNormal: SDFHelper.ComputeSDFNormal,\r\n            rotation: rotation.clone(),\r\n            position: position.clone(),\r\n            mesh: null as any,\r\n            transf: new BABYLON.Matrix(),\r\n            scale,\r\n            invTransf: new BABYLON.Matrix(),\r\n            dragPlane,\r\n            collisionRestitution,\r\n        };\r\n\r\n        const promise: Promise<\r\n            [BABYLON.Nullable<BABYLON.Mesh>, ICollisionShape]\r\n        > = dontCreateMesh\r\n            ? Promise.resolve([null, collisionShape])\r\n            : this._createMeshForCollision(collisionShape);\r\n\r\n        this._collisionObjectPromises.push(promise);\r\n\r\n        return promise;\r\n    }\r\n\r\n    public addCollisionTerrain(\r\n        size: number\r\n    ): Promise<[BABYLON.Nullable<BABYLON.Mesh>, ICollisionShape]> {\r\n        const collisionShape = {\r\n            params: [size],\r\n            createMesh: SDFHelper.CreateTerrain,\r\n            sdEvaluate: SDFHelper.SDTerrain,\r\n            computeNormal: SDFHelper.ComputeTerrainNormal,\r\n            mesh: null as any,\r\n            transf: new BABYLON.Matrix(),\r\n            scale: 1,\r\n            invTransf: new BABYLON.Matrix(),\r\n            dragPlane: null,\r\n        };\r\n\r\n        const promise: Promise<\r\n            [BABYLON.Nullable<BABYLON.Mesh>, ICollisionShape]\r\n        > = this._createMeshForCollision(collisionShape);\r\n\r\n        this._collisionObjectPromises.push(promise);\r\n\r\n        return promise;\r\n    }\r\n\r\n    protected async _createMeshForCollision(\r\n        shape: ICollisionShape\r\n    ): Promise<[BABYLON.Nullable<BABYLON.Mesh>, ICollisionShape]> {\r\n        const mesh = await shape.createMesh?.(\r\n            this._scene,\r\n            shape,\r\n            ...shape.params\r\n        );\r\n\r\n        shape.position = shape.position ?? new BABYLON.Vector3(0, 0, 0);\r\n        if (!shape.rotation && !shape.rotationQuaternion) {\r\n            shape.rotation = new BABYLON.Vector3(0, 0, 0);\r\n        }\r\n\r\n        if (!mesh) {\r\n            return [null, shape];\r\n        }\r\n\r\n        mesh.position = shape.position;\r\n        if (shape.rotation) {\r\n            mesh.rotation = shape.rotation;\r\n        } else {\r\n            mesh.rotationQuaternion = shape.rotationQuaternion!;\r\n        }\r\n\r\n        shape.mesh = mesh;\r\n\r\n        if (shape.dragPlane) {\r\n            const camera =\r\n                this._scene.activeCameras?.[0] ?? this._scene.activeCamera!;\r\n\r\n            const pointerDragBehavior = new BABYLON.PointerDragBehavior({\r\n                dragPlaneNormal: shape.dragPlane,\r\n            });\r\n            pointerDragBehavior.useObjectOrientationForDragging = false;\r\n\r\n            pointerDragBehavior.onDragStartObservable.add(() => {\r\n                camera.detachControl();\r\n            });\r\n\r\n            pointerDragBehavior.onDragEndObservable.add(() => {\r\n                camera.attachControl();\r\n            });\r\n\r\n            mesh.addBehavior(pointerDragBehavior);\r\n        }\r\n\r\n        return [mesh, shape];\r\n    }\r\n\r\n    protected async _generateParticles(regenerateAll = true) {\r\n        await this._particleGenerator?.generateParticles(\r\n            this._numParticles,\r\n            regenerateAll\r\n        );\r\n\r\n        if (\r\n            this._fluidSim &&\r\n            this._particleGenerator &&\r\n            this._fluidSim.positions !== this._particleGenerator.positions\r\n        ) {\r\n            this._fluidSim.setParticleData(\r\n                this._particleGenerator.positions,\r\n                this._particleGenerator.velocities\r\n            );\r\n\r\n            this._fluidRenderObject.object.vertexBuffers[\"position\"]?.dispose();\r\n            this._fluidRenderObject.object.vertexBuffers[\"velocity\"]?.dispose();\r\n\r\n            this._fluidRenderObject.object.vertexBuffers[\"position\"] =\r\n                new BABYLON.VertexBuffer(\r\n                    this._engine,\r\n                    this._fluidSim.positions,\r\n                    BABYLON.VertexBuffer.PositionKind,\r\n                    true,\r\n                    false,\r\n                    3,\r\n                    true\r\n                );\r\n            this._fluidRenderObject.object.vertexBuffers[\"velocity\"] =\r\n                new BABYLON.VertexBuffer(\r\n                    this._engine,\r\n                    this._fluidSim.velocities,\r\n                    \"velocity\",\r\n                    true,\r\n                    false,\r\n                    3,\r\n                    true\r\n                );\r\n        }\r\n    }\r\n\r\n    protected _makeGUIMainMenu(): void {\r\n        // empty\r\n    }\r\n\r\n    protected _syncFluidSimGUI(): void {\r\n        for (const [elem, obj, property] of this._fluidSimGUIElements) {\r\n            (elem.object as any)[elem.property] = obj[property];\r\n            elem.updateDisplay();\r\n        }\r\n    }\r\n\r\n    protected _makeGUI(): void {\r\n        this._gui = new LiLGUI.GUI({ title: \"Demo\" });\r\n        this._gui.domElement.style.marginTop = \"60px\";\r\n        this._gui.domElement.style.left = \"20px\";\r\n        this._gui.domElement.id = \"simGUI\";\r\n\r\n        const params = {\r\n            demo: FluidSimulationDemoBase._DemoList[\r\n                FluidSimulationDemoBase._CurrentDemoIndex\r\n            ].name,\r\n            environment: this._environmentFile,\r\n            paused: false,\r\n            numParticles: this._numParticles,\r\n            smoothingRadius: this._fluidSim?.smoothingRadius,\r\n            densityReference: this._fluidSim?.densityReference,\r\n            pressureConstant: this._fluidSim?.pressureConstant,\r\n            viscosity: this._fluidSim?.viscosity,\r\n            minTimeStep: this._fluidSim?.minTimeStep,\r\n            maxVelocity: this._fluidSim?.maxVelocity,\r\n            maxAcceleration: this._fluidSim?.maxAcceleration,\r\n            shapeCollisionRestitution: this._shapeCollisionRestitution,\r\n        };\r\n\r\n        const demoList: string[] = [];\r\n        for (const demo of FluidSimulationDemoBase._DemoList) {\r\n            demoList.push(demo.name);\r\n        }\r\n\r\n        this._gui\r\n            .add(params, \"demo\", demoList)\r\n            .name(\"Name\")\r\n            .onChange((value: any) => {\r\n                for (\r\n                    let i = 0;\r\n                    i < FluidSimulationDemoBase._DemoList.length;\r\n                    ++i\r\n                ) {\r\n                    if (FluidSimulationDemoBase._DemoList[i].name === value) {\r\n                        FluidSimulationDemoBase.StartDemo(i);\r\n                        break;\r\n                    }\r\n                }\r\n            });\r\n\r\n        this._gui\r\n            .add(params, \"environment\", envNames)\r\n            .name(\"Environment\")\r\n            .onChange((value: any) => {\r\n                this._environmentFile = value;\r\n                this._setEnvironment();\r\n            });\r\n\r\n        this._makeGUIMainMenu();\r\n\r\n        if (this._fluidSim && this._particleGenerator) {\r\n            const menuFluidSim = this._gui.addFolder(\"Fluid Simulator\");\r\n\r\n            menuFluidSim.$title.style.fontWeight = \"bold\";\r\n\r\n            this._fluidSimGUIElements.push([\r\n                menuFluidSim\r\n                    .add(params, \"numParticles\", 0, 40000, 88)\r\n                    .name(\"Num particles\")\r\n                    .onChange((value: any) => {\r\n                        this._numParticles = value;\r\n                        this._generateParticles(false);\r\n                    }),\r\n                this,\r\n                \"_numParticles\",\r\n            ]);\r\n\r\n            this._fluidSimGUIElements.push([\r\n                menuFluidSim\r\n                    .add(params, \"smoothingRadius\", 0, 2, 0.001)\r\n                    .name(\"Smoothing radius\")\r\n                    .onChange((value: any) => {\r\n                        this._fluidSim!.smoothingRadius = value || 0.04;\r\n                        this._particleGenerator!.particleRadius =\r\n                            this._fluidSim!.smoothingRadius / 2;\r\n                    }),\r\n                this._fluidSim,\r\n                \"smoothingRadius\",\r\n            ]);\r\n\r\n            this._fluidSimGUIElements.push([\r\n                menuFluidSim\r\n                    .add(params, \"densityReference\", 0, 50000, 100)\r\n                    .name(\"Density reference\")\r\n                    .onChange((value: any) => {\r\n                        this._fluidSim!.densityReference = value;\r\n                    }),\r\n                this._fluidSim,\r\n                \"densityReference\",\r\n            ]);\r\n\r\n            this._fluidSimGUIElements.push([\r\n                menuFluidSim\r\n                    .add(params, \"pressureConstant\", 0, 100, 1)\r\n                    .name(\"Pressure constant\")\r\n                    .onChange((value: any) => {\r\n                        this._fluidSim!.pressureConstant = value;\r\n                    }),\r\n                this._fluidSim,\r\n                \"pressureConstant\",\r\n            ]);\r\n\r\n            this._fluidSimGUIElements.push([\r\n                menuFluidSim\r\n                    .add(params, \"viscosity\", 0, 0.1, 0.001)\r\n                    .name(\"Viscosity\")\r\n                    .onChange((value: any) => {\r\n                        this._fluidSim!.viscosity = value;\r\n                    }),\r\n                this._fluidSim,\r\n                \"viscosity\",\r\n            ]);\r\n\r\n            this._fluidSimGUIElements.push([\r\n                menuFluidSim\r\n                    .add(params, \"maxVelocity\", 0, 20, 1)\r\n                    .name(\"Max velocity\")\r\n                    .onChange((value: any) => {\r\n                        this._fluidSim!.maxVelocity = value;\r\n                    }),\r\n                this._fluidSim,\r\n                \"maxVelocity\",\r\n            ]);\r\n\r\n            this._fluidSimGUIElements.push([\r\n                menuFluidSim\r\n                    .add(params, \"maxAcceleration\", 0, 100000, 10)\r\n                    .name(\"Max acceleration\")\r\n                    .onChange((value: any) => {\r\n                        this._fluidSim!.maxAcceleration = value;\r\n                    }),\r\n                this._fluidSim,\r\n                \"maxAcceleration\",\r\n            ]);\r\n\r\n            this._fluidSimGUIElements.push([\r\n                menuFluidSim\r\n                    .add(params, \"minTimeStep\", 0, 0.01, 0.00001)\r\n                    .name(\"Min time step\")\r\n                    .onChange((value: any) => {\r\n                        this._fluidSim!.minTimeStep = value;\r\n                    }),\r\n                this._fluidSim,\r\n                \"minTimeStep\",\r\n            ]);\r\n\r\n            this._fluidSimGUIElements.push([\r\n                menuFluidSim\r\n                    .add(params, \"shapeCollisionRestitution\", 0, 1, 0.001)\r\n                    .name(\"Collision restitution\")\r\n                    .onChange((value: any) => {\r\n                        this._shapeCollisionRestitution = value;\r\n                    }),\r\n                this,\r\n                \"_shapeCollisionRestitution\",\r\n            ]);\r\n\r\n            menuFluidSim\r\n                .add(params, \"paused\")\r\n                .name(\"Pause\")\r\n                .onChange((value: boolean) => {\r\n                    this._onPaused(value);\r\n                });\r\n\r\n            menuFluidSim.open();\r\n        }\r\n    }\r\n\r\n    protected _onPaused(value: boolean) {\r\n        this._paused = value;\r\n    }\r\n\r\n    protected _checkCollisions(particleRadius: number): void {\r\n        if (this._collisionObjects.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const positions = this._fluidSim!.positions;\r\n        const velocities = this._fluidSim!.velocities;\r\n\r\n        const tmpQuat = BABYLON.TmpVectors.Quaternion[0];\r\n        const tmpScale = BABYLON.TmpVectors.Vector3[0];\r\n\r\n        tmpScale.copyFromFloats(1, 1, 1);\r\n\r\n        for (let i = 0; i < this._collisionObjects.length; ++i) {\r\n            const shape = this._collisionObjects[i][1];\r\n\r\n            const quat =\r\n                shape.mesh?.rotationQuaternion ??\r\n                shape.rotationQuaternion ??\r\n                BABYLON.Quaternion.FromEulerAnglesToRef(\r\n                    shape.mesh?.rotation.x ?? shape.rotation!.x,\r\n                    shape.mesh?.rotation.y ?? shape.rotation!.y,\r\n                    shape.mesh?.rotation.z ?? shape.rotation!.z,\r\n                    tmpQuat\r\n                );\r\n            BABYLON.Matrix.ComposeToRef(\r\n                tmpScale,\r\n                quat,\r\n                shape.mesh?.position ?? shape.position!,\r\n                shape.transf\r\n            );\r\n\r\n            shape.transf.invertToRef(shape.invTransf);\r\n        }\r\n\r\n        const pos = BABYLON.TmpVectors.Vector3[4];\r\n        const normal = BABYLON.TmpVectors.Vector3[7];\r\n\r\n        for (let a = 0; a < this._fluidSim!.currentNumParticles; ++a) {\r\n            const px = positions[a * 3 + 0];\r\n            const py = positions[a * 3 + 1];\r\n            const pz = positions[a * 3 + 2];\r\n\r\n            for (let i = 0; i < this._collisionObjects.length; ++i) {\r\n                const shape = this._collisionObjects[i][1];\r\n                if (shape.disabled) {\r\n                    continue;\r\n                }\r\n\r\n                pos.copyFromFloats(px, py, pz);\r\n                BABYLON.Vector3.TransformCoordinatesToRef(\r\n                    pos,\r\n                    shape.invTransf,\r\n                    pos\r\n                );\r\n                pos.scaleInPlace(1 / shape.scale);\r\n                const dist =\r\n                    shape.scale * shape.sdEvaluate(pos, ...shape.params) -\r\n                    particleRadius;\r\n                if (dist < 0) {\r\n                    shape.computeNormal(pos, shape, normal);\r\n\r\n                    const restitution =\r\n                        shape.collisionRestitution ??\r\n                        this._shapeCollisionRestitution;\r\n\r\n                    const dotvn =\r\n                        velocities[a * 3 + 0] * normal.x +\r\n                        velocities[a * 3 + 1] * normal.y +\r\n                        velocities[a * 3 + 2] * normal.z;\r\n\r\n                    velocities[a * 3 + 0] =\r\n                        (velocities[a * 3 + 0] - 2 * dotvn * normal.x) *\r\n                        restitution;\r\n                    velocities[a * 3 + 1] =\r\n                        (velocities[a * 3 + 1] - 2 * dotvn * normal.y) *\r\n                        restitution;\r\n                    velocities[a * 3 + 2] =\r\n                        (velocities[a * 3 + 2] - 2 * dotvn * normal.z) *\r\n                        restitution;\r\n\r\n                    positions[a * 3 + 0] -= normal.x * dist;\r\n                    positions[a * 3 + 1] -= normal.y * dist;\r\n                    positions[a * 3 + 2] -= normal.z * dist;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"names":["FluidRendererGUI","constructor","scene","showGeneralMenu","this","_scene","_showGeneralMenu","_visible","_onKeyObserver","_targetRendererIndex","_targetRenderersGUIElements","_renderObjectIndex","_renderObjectsGUIElements","_gui","initialize","visible","v","domElement","style","display","dispose","oldgui","document","getElementById","remove","onKeyboardObservable","_setupKeyboard","add","kbInfo","type","event","key","title","marginTop","id","_makeMenuGeneral","_makeMenuTargetRenderers","_makeMenuRenderObjects","_addList","menu","params","name","friendlyName","list","onChange","value","_parameterChanged","_addCheckbox","_addSlider","min","max","step","_addColor","addColor","enable","_parameterRead","general","addFolder","$title","fontWeight","open","fluidRenderer","targetRenderers","length","targets_index","targets_generateDiffuseTexture","targets_fluidColor","targets_density","targets_refractionStrength","targets_fresnelClamp","targets_specularPower","targets_minimumThickness","targets_debug","targets_debugFeature","targets_enableBlurDepth","targets_blurDepthSizeDivisor","targets_blurDepthFilterSize","targets_blurDepthNumIterations","targets_blurDepthMaxFilterSize","targets_blurDepthDepthScale","targets_enableBlurThickness","targets_blurThicknessSizeDivisor","targets_blurThicknessFilterSize","targets_blurThicknessNumIterations","targets_depthMapSize","targets_thicknessMapSize","targets_diffuseMapSize","targets_useVelocity","targets_useFixedThickness","targetList","i","push","menuColor","fontStyle","menuBlurDepth","menuBlurThickness","menuDebug","Object","keys","FluidRenderingDebug","filter","k","isNaN","Number","renderObjects","objects_index","objects_particleSize","objects_particleThicknessAlpha","objectList","_readValue","obj","parts","split","part","toHexString","endsWith","_setValue","startsWith","substring","object","_fillValues","listGUIElements","elem","property","updateDisplay","syncGUI","enableFluidRenderer","disableFluidRenderer","fluidColor","copyFrom","typedDebugFeature","val","debugFeature","parseFloat","FluidSimulator","positions","velocities","mass","_smoothingRadius","densityReference","pressureConstant","viscosity","gravity","minTimeStep","maxVelocity","maxAcceleration","_positions","undefined","_velocities","_particles","_numMaxParticles","_mass","setParticleData","_hash","Hash","currentNumParticles","_smoothingRadius2","_poly6Constant","_spikyConstant","_viscConstant","_computeConstants","smoothingRadius","radius","m","Math","PI","pow","numMaxParticles","Float32Array","density","pressure","accelX","accelY","accelZ","update","deltaTime","timeLeft","create","_computeDensityAndPressure","_computeAcceleration","timeStep","_calculateTimeStep","_updatePositions","a","pA","paX","paY","paZ","query","ib","querySize","b","queryIds","diffX","diffY","diffZ","r2","w","vaX","vaY","vaZ","pressureAccelX","pressureAccelY","pressureAccelZ","viscosityAccelX","viscosityAccelY","viscosityAccelZ","r","sqrt","pB","massRatio","fp","fv","x","y","z","mag","maxSpeedOfSound","velSq","accSq","spsSq","velStep","accStep","spsStep","spacing","maxNumObjects","_spacing","_tableSize","_cellStart","Int32Array","_cellEntries","_queryIds","_querySize","hashCoords","xi","yi","zi","h","abs","intCoord","coord","floor","hashPos","pos","nr","numElements","numObjects","fill","start","maxDist","x0","y0","z0","x1","y1","z1","end","ParticleGenerator","loadFromFile","_numParticles","_currNumParticles","_numCrossSection","particleRadius","_loadFromFile","position","_observer","onBeforeRenderObservable","px1","py1","pz1","px2","py2","pz2","currNumParticles","async","numTotParticles","regenerateAll","_generateParticlesFromFile","_generateParticles","fileName","lines","fetch","text","replace","particlePos","particleVel","numParticles","line","vals","charAt","newPositions","newVelocities","set","particleStartIndex","distance","jitter","getJitter","random","yCoord","dimY","angle","x2","sin","xCoord","xc","yc","zCoord","eps","eps1","eps2","eps3","eps4","dir1","dir2","dir3","dir4","SDFHelper","static","shape","extents","box","width","height","depth","material","metallic","roughness","albedoTexture","cullBackFaces","Promise","resolve","s","sphere","diameter","segments","planeDist","thickness","plane","size","rotation","csg1","csgp","subtractInPlace","mesh","toMesh","computeWorldMatrix","refreshBoundingInfo","scaling","setAll","getBoundingInfo","boundingBox","maximumWorld","csg2","meshFinal","bakeCurrentTransformIntoVertices","cylinder","tessellation","ground","subdivisions","maxHeight","onReady","updateCoordinateHeights","mat","metallicTexture","bumpTexture","useRoughnessFromMetallicTextureGreen","textData","dimLine","dimX","dimZ","originLine","origin","data","meshFilename","sdfFilename","createNormals","promises","then","response","_ParseSDFData","all","results","meshes","scale","p","q","copyFromFloats","tmp","maximizeInPlaceFromFloats","n","t","qx","qy","dx","dy","dx2","dy2","terrain","getHeightAtCoordinates","sdf","gx","gy","gz","fx","fy","fz","a00","a10","a11","b00","b10","b11","normal","posTemp","dir","addInPlace","scaleInPlace","sdEvaluate","transf","normalize","getNormalAtCoordinatesToRef","envNames","envFile","FluidSimulationDemoBase","noFluidSimulation","particleFileName","_engine","getEngine","_fluidRenderer","_paused","_fluidRendererGUI","_sceneObserver","_fluidSim","_particleGenerator","_loadParticlesFromFile","_shapeCollisionRestitution","_collisionObjectPromises","_collisionObjects","_environmentFile","_fluidSimGUIElements","_noFluidSimulation","camera","activeCameras","activeCamera","storeState","_fluidRenderObject","addVertexBuffer","targetRenderer","enableBlurDepth","blurDepthFilterSize","blurDepthNumIterations","blurDepthDepthScale","refractionStrength","specularPower","blurThicknessFilterSize","blurThicknessNumIterations","dirLight","particleSize","particleThicknessAlpha","useVelocity","minimumThickness","window","fsim","factory","_DemoList","index","_CurrentDemo","_CurrentDemoIndex","run","_setEnvironment","idx","indexOf","environmentTexture","createDefaultSkybox","_run","_makeGUI","setNumParticles","_checkCollisions","vertexBuffers","updateDirectly","disposeCollisionObject","splice","destroy","removeRenderObject","_restoreStateValues","addCollisionSphere","dragPlane","collisionRestitution","dontCreateMesh","collisionShape","createMesh","computeNormal","clone","invTransf","promise","_createMeshForCollision","addCollisionBox","addCollisionPlane","d","addCollisionCutHollowSphere","addCollisionVerticalCylinder","addCollisionMesh","addCollisionTerrain","rotationQuaternion","pointerDragBehavior","dragPlaneNormal","useObjectOrientationForDragging","onDragStartObservable","detachControl","onDragEndObservable","attachControl","addBehavior","generateParticles","_makeGUIMainMenu","_syncFluidSimGUI","left","demo","environment","paused","shapeCollisionRestitution","demoList","StartDemo","menuFluidSim","_onPaused","tmpQuat","tmpScale","quat","invertToRef","px","py","pz","disabled","dist","restitution","dotvn"],"sourceRoot":""}