"use strict";(self.webpackChunkbabylonjs_fluid_rendering=self.webpackChunkbabylonjs_fluid_rendering||[]).push([[179],{3179:(e,t,a)=>{a.r(t),a.d(t,{SDFHelper:()=>g});var r=a(6291);const s=a.p+"1927c2ee10e174350b0f2680480bac03.png",o=a.p+"42501ae63687985d3bdf75e684bf30b8.png",n=a.p+"de78498b6fd56d907b099104d11e9a2a.png",i=a.p+"cb9384751f5882e7f6eb9f8d4f333114.png",l=1e-4,c=new r.Vector3(l,-l,-l),m=new r.Vector3(-l,-l,l),d=new r.Vector3(-l,l,-l),h=new r.Vector3(l,l,l),u=new r.Vector3(1,-1,-1),p=new r.Vector3(-1,-1,1),M=new r.Vector3(-1,1,-1),x=new r.Vector3(1,1,1);class g{static CreateBox(e,t,a){const s=r.MeshBuilder.CreateBox("box",{width:2*a.x,height:2*a.y,depth:2*a.z},e),o=new r.PBRMaterial("boxMat",e);return o.metallic=0,o.roughness=.9,o.albedoTexture=new r.Texture("https://playground.babylonjs.com/textures/wood.jpg",e),o.cullBackFaces=!0,s.material=o,Promise.resolve(s)}static CreateSphere(e,t,a){const s=r.MeshBuilder.CreateSphere("sphere",{diameter:2*a,segments:16},e),o=new r.PBRMaterial("sphereMat",e);return o.metallic=1,o.roughness=.05,o.albedoTexture=new r.Texture(i,e),o.cullBackFaces=!0,s.material=o,Promise.resolve(s)}static CreateCutHollowSphere(e,t,a,s,o,n){o/=a;const l=r.MeshBuilder.CreateSphere("sphere",{diameter:2*a,segments:n},e),c=r.MeshBuilder.CreatePlane("plane",{size:2*a},e);c.rotation.y=Math.PI/2,c.position.x=s;const m=r.CSG.FromMesh(l),d=r.CSG.FromMesh(c);l.dispose(),c.dispose(),m.subtractInPlace(d);const h=m.toMesh("sppl");h.computeWorldMatrix(!0),h.refreshBoundingInfo(),h.scaling.setAll(1-o),h.position.x=h.getBoundingInfo().boundingBox.maximumWorld.x*o;const u=r.CSG.FromMesh(h);h.dispose(),m.subtractInPlace(u);const p=m.toMesh("cutHollowSphere");p.rotation.z=Math.PI/2,p.bakeCurrentTransformIntoVertices();const M=new r.PBRMaterial("cutHollowSphereMat",e);return M.metallic=1,M.roughness=.05,M.albedoTexture=new r.Texture(i,e),M.cullBackFaces=!0,p.material=M,Promise.resolve(p)}static CreateVerticalCylinder(e,t,a,s,o){const n=r.MeshBuilder.CreateCylinder("cylinder",{diameter:2*a,height:s,tessellation:o},e),l=new r.PBRMaterial("cylinderMat",e);return l.metallic=1,l.roughness=.05,l.albedoTexture=new r.Texture(i,e),l.cullBackFaces=!0,n.material=l,Promise.resolve(n)}static CreateTerrain(e,t,a){const i=r.MeshBuilder.CreateGroundFromHeightMap("terrain","https://playground.babylonjs.com/textures/heightMap.png",{width:a,height:a,subdivisions:128,maxHeight:a/5,onReady:()=>i.updateCoordinateHeights()},e),l=new r.PBRMaterial("mat",e);return l.metallicTexture=new r.Texture(o,e),l.albedoTexture=new r.Texture(s,e),l.bumpTexture=new r.Texture(n,e),l.useRoughnessFromMetallicTextureGreen=!0,l.metallic=0,l.roughness=1,i.material=l,t.params.push(i),Promise.resolve(i)}static _ParseSDFData(e){const t=e.replace("\r","").split("\n"),a=t[0].split(" "),s=parseFloat(a[0]),o=parseFloat(a[1]),n=parseFloat(a[2]),i=t[1].split(" "),l=new r.Vector3(parseFloat(i[0]),parseFloat(i[1]),parseFloat(i[2])),c=parseFloat(t[2]),m=[];for(let e=3;e<t.length;++e){const a=t[e];0!==a.length&&m.push(parseFloat(a))}return{dimX:s,dimY:o,dimZ:n,origin:l,step:c,data:m}}static CreateMesh(e,t,a,o,n){return new Promise((i=>{const l=[r.SceneLoader.ImportMeshAsync("","src/assets/scenes/",a,e),new Promise((e=>{fetch("../src/assets/sdf/"+o).then((a=>{a.text().then((a=>{t.params.push(g._ParseSDFData(a)),e(void 0)}))}))}))];Promise.all(l).then((a=>{const o=a[0].meshes[0];if(!o.material){const t=new r.PBRMaterial("meshMat",e);t.metallic=1,t.roughness=.05,t.albedoTexture=new r.Texture(s,e),t.cullBackFaces=!0,o.material=t}n&&o.createNormals(!1),o.scaling.setAll(t.scale),i(o)}))}))}static SDBox(e,t){const a=r.TmpVectors.Vector3[0];a.copyFromFloats(Math.abs(e.x),Math.abs(e.y),Math.abs(e.z)),a.subtractInPlace(t);const s=Math.min(Math.max(a.x,a.y,a.z),0);return a.maximizeInPlaceFromFloats(0,0,0),a.length()+s}static SDSphere(e,t){return e.length()-t}static SDPlane(e,t,a){return r.Vector3.Dot(e,t)+a}static SDCutHollowSphere(e,t,a,r){const s=Math.sqrt(t*t-a*a),o=Math.sqrt(e.x*e.x+e.z*e.z),n=e.y;return a*o<s*n?Math.sqrt((o-s)*(o-s)+(n-a)*(n-a)):Math.abs(Math.sqrt(o*o+n*n)-t)-r}static SDVerticalCylinder(e,t,a){const r=Math.abs(Math.sqrt(e.x*e.x+e.z*e.z))-t,s=Math.abs(e.y)-a,o=Math.max(r,0),n=Math.max(s,0);return Math.min(Math.max(r,s),0)+Math.sqrt(o*o+n*n)}static SDTerrain(e,t,a){return e.y-a.getHeightAtCoordinates(e.x,e.z)}static SDMesh(e,t,a,r,s){const o=(e.x-s.origin.x)/s.step,n=(e.y-s.origin.y)/s.step,i=(e.z-s.origin.z)/s.step;let l=Math.floor(o),c=Math.floor(n),m=Math.floor(i);l=Math.max(Math.min(l,s.dimX-2),0),c=Math.max(Math.min(c,s.dimY-2),0),m=Math.max(Math.min(m,s.dimZ-2),0);const d=o-l,h=n-c,u=i-m,p=s.data[m*s.dimY*s.dimX+c*s.dimX+l],M=s.data[m*s.dimY*s.dimX+c*s.dimX+l+1],x=s.data[m*s.dimY*s.dimX+(c+1)*s.dimX+l+1],g=(p*(1-d)+M*d)*(1-h)+(s.data[m*s.dimY*s.dimX+(c+1)*s.dimX+l]*(1-d)+x*d)*h,b=s.data[(m+1)*s.dimY*s.dimX+c*s.dimX+l],F=s.data[(m+1)*s.dimY*s.dimX+c*s.dimX+l+1],P=s.data[(m+1)*s.dimY*s.dimX+(c+1)*s.dimX+l+1];return g*(1-u)+((b*(1-d)+F*d)*(1-h)+(s.data[(m+1)*s.dimY*s.dimX+(c+1)*s.dimX+l]*(1-d)+P*d)*h)*u}static ComputeSDFNormal(e,t,a){const s=r.TmpVectors.Vector3[5],o=r.TmpVectors.Vector3[6];a.copyFromFloats(0,0,0),s.copyFrom(e),o.copyFrom(u),a.addInPlace(o.scaleInPlace(t.sdEvaluate(s.addInPlace(c),...t.params))),s.copyFrom(e),o.copyFrom(p),a.addInPlace(o.scaleInPlace(t.sdEvaluate(s.addInPlace(m),...t.params))),s.copyFrom(e),o.copyFrom(M),a.addInPlace(o.scaleInPlace(t.sdEvaluate(s.addInPlace(d),...t.params))),s.copyFrom(e),o.copyFrom(x),a.addInPlace(o.scaleInPlace(t.sdEvaluate(s.addInPlace(h),...t.params))),r.Vector3.TransformNormalToRef(a,t.transf,a),a.normalize()}static ComputeTerrainNormal(e,t,a){t.params[1].getNormalAtCoordinatesToRef(e.x,e.z,a)}}}}]);
//# sourceMappingURL=179.5c28c0b11abc2d5a96ce.js.map